# java_leihs-procure-server env check via asdf v0.13.1
# java_leihs-procure-server env skipped update; touch .tool-versions or remove /var/folders/jl/49spzkdd2v3cdz37fgmp0ddr6cj76v/T/asdf_cache_java_leihs-procure-server to force update
# clojure_leihs-procure-server env check via asdf v0.13.1
# clojure_leihs-procure-server env skipped update; touch .tool-versions or remove /var/folders/jl/49spzkdd2v3cdz37fgmp0ddr6cj76v/T/asdf_cache_clojure_leihs-procure-server to force update
Warning: environ value /Users/mradl/.asdf/installs/java/zulu-11.60.19 for key :java-home has been overwritten with /Users/mradl/.asdf/installs/java/zulu-11.60.19/zulu-11.jdk/Contents/Home
>oo >tocheck users3 sql-order-users, sqlmap= {:select [:users.id :users.firstname :users.lastname], :from [:users]}
>oo >tocheck users3 sql-order-users, sqlmap= {:select [:users.*], :from [:users], :where [:in :users.id {:select [:procurement_admins.user_id], :from [:procurement_admins]}]}
>o> conc concat(lower(coalesce(procurement_requests.article_name, '')), lower(coalesce(models.product, '')), lower(coalesce(models.version, '')))
2023-12-16T14:13:38.327Z NX-41294 DEBUG [leihs.procurement.resources.request:213] - (-> (sql/select [[:raw (str "DISTINCT ON (procurement_requests.id, " conc ") procurement_requests.*")]]) (sql/from :procurement_requests) (sql/left-join :models [:= :models.id :procurement_requests.model_id]) (sql/order-by :procurement_requests.id [[:raw conc]])) => {:select [[[:raw "DISTINCT ON (procurement_requests.id, concat(lower(coalesce(procurement_requests.article_name, '')), lower(coalesce(models.product, '')), lower(coalesce(models.version, '')))) procurement_requests.*"]]], :from [:procurement_requests], :left-join [:models [:= :models.id :procurement_requests.model_id]], :order-by [:procurement_requests.id [[:raw "concat(lower(coalesce(procurement_requests.article_name, '')), lower(coalesce(models.product, '')), lower(coalesce(models.version, '')))"]]]}
>o> templates::templates-base-query ERROR?
2023-12-16T14:13:38.378Z NX-41294 DEBUG [leihs.procurement.resources.templates:29] - (-> (sql/select :procurement_templates.*) (sql/from :procurement_templates) (sql/left-join :models [:= :models.id :procurement_templates.model_id]) (sql/order-by [[:concat (->> [:procurement_templates.article_name :models.product :models.version] (map (fn* [p1__45183#] (->> [:lower [:coalesce p1__45183# ""]]))))]])) => {:select [:procurement_templates.*], :from [:procurement_templates], :left-join [:models [:= :models.id :procurement_templates.model_id]], :order-by [[[:concat ([:lower [:coalesce :procurement_templates.article_name ""]] [:lower [:coalesce :models.product ""]] [:lower [:coalesce :models.version ""]])]]]}
2023-12-16T14:13:38.610Z NX-41294 WARN [leihs.core.release:13] - Failed to read releases.yml, returning bogus value 
2023-12-16T14:13:39.118Z NX-41294 INFO [leihs.core.logging:37] - initializing logging  {:min-level [[#{"leihs.procurement" "leihs.procurement.resources.*" "leihs.procurement.permissions.*" "leihs.procurement.authorization" "leihs.procurement.*"} :debug] [#{"com.zaxxer.hikari.*" "leihs.*"} :info] [#{"*"} :warn]], :log-level nil}
2023-12-16T14:13:39.121Z NX-41294 INFO [leihs.core.logging:39] - initialized logging  {:min-level [[#{"leihs.procurement" "leihs.procurement.resources.*" "leihs.procurement.permissions.*" "leihs.procurement.authorization" "leihs.procurement.*"} :debug] [#{"com.zaxxer.hikari.*" "leihs.*"} :info] [#{"*"} :warn]], :ns-filter #{"*"}, :middleware [], :timestamp-opts {:pattern :iso8601, :locale :jvm-default, :timezone :utc}, :output-fn #object[taoensso.timbre$default_output_fn 0x2aa8c9f9 "taoensso.timbre$default_output_fn@2aa8c9f9"], :appenders {:println {:enabled? true, :fn #object[taoensso.timbre.appenders.core$println_appender$fn__3459 0x47db3ff "taoensso.timbre.appenders.core$println_appender$fn__3459@47db3ff"]}}, :_init-config {:loaded-from-source :default, :compile-time-config {:min-level nil, :ns-pattern "*"}}, :log-level nil}
2023-12-16T14:13:39.122Z NX-41294 INFO [leihs.procurement.main:50] - main ("--dev-mode" "true" "--repl" "true" "run")
2023-12-16T14:13:39.134Z NX-41294 INFO [leihs.core.repl:62] - init {:dev-mode true, :repl true, :repl-bind "localhost", :repl-port 48999, :repl-port-file ".nrepl-port"}
2023-12-16T14:13:39.136Z NX-41294 INFO [leihs.core.repl:70] - starting nREPL server  48999 localhost
2023-12-16T14:13:39.156Z NX-41294 INFO [leihs.core.repl:75] - started nREPL server 
2023-12-16T14:13:39.159Z NX-41294 INFO [leihs.procurement.run:326] - Invoking run with options:  {:db-host localhost, :db-max-pool-size 16, :db-min-pool-size 2, :db-name leihs_test, :db-password leihs, :db-port 5415, :db-user leihs, :dev-mode true, :http-host localhost, :http-max-threads 8, :http-min-threads 1, :http-port 3230, :http-queue-capacity 640, :http-thread-keep-alive-seconds 10, :http-worker-prefix leihs-service-http-worker-, :pid-file nil, :repl true, :repl-bind localhost, :repl-port 48999, :repl-port-file .nrepl-port}
2023-12-16T14:13:39.160Z NX-41294 INFO [leihs.core.shutdown:20] - PID 58600
2023-12-16T14:13:39.182Z NX-41294 INFO [leihs.core.shutdown:29] - Registering SIGTERM handler for shutdown.
2023-12-16T14:13:39.236Z NX-41294 INFO [leihs.core.graphql:17] - Initialized graphQL schema.
2023-12-16T14:13:39.238Z NX-41294 INFO [leihs.core.db:220] - Initializing db  {:db-name "leihs_test", :db-port 5415, :db-host "localhost", :db-user "leihs", :db-password "leihs", :db-min-pool-size 2, :db-max-pool-size 16}
2023-12-16T14:13:39.244Z NX-41294 INFO [com.zaxxer.hikari.HikariDataSource:80] - db-pool - Starting...
2023-12-16T14:13:39.314Z NX-41294 INFO [com.zaxxer.hikari.pool.HikariPool:565] - db-pool - Added connection org.postgresql.jdbc.PgConnection@68f5f480
2023-12-16T14:13:39.320Z NX-41294 INFO [com.zaxxer.hikari.HikariDataSource:82] - db-pool - Start completed.
2023-12-16T14:13:39.320Z NX-41294 INFO [leihs.core.db:222] - Initialized db  {:datasource #object[com.zaxxer.hikari.HikariDataSource 0x18d95122 "HikariDataSource (db-pool)"]}
2023-12-16T14:13:39.322Z NX-41294 INFO [leihs.core.db:223] - Initializing ds-next  {:db-name "leihs_test", :db-port 5415, :db-host "localhost", :db-user "leihs", :db-password "leihs", :db-min-pool-size 2, :db-max-pool-size 16}
2023-12-16T14:13:39.334Z NX-41294 INFO [com.zaxxer.hikari.HikariDataSource:110] - HikariPool-1 - Starting...
2023-12-16T14:13:39.345Z NX-41294 INFO [com.zaxxer.hikari.pool.HikariPool:565] - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@72b35f05
2023-12-16T14:13:39.345Z NX-41294 INFO [com.zaxxer.hikari.HikariDataSource:123] - HikariPool-1 - Start completed.
2023-12-16T14:13:39.351Z NX-41294 INFO [leihs.core.db:225] - Initialized ds-next  #next.jdbc.default_options.DefaultOptions{:connectable #object[com.zaxxer.hikari.HikariDataSource 0x5bbb0d7f "HikariDataSource (HikariPool-1)"], :options {:builder-fn #object[next.jdbc.result_set$as_unqualified_lower_maps 0x3db93dbb "next.jdbc.result_set$as_unqualified_lower_maps@3db93dbb"]}}
2023-12-16T14:13:39.358Z NX-41294 INFO [leihs.core.http-server:101] - starting http-server  {:port 3230, :ip "localhost", :pool {:queue #object[java.util.concurrent.ArrayBlockingQueue 0x5de52ced "[]"], :pool #object[java.util.concurrent.ThreadPoolExecutor 0x3bd336c8 "java.util.concurrent.ThreadPoolExecutor@3bd336c8[Running, pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0]"]}}
2023-12-16T14:13:39.369Z NX-41294 INFO [leihs.core.http-server:104] - started http-server 
>>> authenticate::skip= true  handler-key= :sign-in
>>> authenticate::authenticated-entity nil

>> authorize >

>> authorize::handler > #object[leihs.core.locale$wrap$fn__45448 0x2031e135 leihs.core.locale$wrap$fn__45448@2031e135]

>> authorize::request > {:cookies {}, :remote-addr 127.0.0.1, :start-time 228274434124208, :params {}, :settings {:email_sending_enabled false, :sessions_max_lifetime_secs 432000, :smtp_default_from_address your.lending.desk@example.com, :public_image_caching_enabled true, :sessions_force_secure false, :deliver_received_order_notifications false, :external_base_url nil, :sessions_force_uniqueness false, :email_signature Cheers,}, :tx-next #next.jdbc.default_options.DefaultOptions{:connectable #object[com.zaxxer.hikari.HikariDataSource 0x5bbb0d7f HikariDataSource (HikariPool-1)], :options {:builder-fn #object[next.jdbc.result_set$as_unqualified_lower_maps 0x3db93dbb next.jdbc.result_set$as_unqualified_lower_maps@3db93dbb]}}, :query-params-raw {}, :route-params nil, :headers {accept */*, accept-encoding gzip;q=1.0,deflate;q=0.6,identity;q=0.3, host localhost:3230, user-agent Faraday v2.7.1}, :async-channel #object[org.httpkit.server.AsyncChannel 0x7a0f418 /127.0.0.1:3230<->/127.0.0.1:55401], :server-port 3230, :params-raw {}, :tx {:datasource #object[com.zaxxer.hikari.HikariDataSource 0x18d95122 HikariDataSource (db-pool)]}, :content-length 0, :form-params {}, :websocket? false, :query-params {}, :content-type nil, :form-params-raw {}, :character-encoding utf8, :uri /sign-in, :server-name localhost, :handler-key :sign-in, :query-string nil, :body nil, :graphql-schema #CompiledSchema<>, :handler #object[compojure.core$routes$fn__27950 0x17459cfd compojure.core$routes$fn__27950@17459cfd], :multipart-params {}, :scheme :http, :request-method :get, :accept {:mime :html, :charset nil, :encoding nil, :language nil}}

>> authorize::handler-key >> :sign-in
>myprint>  authEnt? nil
>myprint>  txn #next.jdbc.default_options.DefaultOptions{:connectable #object[com.zaxxer.hikari.HikariDataSource 0x5bbb0d7f HikariDataSource (HikariPool-1)], :options {:builder-fn #object[next.jdbc.result_set$as_unqualified_lower_maps 0x3db93dbb next.jdbc.result_set$as_unqualified_lower_maps@3db93dbb]}}
2023-12-16T14:13:53.679Z NX-41294 DEBUG [leihs.procurement.permissions.user:?] - (sql-format (sql/select [[:exists (-> (sql/select [true :exists]) (sql/from :procurement_admins) (sql/where [:= :procurement_admins.user_id [:cast (:user_id auth-entity) :uuid]]))]])) => ["SELECT EXISTS (SELECT TRUE AS exists FROM procurement_admins WHERE procurement_admins.user_id = CAST(NULL AS UUID))"]
>o> admin? [SELECT EXISTS (SELECT TRUE AS exists FROM procurement_admins WHERE procurement_admins.user_id = CAST(NULL AS UUID))]
2023-12-16T14:13:53.679Z NX-41294 DEBUG [leihs.procurement.permissions.user:38] - query => ["SELECT EXISTS (SELECT TRUE AS exists FROM procurement_admins WHERE procurement_admins.user_id = CAST(NULL AS UUID))"]
>o> admin? {:exists false}
2023-12-16T14:13:53.693Z NX-41294 DEBUG [leihs.procurement.permissions.user:42] - (:exists result) => false
>myprint>  admin false
>o> inspector? [SELECT EXISTS (SELECT TRUE AS exists FROM procurement_category_inspectors WHERE procurement_category_inspectors.user_id = CAST(NULL AS UUID)) AS result]
2023-12-16T14:13:53.694Z NX-41294 DEBUG [leihs.procurement.permissions.user:62] - query => ["SELECT EXISTS (SELECT TRUE AS exists FROM procurement_category_inspectors WHERE procurement_category_inspectors.user_id = CAST(NULL AS UUID)) AS result"]
>o> inspector? {:result false}
>myprint>  inspector false
>o> viewer? [SELECT EXISTS (SELECT TRUE AS exists FROM procurement_category_viewers WHERE procurement_category_viewers.user_id = CAST(NULL AS UUID)) AS result]
2023-12-16T14:13:53.698Z NX-41294 DEBUG [leihs.procurement.permissions.user:85] - query => ["SELECT EXISTS (SELECT TRUE AS exists FROM procurement_category_viewers WHERE procurement_category_viewers.user_id = CAST(NULL AS UUID)) AS result"]
>o> viewer? {:result false}
>myprint>  viewer false
>o> requester?? [SELECT EXISTS (SELECT TRUE AS exists FROM procurement_requesters_organizations WHERE procurement_requesters_organizations.user_id = CAST(NULL AS UUID))]
2023-12-16T14:13:53.700Z NX-41294 DEBUG [leihs.procurement.permissions.user:169] - query => ["SELECT EXISTS (SELECT TRUE AS exists FROM procurement_requesters_organizations WHERE procurement_requesters_organizations.user_id = CAST(NULL AS UUID))"]
>o> requester?? {:exists false}
2023-12-16T14:13:53.702Z NX-41294 DEBUG [leihs.procurement.permissions.user:173] - (:exists result) => false
>myprint>  requester false
>>> authenticate::skip= true  handler-key= :sign-in
>>> authenticate::authenticated-entity nil

>> authorize >

>> authorize::handler > #object[leihs.core.locale$wrap$fn__45448 0x2031e135 leihs.core.locale$wrap$fn__45448@2031e135]

>> authorize::request > {:cookies {leihs-anti-csrf-token {:value a1c58bca-ae64-436e-b5f2-c2361a67571c}}, :remote-addr 127.0.0.1, :start-time 228274673943000, :params {:password password, :user sachiko@hartmann.info}, :settings {:email_sending_enabled false, :sessions_max_lifetime_secs 432000, :smtp_default_from_address your.lending.desk@example.com, :public_image_caching_enabled true, :sessions_force_secure false, :deliver_received_order_notifications false, :external_base_url nil, :sessions_force_uniqueness false, :email_signature Cheers,}, :tx-next #next.jdbc.default_options.DefaultOptions{:connectable #object[com.zaxxer.hikari.pool.HikariProxyConnection 0x7efb918c HikariProxyConnection@2130416012 wrapping org.postgresql.jdbc.PgConnection@72b35f05], :options {:builder-fn #object[next.jdbc.result_set$as_unqualified_lower_maps 0x3db93dbb next.jdbc.result_set$as_unqualified_lower_maps@3db93dbb]}}, :query-params-raw {}, :route-params nil, :headers {accept */*, accept-encoding gzip;q=1.0,deflate;q=0.6,identity;q=0.3, content-length 46, content-type application/x-www-form-urlencoded, cookie leihs-anti-csrf-token=a1c58bca-ae64-436e-b5f2-c2361a67571c, host localhost:3230, user-agent Faraday v2.7.1, x-csrf-token a1c58bca-ae64-436e-b5f2-c2361a67571c}, :async-channel #object[org.httpkit.server.AsyncChannel 0x74c47ec8 /127.0.0.1:3230<->/127.0.0.1:55402], :server-port 3230, :params-raw {:password password, :user sachiko@hartmann.info}, :tx {:datasource #object[com.zaxxer.hikari.HikariDataSource 0x18d95122 HikariDataSource (db-pool)], :connection #object[com.zaxxer.hikari.pool.HikariProxyConnection 0x30897f99 HikariProxyConnection@814317465 wrapping org.postgresql.jdbc.PgConnection@68f5f480], :level 1, :rollback #object[clojure.lang.Atom 0x3e41b541 {:status :ready, :val false}]}, :content-length 46, :form-params {:password password, :user sachiko@hartmann.info}, :websocket? false, :query-params {}, :content-type application/x-www-form-urlencoded, :form-params-raw {:password password, :user sachiko@hartmann.info}, :character-encoding utf8, :uri /sign-in, :server-name localhost, :handler-key :sign-in, :query-string nil, :body #object[org.httpkit.BytesInputStream 0x7ec28da8 BytesInputStream[len=46]], :graphql-schema #CompiledSchema<>, :handler #object[compojure.core$routes$fn__27950 0x17459cfd compojure.core$routes$fn__27950@17459cfd], :multipart-params {}, :scheme :http, :request-method :post, :accept {:mime :html, :charset nil, :encoding nil, :language nil}}

>> authorize::handler-key >> :sign-in
>myprint>  authEnt? nil
>myprint>  txn #next.jdbc.default_options.DefaultOptions{:connectable #object[com.zaxxer.hikari.pool.HikariProxyConnection 0x7efb918c HikariProxyConnection@2130416012 wrapping org.postgresql.jdbc.PgConnection@72b35f05], :options {:builder-fn #object[next.jdbc.result_set$as_unqualified_lower_maps 0x3db93dbb next.jdbc.result_set$as_unqualified_lower_maps@3db93dbb]}}
2023-12-16T14:13:53.859Z NX-41294 DEBUG [leihs.procurement.permissions.user:?] - (sql-format (sql/select [[:exists (-> (sql/select [true :exists]) (sql/from :procurement_admins) (sql/where [:= :procurement_admins.user_id [:cast (:user_id auth-entity) :uuid]]))]])) => ["SELECT EXISTS (SELECT TRUE AS exists FROM procurement_admins WHERE procurement_admins.user_id = CAST(NULL AS UUID))"]
>o> admin? [SELECT EXISTS (SELECT TRUE AS exists FROM procurement_admins WHERE procurement_admins.user_id = CAST(NULL AS UUID))]
2023-12-16T14:13:53.859Z NX-41294 DEBUG [leihs.procurement.permissions.user:38] - query => ["SELECT EXISTS (SELECT TRUE AS exists FROM procurement_admins WHERE procurement_admins.user_id = CAST(NULL AS UUID))"]
>o> admin? {:exists false}
2023-12-16T14:13:53.860Z NX-41294 DEBUG [leihs.procurement.permissions.user:42] - (:exists result) => false
>myprint>  admin false
>o> inspector? [SELECT EXISTS (SELECT TRUE AS exists FROM procurement_category_inspectors WHERE procurement_category_inspectors.user_id = CAST(NULL AS UUID)) AS result]
2023-12-16T14:13:53.860Z NX-41294 DEBUG [leihs.procurement.permissions.user:62] - query => ["SELECT EXISTS (SELECT TRUE AS exists FROM procurement_category_inspectors WHERE procurement_category_inspectors.user_id = CAST(NULL AS UUID)) AS result"]
>o> inspector? {:result false}
>myprint>  inspector false
>o> viewer? [SELECT EXISTS (SELECT TRUE AS exists FROM procurement_category_viewers WHERE procurement_category_viewers.user_id = CAST(NULL AS UUID)) AS result]
2023-12-16T14:13:53.861Z NX-41294 DEBUG [leihs.procurement.permissions.user:85] - query => ["SELECT EXISTS (SELECT TRUE AS exists FROM procurement_category_viewers WHERE procurement_category_viewers.user_id = CAST(NULL AS UUID)) AS result"]
>o> viewer? {:result false}
>myprint>  viewer false
>o> requester?? [SELECT EXISTS (SELECT TRUE AS exists FROM procurement_requesters_organizations WHERE procurement_requesters_organizations.user_id = CAST(NULL AS UUID))]
2023-12-16T14:13:53.862Z NX-41294 DEBUG [leihs.procurement.permissions.user:169] - query => ["SELECT EXISTS (SELECT TRUE AS exists FROM procurement_requesters_organizations WHERE procurement_requesters_organizations.user_id = CAST(NULL AS UUID))"]
>o> requester?? {:exists false}
2023-12-16T14:13:53.863Z NX-41294 DEBUG [leihs.procurement.permissions.user:173] - (:exists result) => false
>myprint>  requester false
>>> authenticate::skip= nil  handler-key= :graphql
>>> authenticate::authenticated-entity {:email sachiko@hartmann.info, :contracts_count 0, :lastname Gorczany, :org_id nil, :scope_read true, :is_admin false, :authentication-method :session, :login nil, :scope_system_admin_write false, :scope_write true, :firstname Amelia, :scope_admin_write false, :user_session_created_at #time/instant "2023-12-16T14:13:53.891048Z", :id #uuid "2b0d9cfb-9b5f-46ab-84ee-7ec671eb4659", :user_session_id #uuid "ff79cdb8-ec78-45cc-8bfa-4829c13dfa5f", :scope_system_admin_read false, :access-rights (), :user_id #uuid "2b0d9cfb-9b5f-46ab-84ee-7ec671eb4659", :is_system_admin false, :external_sign_out_url nil, :language_locale nil, :inventory_pool_roles_count 0, :scope_admin_read false}

>> authorize >

>> authorize::handler > #object[leihs.core.locale$wrap$fn__45448 0x2031e135 leihs.core.locale$wrap$fn__45448@2031e135]

>> authorize::request > {:authenticated-entity {:email sachiko@hartmann.info, :contracts_count 0, :lastname Gorczany, :org_id nil, :scope_read true, :is_admin false, :authentication-method :session, :login nil, :scope_system_admin_write false, :scope_write true, :firstname Amelia, :scope_admin_write false, :user_session_created_at #time/instant "2023-12-16T14:13:53.891048Z", :id #uuid "2b0d9cfb-9b5f-46ab-84ee-7ec671eb4659", :user_session_id #uuid "ff79cdb8-ec78-45cc-8bfa-4829c13dfa5f", :scope_system_admin_read false, :access-rights (), :user_id #uuid "2b0d9cfb-9b5f-46ab-84ee-7ec671eb4659", :is_system_admin false, :external_sign_out_url nil, :language_locale nil, :inventory_pool_roles_count 0, :scope_admin_read false}, :cookies {leihs-anti-csrf-token {:value a1c58bca-ae64-436e-b5f2-c2361a67571c}, leihs-user-session {:value c4580c2b-c7b5-4716-a8b6-1f54b46ea15b}}, :remote-addr 127.0.0.1, :start-time 228274820737166, :params {}, :settings {:email_sending_enabled false, :sessions_max_lifetime_secs 432000, :smtp_default_from_address your.lending.desk@example.com, :public_image_caching_enabled true, :sessions_force_secure false, :deliver_received_order_notifications false, :external_base_url nil, :sessions_force_uniqueness false, :email_signature Cheers,}, :tx-next #next.jdbc.default_options.DefaultOptions{:connectable #object[com.zaxxer.hikari.pool.HikariProxyConnection 0x43b54648 HikariProxyConnection@1135953480 wrapping org.postgresql.jdbc.PgConnection@72b35f05], :options {:builder-fn #object[next.jdbc.result_set$as_unqualified_lower_maps 0x3db93dbb next.jdbc.result_set$as_unqualified_lower_maps@3db93dbb]}}, :query-params-raw {}, :route-params nil, :headers {accept application/json, accept-encoding gzip;q=1.0,deflate;q=0.6,identity;q=0.3, content-length 602, content-type application/json, cookie leihs-anti-csrf-token=a1c58bca-ae64-436e-b5f2-c2361a67571c; leihs-user-session=c4580c2b-c7b5-4716-a8b6-1f54b46ea15b, host localhost:3230, user-agent Faraday v2.7.1, x-csrf-token a1c58bca-ae64-436e-b5f2-c2361a67571c}, :async-channel #object[org.httpkit.server.AsyncChannel 0x740fe597 /127.0.0.1:3230<->/127.0.0.1:55403], :server-port 3230, :params-raw {}, :tx {:datasource #object[com.zaxxer.hikari.HikariDataSource 0x18d95122 HikariDataSource (db-pool)], :connection #object[com.zaxxer.hikari.pool.HikariProxyConnection 0x32243391 HikariProxyConnection@841233297 wrapping org.postgresql.jdbc.PgConnection@68f5f480], :level 1, :rollback #object[clojure.lang.Atom 0x5f0d19ee {:status :ready, :val false}]}, :content-length 602, :form-params {}, :websocket? false, :query-params {}, :content-type application/json, :form-params-raw {}, :character-encoding utf8, :uri /procure/graphql, :server-name localhost, :handler-key :graphql, :query-string nil, :body {:query         mutation {
          budget_periods (
            input_data: [
              { id: "4f0e8e88-d9eb-4639-a7f6-b321df70b458",
                name: "bp_1_new_name",
                inspection_start_date: "2024-06-01T00:00:00+00:00",
                end_date: "2024-12-01T00:00:00+00:00" },
              { id: null,
                name: "new_bp",
                inspection_start_date: "2025-06-01T00:00:00+00:00",
                end_date: "2025-12-01T00:00:00+00:00" }
            ]
          ) {
            name
          }
        }
, :variables {}}, :graphql-schema #CompiledSchema<>, :handler #object[leihs.procurement.graphql$handler 0x36e39341 leihs.procurement.graphql$handler@36e39341], :multipart-params {}, :scheme :http, :request-method :post, :accept {:mime :json, :charset nil, :encoding nil, :language nil}}

>> authorize::handler-key >> :graphql
>myprint>  authEnt? {:email sachiko@hartmann.info, :contracts_count 0, :lastname Gorczany, :org_id nil, :scope_read true, :is_admin false, :authentication-method :session, :login nil, :scope_system_admin_write false, :scope_write true, :firstname Amelia, :scope_admin_write false, :user_session_created_at #time/instant "2023-12-16T14:13:53.891048Z", :id #uuid "2b0d9cfb-9b5f-46ab-84ee-7ec671eb4659", :user_session_id #uuid "ff79cdb8-ec78-45cc-8bfa-4829c13dfa5f", :scope_system_admin_read false, :access-rights (), :user_id #uuid "2b0d9cfb-9b5f-46ab-84ee-7ec671eb4659", :is_system_admin false, :external_sign_out_url nil, :language_locale nil, :inventory_pool_roles_count 0, :scope_admin_read false}
>myprint>  txn #next.jdbc.default_options.DefaultOptions{:connectable #object[com.zaxxer.hikari.pool.HikariProxyConnection 0x43b54648 HikariProxyConnection@1135953480 wrapping org.postgresql.jdbc.PgConnection@72b35f05], :options {:builder-fn #object[next.jdbc.result_set$as_unqualified_lower_maps 0x3db93dbb next.jdbc.result_set$as_unqualified_lower_maps@3db93dbb]}}
2023-12-16T14:13:54.049Z NX-41294 DEBUG [leihs.procurement.permissions.user:?] - (sql-format (sql/select [[:exists (-> (sql/select [true :exists]) (sql/from :procurement_admins) (sql/where [:= :procurement_admins.user_id [:cast (:user_id auth-entity) :uuid]]))]])) => ["SELECT EXISTS (SELECT TRUE AS exists FROM procurement_admins WHERE procurement_admins.user_id = CAST(? AS UUID))" #uuid "2b0d9cfb-9b5f-46ab-84ee-7ec671eb4659"]
>o> admin? [SELECT EXISTS (SELECT TRUE AS exists FROM procurement_admins WHERE procurement_admins.user_id = CAST(? AS UUID)) #uuid "2b0d9cfb-9b5f-46ab-84ee-7ec671eb4659"]
2023-12-16T14:13:54.049Z NX-41294 DEBUG [leihs.procurement.permissions.user:38] - query => ["SELECT EXISTS (SELECT TRUE AS exists FROM procurement_admins WHERE procurement_admins.user_id = CAST(? AS UUID))" #uuid "2b0d9cfb-9b5f-46ab-84ee-7ec671eb4659"]
>o> admin? {:exists true}
2023-12-16T14:13:54.050Z NX-41294 DEBUG [leihs.procurement.permissions.user:42] - (:exists result) => true
>myprint>  admin true
>o> inspector? [SELECT EXISTS (SELECT TRUE AS exists FROM procurement_category_inspectors WHERE procurement_category_inspectors.user_id = CAST(? AS UUID)) AS result #uuid "2b0d9cfb-9b5f-46ab-84ee-7ec671eb4659"]
2023-12-16T14:13:54.050Z NX-41294 DEBUG [leihs.procurement.permissions.user:62] - query => ["SELECT EXISTS (SELECT TRUE AS exists FROM procurement_category_inspectors WHERE procurement_category_inspectors.user_id = CAST(? AS UUID)) AS result" #uuid "2b0d9cfb-9b5f-46ab-84ee-7ec671eb4659"]
>o> inspector? {:result false}
>myprint>  inspector false
>o> viewer? [SELECT EXISTS (SELECT TRUE AS exists FROM procurement_category_viewers WHERE procurement_category_viewers.user_id = CAST(? AS UUID)) AS result #uuid "2b0d9cfb-9b5f-46ab-84ee-7ec671eb4659"]
2023-12-16T14:13:54.051Z NX-41294 DEBUG [leihs.procurement.permissions.user:85] - query => ["SELECT EXISTS (SELECT TRUE AS exists FROM procurement_category_viewers WHERE procurement_category_viewers.user_id = CAST(? AS UUID)) AS result" #uuid "2b0d9cfb-9b5f-46ab-84ee-7ec671eb4659"]
>o> viewer? {:result false}
>myprint>  viewer false
>o> requester?? [SELECT EXISTS (SELECT TRUE AS exists FROM procurement_requesters_organizations WHERE procurement_requesters_organizations.user_id = CAST(? AS UUID)) #uuid "2b0d9cfb-9b5f-46ab-84ee-7ec671eb4659"]
2023-12-16T14:13:54.052Z NX-41294 DEBUG [leihs.procurement.permissions.user:169] - query => ["SELECT EXISTS (SELECT TRUE AS exists FROM procurement_requesters_organizations WHERE procurement_requesters_organizations.user_id = CAST(? AS UUID))" #uuid "2b0d9cfb-9b5f-46ab-84ee-7ec671eb4659"]
>o> requester?? {:exists false}
2023-12-16T14:13:54.053Z NX-41294 DEBUG [leihs.procurement.permissions.user:173] - (:exists result) => false
>myprint>  requester false
2023-12-16T14:13:54.053Z NX-41294 DEBUG [leihs.procurement.permissions.user:?] - (sql-format (sql/select [[:exists (-> (sql/select [true :exists]) (sql/from :procurement_admins) (sql/where [:= :procurement_admins.user_id [:cast (:user_id auth-entity) :uuid]]))]])) => ["SELECT EXISTS (SELECT TRUE AS exists FROM procurement_admins WHERE procurement_admins.user_id = CAST(? AS UUID))" #uuid "2b0d9cfb-9b5f-46ab-84ee-7ec671eb4659"]
>o> admin? [SELECT EXISTS (SELECT TRUE AS exists FROM procurement_admins WHERE procurement_admins.user_id = CAST(? AS UUID)) #uuid "2b0d9cfb-9b5f-46ab-84ee-7ec671eb4659"]
2023-12-16T14:13:54.053Z NX-41294 DEBUG [leihs.procurement.permissions.user:38] - query => ["SELECT EXISTS (SELECT TRUE AS exists FROM procurement_admins WHERE procurement_admins.user_id = CAST(? AS UUID))" #uuid "2b0d9cfb-9b5f-46ab-84ee-7ec671eb4659"]
>o> admin? {:exists true}
2023-12-16T14:13:54.054Z NX-41294 DEBUG [leihs.procurement.permissions.user:42] - (:exists result) => true
>o> inspector? [SELECT EXISTS (SELECT TRUE AS exists FROM procurement_category_inspectors WHERE procurement_category_inspectors.user_id = CAST(? AS UUID)) AS result #uuid "2b0d9cfb-9b5f-46ab-84ee-7ec671eb4659"]
2023-12-16T14:13:54.054Z NX-41294 DEBUG [leihs.procurement.permissions.user:62] - query => ["SELECT EXISTS (SELECT TRUE AS exists FROM procurement_category_inspectors WHERE procurement_category_inspectors.user_id = CAST(? AS UUID)) AS result" #uuid "2b0d9cfb-9b5f-46ab-84ee-7ec671eb4659"]
>o> inspector? {:result false}
>o> viewer? [SELECT EXISTS (SELECT TRUE AS exists FROM procurement_category_viewers WHERE procurement_category_viewers.user_id = CAST(? AS UUID)) AS result #uuid "2b0d9cfb-9b5f-46ab-84ee-7ec671eb4659"]
2023-12-16T14:13:54.054Z NX-41294 DEBUG [leihs.procurement.permissions.user:85] - query => ["SELECT EXISTS (SELECT TRUE AS exists FROM procurement_category_viewers WHERE procurement_category_viewers.user_id = CAST(? AS UUID)) AS result" #uuid "2b0d9cfb-9b5f-46ab-84ee-7ec671eb4659"]
>o> viewer? {:result false}
>o> requester?? [SELECT EXISTS (SELECT TRUE AS exists FROM procurement_requesters_organizations WHERE procurement_requesters_organizations.user_id = CAST(? AS UUID)) #uuid "2b0d9cfb-9b5f-46ab-84ee-7ec671eb4659"]
2023-12-16T14:13:54.055Z NX-41294 DEBUG [leihs.procurement.permissions.user:169] - query => ["SELECT EXISTS (SELECT TRUE AS exists FROM procurement_requesters_organizations WHERE procurement_requesters_organizations.user_id = CAST(? AS UUID))" #uuid "2b0d9cfb-9b5f-46ab-84ee-7ec671eb4659"]
>o> requester?? {:exists false}
2023-12-16T14:13:54.055Z NX-41294 DEBUG [leihs.procurement.permissions.user:173] - (:exists result) => false
pure-handler >> 1
2023-12-16T14:13:54.059Z NX-41294 DEBUG [leihs.procurement.graphql:46] - graphql query         mutation {
          budget_periods (
            input_data: [
              { id: "4f0e8e88-d9eb-4639-a7f6-b321df70b458",
                name: "bp_1_new_name",
                inspection_start_date: "2024-06-01T00:00:00+00:00",
                end_date: "2024-12-01T00:00:00+00:00" },
              { id: null,
                name: "new_bp",
                inspection_start_date: "2025-06-01T00:00:00+00:00",
                end_date: "2025-12-01T00:00:00+00:00" }
            ]
          ) {
            name
          }
        }
 with variables {}
>oo> vars from graphQL-Requst nil nil nil {}
>>1x #next.jdbc.default_options.DefaultOptions{:connectable #object[com.zaxxer.hikari.pool.HikariProxyConnection 0x43b54648 HikariProxyConnection@1135953480 wrapping org.postgresql.jdbc.PgConnection@72b35f05], :options {:builder-fn #object[next.jdbc.result_set$as_unqualified_lower_maps 0x3db93dbb next.jdbc.result_set$as_unqualified_lower_maps@3db93dbb]}}
>>2x {:email sachiko@hartmann.info, :contracts_count 0, :lastname Gorczany, :org_id nil, :scope_read true, :is_admin false, :authentication-method :session, :login nil, :scope_system_admin_write false, :scope_write true, :firstname Amelia, :scope_admin_write false, :user_session_created_at #time/instant "2023-12-16T14:13:53.891048Z", :id #uuid "2b0d9cfb-9b5f-46ab-84ee-7ec671eb4659", :user_session_id #uuid "ff79cdb8-ec78-45cc-8bfa-4829c13dfa5f", :scope_system_admin_read false, :access-rights (), :user_id #uuid "2b0d9cfb-9b5f-46ab-84ee-7ec671eb4659", :is_system_admin false, :external_sign_out_url nil, :language_locale nil, :inventory_pool_roles_count 0, :scope_admin_read false}
2023-12-16T14:13:54.068Z NX-41294 DEBUG [leihs.procurement.permissions.user:?] - (sql-format (sql/select [[:exists (-> (sql/select [true :exists]) (sql/from :procurement_admins) (sql/where [:= :procurement_admins.user_id [:cast (:user_id auth-entity) :uuid]]))]])) => ["SELECT EXISTS (SELECT TRUE AS exists FROM procurement_admins WHERE procurement_admins.user_id = CAST(? AS UUID))" #uuid "2b0d9cfb-9b5f-46ab-84ee-7ec671eb4659"]
>o> admin? [SELECT EXISTS (SELECT TRUE AS exists FROM procurement_admins WHERE procurement_admins.user_id = CAST(? AS UUID)) #uuid "2b0d9cfb-9b5f-46ab-84ee-7ec671eb4659"]
2023-12-16T14:13:54.068Z NX-41294 DEBUG [leihs.procurement.permissions.user:38] - query => ["SELECT EXISTS (SELECT TRUE AS exists FROM procurement_admins WHERE procurement_admins.user_id = CAST(? AS UUID))" #uuid "2b0d9cfb-9b5f-46ab-84ee-7ec671eb4659"]
>o> admin? {:exists true}
2023-12-16T14:13:54.069Z NX-41294 DEBUG [leihs.procurement.permissions.user:42] - (:exists result) => true
>oo> update-budget-periods!
>oo> before bp-with-dates= {:id 4f0e8e88-d9eb-4639-a7f6-b321df70b458, :name bp_1_new_name, :inspection_start_date 2024-06-01T00:00:00+00:00, :end_date 2024-12-01T00:00:00+00:00}
2023-12-16T14:13:54.071Z NX-41294 DEBUG [leihs.procurement.resources.budget-periods:116] - (-> bp (update :inspection_start_date set-date) (update :end_date set-date)) => {:id "4f0e8e88-d9eb-4639-a7f6-b321df70b458", :name "bp_1_new_name", :inspection_start_date "2024-06-01T00:00:00+00:00", :end_date "2024-12-01T00:00:00+00:00"}
>oo> after bp-with-dates= {:id 4f0e8e88-d9eb-4639-a7f6-b321df70b458, :name bp_1_new_name, :inspection_start_date 2024-06-01T00:00:00+00:00, :end_date 2024-12-01T00:00:00+00:00}
2023-12-16T14:13:54.071Z NX-41294 DEBUG [leihs.procurement.resources.budget-periods:124] - (:id bp-with-dates) => 4f0e8e88-d9eb-4639-a7f6-b321df70b458
2023-12-16T14:13:54.072Z NX-41294 DEBUG [leihs.procurement.resources.budget-periods:125] - bp-with-dates => {:id "4f0e8e88-d9eb-4639-a7f6-b321df70b458", :name "bp_1_new_name", :inspection_start_date "2024-06-01T00:00:00+00:00", :end_date "2024-12-01T00:00:00+00:00"}
>o> utils.helpers / my-cast  {:id 4f0e8e88-d9eb-4639-a7f6-b321df70b458, :name bp_1_new_name, :inspection_start_date 2024-06-01T00:00:00+00:00, :end_date 2024-12-01T00:00:00+00:00}
2023-12-16T14:13:54.072Z NX-41294 DEBUG [leihs.procurement.utils.helpers:159] - data => {:id [[:cast "4f0e8e88-d9eb-4639-a7f6-b321df70b458" :uuid]], :name "bp_1_new_name", :inspection_start_date [[:cast "2024-06-01T00:00:00+00:00" :timestamp]], :end_date [[:cast "2024-12-01T00:00:00+00:00" :timestamp]]}
2023-12-16T14:13:54.075Z NX-41294 DEBUG [leihs.procurement.resources.budget-period:?] - (sql-format (sql/where (sql/set (sql/update :procurement_budget_periods) bp) [:= :procurement_budget_periods.id (:id bp)])) => ["UPDATE procurement_budget_periods SET id = (CAST(? AS UUID)), name = ?, inspection_start_date = (CAST(? AS TIMESTAMP)), end_date = (CAST(? AS TIMESTAMP)) WHERE procurement_budget_periods.id = (CAST(? AS UUID))" "4f0e8e88-d9eb-4639-a7f6-b321df70b458" "bp_1_new_name" "2024-06-01T00:00:00+00:00" "2024-12-01T00:00:00+00:00" "4f0e8e88-d9eb-4639-a7f6-b321df70b458"]
2023-12-16T14:13:54.122Z NX-41294 DEBUG [leihs.procurement.resources.budget-period:284] - result => {:next.jdbc/update-count 1}
2023-12-16T14:13:54.123Z NX-41294 DEBUG [leihs.procurement.resources.budget-period:284] - (:next.jdbc/update-count (spy result)) => 1
2023-12-16T14:13:54.123Z NX-41294 DEBUG [leihs.procurement.resources.budget-periods:125] - (budget-period/update-budget-period! tx (spy bp-with-dates)) => 1
>oo> superorsch args= {:input_data [{:id 4f0e8e88-d9eb-4639-a7f6-b321df70b458, :name bp_1_new_name, :inspection_start_date 2024-06-01T00:00:00+00:00, :end_date 2024-12-01T00:00:00+00:00} {:id nil, :name new_bp, :inspection_start_date 2025-06-01T00:00:00+00:00, :end_date 2025-12-01T00:00:00+00:00}]}
>oo> superorsch value= nil
2023-12-16T14:13:54.123Z NX-41294 DEBUG [leihs.procurement.resources.budget-periods:131] - (:id bp-with-dates) => 4f0e8e88-d9eb-4639-a7f6-b321df70b458
>oo> before bp-with-dates= {:id nil, :name new_bp, :inspection_start_date 2025-06-01T00:00:00+00:00, :end_date 2025-12-01T00:00:00+00:00}
2023-12-16T14:13:54.123Z NX-41294 DEBUG [leihs.procurement.resources.budget-periods:116] - (-> bp (update :inspection_start_date set-date) (update :end_date set-date)) => {:id nil, :name "new_bp", :inspection_start_date "2025-06-01T00:00:00+00:00", :end_date "2025-12-01T00:00:00+00:00"}
>oo> after bp-with-dates= {:id nil, :name new_bp, :inspection_start_date 2025-06-01T00:00:00+00:00, :end_date 2025-12-01T00:00:00+00:00}
2023-12-16T14:13:54.124Z NX-41294 DEBUG [leihs.procurement.resources.budget-periods:124] - (:id bp-with-dates) => nil
>o> utils.helpers / my-cast  {:name new_bp, :inspection_start_date 2025-06-01T00:00:00+00:00, :end_date 2025-12-01T00:00:00+00:00}
2023-12-16T14:13:54.124Z NX-41294 DEBUG [leihs.procurement.utils.helpers:159] - data => {:name "new_bp", :inspection_start_date [[:cast "2025-06-01T00:00:00+00:00" :timestamp]], :end_date [[:cast "2025-12-01T00:00:00+00:00" :timestamp]]}
2023-12-16T14:13:54.127Z NX-41294 DEBUG [leihs.procurement.resources.budget-period:?] - (sql-format (sql/values (sql/insert-into :procurement_budget_periods) [bp])) => ["INSERT INTO procurement_budget_periods (name, inspection_start_date, end_date) VALUES (?, (CAST(? AS TIMESTAMP)), (CAST(? AS TIMESTAMP)))" "new_bp" "2025-06-01T00:00:00+00:00" "2025-12-01T00:00:00+00:00"]
2023-12-16T14:13:54.129Z NX-41294 DEBUG [leihs.procurement.resources.budget-period:306] - (:update-count result) => nil
2023-12-16T14:13:54.129Z NX-41294 DEBUG [leihs.procurement.resources.budget-periods:126] - (budget-period/insert-budget-period! tx (dissoc bp-with-dates :id)) => nil
>oo> superorsch args= {:input_data [{:id 4f0e8e88-d9eb-4639-a7f6-b321df70b458, :name bp_1_new_name, :inspection_start_date 2024-06-01T00:00:00+00:00, :end_date 2024-12-01T00:00:00+00:00} {:id nil, :name new_bp, :inspection_start_date 2025-06-01T00:00:00+00:00, :end_date 2025-12-01T00:00:00+00:00}]}
>oo> superorsch value= nil
2023-12-16T14:13:54.129Z NX-41294 DEBUG [leihs.procurement.resources.budget-periods:131] - (:id bp-with-dates) => nil
>o> budget-periond 1
>o> utils.helpers / my-cast  {:name new_bp, :inspection_start_date 2025-06-01T00:00:00+00:00, :end_date 2025-12-01T00:00:00+00:00}
2023-12-16T14:13:54.130Z NX-41294 DEBUG [leihs.procurement.utils.helpers:159] - data => {:name "new_bp", :inspection_start_date [[:cast "2025-06-01T00:00:00+00:00" :timestamp]], :end_date [[:cast "2025-12-01T00:00:00+00:00" :timestamp]]}
2023-12-16T14:13:54.130Z NX-41294 DEBUG [leihs.procurement.resources.budget-period:86] - (my-cast bp-map) => {:name "new_bp", :inspection_start_date [[:cast "2025-06-01T00:00:00+00:00" :timestamp]], :end_date [[:cast "2025-12-01T00:00:00+00:00" :timestamp]]}
2023-12-16T14:13:54.132Z NX-41294 DEBUG [leihs.procurement.resources.budget-period:?] - (sql-format (sql/where budget-period-base-query where-clause)) => ["SELECT procurement_budget_periods.* FROM procurement_budget_periods WHERE (procurement_budget_periods.name = ?) AND (procurement_budget_periods.inspection_start_date IN (CAST(? AS TIMESTAMP))) AND (procurement_budget_periods.end_date IN (CAST(? AS TIMESTAMP)))" "new_bp" "2025-06-01T00:00:00+00:00" "2025-12-01T00:00:00+00:00"]
2023-12-16T14:13:54.133Z NX-41294 DEBUG [leihs.procurement.resources.budget-period:87] - (jdbc/execute! tx (-> budget-period-base-query (sql/where where-clause) sql-format spy)) => [{:id #uuid "9c2186a0-c3ab-4053-a2eb-bc8ff99ea0e1", :name "new_bp", :inspection_start_date #inst "2025-05-31T22:00:00.000000000-00:00", :end_date #inst "2025-11-30T23:00:00.000000000-00:00", :created_at #inst "2023-12-16T14:13:54.027881000-00:00", :updated_at #inst "2023-12-16T14:13:54.027881000-00:00"}]
>o> query= [{:id #uuid "9c2186a0-c3ab-4053-a2eb-bc8ff99ea0e1", :name new_bp, :inspection_start_date #inst "2025-05-31T22:00:00.000000000-00:00", :end_date #inst "2025-11-30T23:00:00.000000000-00:00", :created_at #inst "2023-12-16T14:13:54.027881000-00:00", :updated_at #inst "2023-12-16T14:13:54.027881000-00:00"}]
>o> result= {:id #uuid "9c2186a0-c3ab-4053-a2eb-bc8ff99ea0e1", :name new_bp, :inspection_start_date #inst "2025-05-31T22:00:00.000000000-00:00", :end_date #inst "2025-11-30T23:00:00.000000000-00:00", :created_at #inst "2023-12-16T14:13:54.027881000-00:00", :updated_at #inst "2023-12-16T14:13:54.027881000-00:00"}
2023-12-16T14:13:54.134Z NX-41294 DEBUG [leihs.procurement.resources.budget-periods:132] - (-> bp-with-dates (dissoc :id) (->> (budget-period/get-budget-period tx)) :id) => #uuid "9c2186a0-c3ab-4053-a2eb-bc8ff99ea0e1"
>o> tocheck delete-budget-periods-not-in! ??? [4f0e8e88-d9eb-4639-a7f6-b321df70b458 #uuid "9c2186a0-c3ab-4053-a2eb-bc8ff99ea0e1"]
>o> uuids-sql clojure.lang.PersistentVector
>o> uuids-sql ([:cast 4f0e8e88-d9eb-4639-a7f6-b321df70b458 :uuid] [:cast #uuid "9c2186a0-c3ab-4053-a2eb-bc8ff99ea0e1" :uuid])
2023-12-16T14:13:54.135Z NX-41294 DEBUG [leihs.procurement.utils.helpers:78] - uuids-sql => ([:cast "4f0e8e88-d9eb-4639-a7f6-b321df70b458" :uuid] [:cast #uuid "9c2186a0-c3ab-4053-a2eb-bc8ff99ea0e1" :uuid])
2023-12-16T14:13:54.136Z NX-41294 DEBUG [leihs.procurement.resources.budget-periods:?] - (sql-format (sql/where (sql/delete-from :procurement_budget_periods :pbp) [:not-in :pbp.id (cast-uuids ids)])) => ["DELETE FROM procurement_budget_periods AS pbp WHERE pbp.id NOT IN (CAST(? AS UUID), CAST(? AS UUID))" "4f0e8e88-d9eb-4639-a7f6-b321df70b458" #uuid "9c2186a0-c3ab-4053-a2eb-bc8ff99ea0e1"]
2023-12-16T14:13:54.151Z NX-41294 DEBUG [leihs.procurement.resources.budget-periods:88] - (-> (jdbc/execute! tx (-> (sql/delete-from :procurement_budget_periods :pbp) (sql/where [:not-in :pbp.id (cast-uuids ids)]) sql-format spy)) :update-count) => nil
2023-12-16T14:13:54.151Z NX-41294 DEBUG [leihs.procurement.resources.budget-periods:141] - (delete-budget-periods-not-in! tx bp-ids) => nil
>>> ??? delete _> get-budget-periods {:input_data [{:id 4f0e8e88-d9eb-4639-a7f6-b321df70b458, :name bp_1_new_name, :inspection_start_date 2024-06-01T00:00:00+00:00, :end_date 2024-12-01T00:00:00+00:00} {:id nil, :name new_bp, :inspection_start_date 2025-06-01T00:00:00+00:00, :end_date 2025-12-01T00:00:00+00:00}]} nil
>oo> Causes issues2 >> {:input_data [{:id 4f0e8e88-d9eb-4639-a7f6-b321df70b458, :name bp_1_new_name, :inspection_start_date 2024-06-01T00:00:00+00:00, :end_date 2024-12-01T00:00:00+00:00} {:id nil, :name new_bp, :inspection_start_date 2025-06-01T00:00:00+00:00, :end_date 2025-12-01T00:00:00+00:00}]}
2023-12-16T14:13:54.152Z NX-41294 DEBUG [leihs.procurement.resources.budget-periods:63] - (= (:id args) []) => false
2023-12-16T14:13:54.153Z NX-41294 DEBUG [leihs.procurement.resources.budget-periods:67] - args => {:input_data [{:id "4f0e8e88-d9eb-4639-a7f6-b321df70b458", :name "bp_1_new_name", :inspection_start_date "2024-06-01T00:00:00+00:00", :end_date "2024-12-01T00:00:00+00:00"} {:id nil, :name "new_bp", :inspection_start_date "2025-06-01T00:00:00+00:00", :end_date "2025-12-01T00:00:00+00:00"}]}
2023-12-16T14:13:54.153Z NX-41294 DEBUG [leihs.procurement.resources.budget-periods:38] - (:id args) => nil
2023-12-16T14:13:54.153Z NX-41294 DEBUG [leihs.procurement.resources.budget-periods:42] - (-> args :whereRequestsCanBeMovedTo empty? not) => false
2023-12-16T14:13:54.154Z NX-41294 DEBUG [leihs.procurement.resources.budget-periods:37] - (let [ids (spy (:id args))] (cond-> budget-periods-base-query ids (sql/where [:in :procurement_budget_periods.id (cast-uuids ids)]) (spy (-> args :whereRequestsCanBeMovedTo empty? not)) (sql/where [:< :current_date :procurement_budget_periods.end_date]))) => {:select [:*], :from [:procurement_budget_periods], :order-by [[:end_date :desc]]}
2023-12-16T14:13:54.155Z NX-41294 DEBUG [leihs.procurement.resources.budget-periods:?] - (sql-format (budget-periods-query (spy args))) => ["SELECT * FROM procurement_budget_periods ORDER BY end_date DESC"]
2023-12-16T14:13:54.156Z NX-41294 DEBUG [leihs.procurement.resources.budget-periods:65] - (jdbc/execute! (-> context :request :tx-next) (-> (spy args) budget-periods-query sql-format spy)) => [{:id #uuid "9c2186a0-c3ab-4053-a2eb-bc8ff99ea0e1", :name "new_bp", :inspection_start_date #inst "2025-05-31T22:00:00.000000000-00:00", :end_date #inst "2025-11-30T23:00:00.000000000-00:00", :created_at #inst "2023-12-16T14:13:54.027881000-00:00", :updated_at #inst "2023-12-16T14:13:54.027881000-00:00"} {:id #uuid "4f0e8e88-d9eb-4639-a7f6-b321df70b458", :name "bp_1_new_name", :inspection_start_date #inst "2024-05-31T22:00:00.000000000-00:00", :end_date #inst "2024-11-30T23:00:00.000000000-00:00", :created_at #inst "2023-12-16T14:13:51.402924000-00:00", :updated_at #inst "2023-12-16T14:13:51.402924000-00:00"}]
2023-12-16T14:13:54.157Z NX-41294 DEBUG [leihs.procurement.resources.budget-periods:143] - (get-budget-periods context args value) => [{:id #uuid "9c2186a0-c3ab-4053-a2eb-bc8ff99ea0e1", :name "new_bp", :inspection_start_date #inst "2025-05-31T22:00:00.000000000-00:00", :end_date #inst "2025-11-30T23:00:00.000000000-00:00", :created_at #inst "2023-12-16T14:13:54.027881000-00:00", :updated_at #inst "2023-12-16T14:13:54.027881000-00:00"} {:id #uuid "4f0e8e88-d9eb-4639-a7f6-b321df70b458", :name "bp_1_new_name", :inspection_start_date #inst "2024-05-31T22:00:00.000000000-00:00", :end_date #inst "2024-11-30T23:00:00.000000000-00:00", :created_at #inst "2023-12-16T14:13:51.402924000-00:00", :updated_at #inst "2023-12-16T14:13:51.402924000-00:00"}]
2023-12-16T14:13:54.157Z NX-41294 DEBUG [leihs.procurement.resources.budget-periods:141] - (do (spy (delete-budget-periods-not-in! tx bp-ids)) (println ">>> ??? delete _> get-budget-periods" args value) (spy (get-budget-periods context args value))) => [{:id #uuid "9c2186a0-c3ab-4053-a2eb-bc8ff99ea0e1", :name "new_bp", :inspection_start_date #inst "2025-05-31T22:00:00.000000000-00:00", :end_date #inst "2025-11-30T23:00:00.000000000-00:00", :created_at #inst "2023-12-16T14:13:54.027881000-00:00", :updated_at #inst "2023-12-16T14:13:54.027881000-00:00"} {:id #uuid "4f0e8e88-d9eb-4639-a7f6-b321df70b458", :name "bp_1_new_name", :inspection_start_date #inst "2024-05-31T22:00:00.000000000-00:00", :end_date #inst "2024-11-30T23:00:00.000000000-00:00", :created_at #inst "2023-12-16T14:13:51.402924000-00:00", :updated_at #inst "2023-12-16T14:13:51.402924000-00:00"}]
2023-12-16T14:13:54.157Z NX-41294 DEBUG [leihs.procurement.resources.budget-periods:110] - (loop [[bp & rest-bps] bps bp-ids []] (if bp (let [p (println ">oo> before bp-with-dates=" bp) bp-with-dates (spy (-> bp (update :inspection_start_date set-date) (update :end_date set-date))) p (println ">oo> after bp-with-dates=" bp-with-dates)] (do (if (spy (:id bp-with-dates)) (spy (budget-period/update-budget-period! tx (spy bp-with-dates))) (spy (budget-period/insert-budget-period! tx (dissoc bp-with-dates :id)))) (let [p (println ">oo> superorsch args=" args) p (println ">oo> superorsch value=" value) bp-id (or (spy (:id bp-with-dates)) (spy (-> bp-with-dates (dissoc :id) (->> (budget-period/get-budget-period tx)) :id)))] (recur rest-bps (conj bp-ids bp-id))))) (spy (do (spy (delete-budget-periods-not-in! tx bp-ids)) (println ">>> ??? delete _> get-budget-periods" args value) (spy (get-budget-periods context args value)))))) => [{:id #uuid "9c2186a0-c3ab-4053-a2eb-bc8ff99ea0e1", :name "new_bp", :inspection_start_date #inst "2025-05-31T22:00:00.000000000-00:00", :end_date #inst "2025-11-30T23:00:00.000000000-00:00", :created_at #inst "2023-12-16T14:13:54.027881000-00:00", :updated_at #inst "2023-12-16T14:13:54.027881000-00:00"} {:id #uuid "4f0e8e88-d9eb-4639-a7f6-b321df70b458", :name "bp_1_new_name", :inspection_start_date #inst "2024-05-31T22:00:00.000000000-00:00", :end_date #inst "2024-11-30T23:00:00.000000000-00:00", :created_at #inst "2023-12-16T14:13:51.402924000-00:00", :updated_at #inst "2023-12-16T14:13:51.402924000-00:00"}]
2023-12-16T14:13:54.158Z NX-41294 DEBUG [leihs.procurement.resources.budget-periods:106] - (let [tx (-> context :request :tx-next) bps (:input_data args)] (spy (loop [[bp & rest-bps] bps bp-ids []] (if bp (let [p (println ">oo> before bp-with-dates=" bp) bp-with-dates (spy (-> bp (update :inspection_start_date set-date) (update :end_date set-date))) p (println ">oo> after bp-with-dates=" bp-with-dates)] (do (if (spy (:id bp-with-dates)) (spy (budget-period/update-budget-period! tx (spy bp-with-dates))) (spy (budget-period/insert-budget-period! tx (dissoc bp-with-dates :id)))) (let [p (println ">oo> superorsch args=" args) p (println ">oo> superorsch value=" value) bp-id (or (spy (:id bp-with-dates)) (spy (-> bp-with-dates (dissoc :id) (->> (budget-period/get-budget-period tx)) :id)))] (recur rest-bps (conj bp-ids bp-id))))) (spy (do (spy (delete-budget-periods-not-in! tx bp-ids)) (println ">>> ??? delete _> get-budget-periods" args value) (spy (get-budget-periods context args value)))))))) => [{:id #uuid "9c2186a0-c3ab-4053-a2eb-bc8ff99ea0e1", :name "new_bp", :inspection_start_date #inst "2025-05-31T22:00:00.000000000-00:00", :end_date #inst "2025-11-30T23:00:00.000000000-00:00", :created_at #inst "2023-12-16T14:13:54.027881000-00:00", :updated_at #inst "2023-12-16T14:13:54.027881000-00:00"} {:id #uuid "4f0e8e88-d9eb-4639-a7f6-b321df70b458", :name "bp_1_new_name", :inspection_start_date #inst "2024-05-31T22:00:00.000000000-00:00", :end_date #inst "2024-11-30T23:00:00.000000000-00:00", :created_at #inst "2023-12-16T14:13:51.402924000-00:00", :updated_at #inst "2023-12-16T14:13:51.402924000-00:00"}]

>request-grapql _> request {:leihs-user-language {:name English (UK), :locale en-GB, :default true, :active true}, :authenticated-entity {:email sachiko@hartmann.info, :contracts_count 0, :lastname Gorczany, :org_id nil, :scope_read true, :is_admin false, :authentication-method :session, :login nil, :scope_system_admin_write false, :scope_write true, :firstname Amelia, :scope_admin_write false, :user_session_created_at #time/instant "2023-12-16T14:13:53.891048Z", :id #uuid "2b0d9cfb-9b5f-46ab-84ee-7ec671eb4659", :user_session_id #uuid "ff79cdb8-ec78-45cc-8bfa-4829c13dfa5f", :scope_system_admin_read false, :access-rights (), :user_id #uuid "2b0d9cfb-9b5f-46ab-84ee-7ec671eb4659", :is_system_admin false, :external_sign_out_url nil, :language_locale nil, :inventory_pool_roles_count 0, :scope_admin_read false}, :cookies {leihs-anti-csrf-token {:value a1c58bca-ae64-436e-b5f2-c2361a67571c}, leihs-user-session {:value c4580c2b-c7b5-4716-a8b6-1f54b46ea15b}}, :remote-addr 127.0.0.1, :start-time 228274820737166, :params {}, :settings {:email_sending_enabled false, :sessions_max_lifetime_secs 432000, :smtp_default_from_address your.lending.desk@example.com, :public_image_caching_enabled true, :sessions_force_secure false, :deliver_received_order_notifications false, :external_base_url nil, :sessions_force_uniqueness false, :email_signature Cheers,}, :tx-next #next.jdbc.default_options.DefaultOptions{:connectable #object[com.zaxxer.hikari.pool.HikariProxyConnection 0x43b54648 HikariProxyConnection@1135953480 wrapping org.postgresql.jdbc.PgConnection@72b35f05], :options {:builder-fn #object[next.jdbc.result_set$as_unqualified_lower_maps 0x3db93dbb next.jdbc.result_set$as_unqualified_lower_maps@3db93dbb]}}, :query-params-raw {}, :route-params nil, :headers {accept application/json, accept-encoding gzip;q=1.0,deflate;q=0.6,identity;q=0.3, content-length 602, content-type application/json, cookie leihs-anti-csrf-token=a1c58bca-ae64-436e-b5f2-c2361a67571c; leihs-user-session=c4580c2b-c7b5-4716-a8b6-1f54b46ea15b, host localhost:3230, user-agent Faraday v2.7.1, x-csrf-token a1c58bca-ae64-436e-b5f2-c2361a67571c}, :async-channel #object[org.httpkit.server.AsyncChannel 0x740fe597 /127.0.0.1:3230<->/127.0.0.1:55403], :server-port 3230, :params-raw {}, :tx {:datasource #object[com.zaxxer.hikari.HikariDataSource 0x18d95122 HikariDataSource (db-pool)], :connection #object[com.zaxxer.hikari.pool.HikariProxyConnection 0x32243391 HikariProxyConnection@841233297 wrapping org.postgresql.jdbc.PgConnection@68f5f480], :level 2, :rollback #object[clojure.lang.Atom 0x5f0d19ee {:status :ready, :val false}]}, :content-length 602, :form-params {}, :websocket? false, :query-params {}, :content-type application/json, :form-params-raw {}, :character-encoding utf8, :uri /procure/graphql, :server-name localhost, :handler-key :graphql, :query-string nil, :body {:query         mutation {
          budget_periods (
            input_data: [
              { id: "4f0e8e88-d9eb-4639-a7f6-b321df70b458",
                name: "bp_1_new_name",
                inspection_start_date: "2024-06-01T00:00:00+00:00",
                end_date: "2024-12-01T00:00:00+00:00" },
              { id: null,
                name: "new_bp",
                inspection_start_date: "2025-06-01T00:00:00+00:00",
                end_date: "2025-12-01T00:00:00+00:00" }
            ]
          ) {
            name
          }
        }
, :variables {}}, :graphql-schema #CompiledSchema<>, :handler #object[leihs.procurement.graphql$handler 0x36e39341 leihs.procurement.graphql$handler@36e39341], :multipart-params {}, :scheme :http, :request-method :post, :accept {:mime :json, :charset nil, :encoding nil, :language nil}}

>request-c-grapql _> request (json) {"leihs-user-language":{"name":"English (UK)","locale":"en-GB","default":true,"active":true},"authenticated-entity":{"email":"sachiko@hartmann.info","contracts_count":0,"lastname":"Gorczany","org_id":null,"scope_read":true,"is_admin":false,"authentication-method":"session","login":null,"scope_system_admin_write":false,"scope_write":true,"firstname":"Amelia","scope_admin_write":false,"user_session_created_at":"2023-12-16T14:13:53.891048Z","id":"2b0d9cfb-9b5f-46ab-84ee-7ec671eb4659","user_session_id":"ff79cdb8-ec78-45cc-8bfa-4829c13dfa5f","scope_system_admin_read":false,"access-rights":[],"user_id":"2b0d9cfb-9b5f-46ab-84ee-7ec671eb4659","is_system_admin":false,"external_sign_out_url":null,"language_locale":null,"inventory_pool_roles_count":0,"scope_admin_read":false},"cookies":{"leihs-anti-csrf-token":{"value":"a1c58bca-ae64-436e-b5f2-c2361a67571c"},"leihs-user-session":{"value":"c4580c2b-c7b5-4716-a8b6-1f54b46ea15b"}},"remote-addr":"127.0.0.1","start-time":228274820737166,"params":{},"settings":{"email_sending_enabled":false,"sessions_max_lifetime_secs":432000,"smtp_default_from_address":"your.lending.desk@example.com","public_image_caching_enabled":true,"sessions_force_secure":false,"deliver_received_order_notifications":false,"external_base_url":null,"sessions_force_uniqueness":false,"email_signature":"Cheers,"},"query-params-raw":{},"route-params":null,"headers":{"accept":"application\/json","accept-encoding":"gzip;q=1.0,deflate;q=0.6,identity;q=0.3","content-length":"602","content-type":"application\/json","cookie":"leihs-anti-csrf-token=a1c58bca-ae64-436e-b5f2-c2361a67571c; leihs-user-session=c4580c2b-c7b5-4716-a8b6-1f54b46ea15b","host":"localhost:3230","user-agent":"Faraday v2.7.1","x-csrf-token":"a1c58bca-ae64-436e-b5f2-c2361a67571c"},"server-port":3230,"params-raw":{},"content-length":602,"form-params":{},"websocket?":false,"query-params":{},"content-type":"application\/json","form-params-raw":{},"character-encoding":"utf8","uri":"\/procure\/graphql","server-name":"localhost","handler-key":"graphql","query-string":null,"body":{"query":"        mutation {\n          budget_periods (\n            input_data: [\n              { id: \"4f0e8e88-d9eb-4639-a7f6-b321df70b458\",\n                name: \"bp_1_new_name\",\n                inspection_start_date: \"2024-06-01T00:00:00+00:00\",\n                end_date: \"2024-12-01T00:00:00+00:00\" },\n              { id: null,\n                name: \"new_bp\",\n                inspection_start_date: \"2025-06-01T00:00:00+00:00\",\n                end_date: \"2025-12-01T00:00:00+00:00\" }\n            ]\n          ) {\n            name\n          }\n        }\n","variables":{}},"multipart-params":{},"scheme":"http","request-method":"post","accept":{"mime":"json","charset":null,"encoding":null,"language":null}}

>request-grapql _> result => {:data #ordered/map ([:budget_periods [#ordered/map ([:name new_bp]) #ordered/map ([:name bp_1_new_name])]])}
2023-12-16T14:13:54.167Z NX-41294 DEBUG [leihs.procurement.graphql:86] - result => {:data #ordered/map ([:budget_periods [#ordered/map ([:name "new_bp"]) #ordered/map ([:name "bp_1_new_name"])]])}
>>> authenticate::skip= true  handler-key= :sign-in
>>> authenticate::authenticated-entity nil

>> authorize >

>> authorize::handler > #object[leihs.core.locale$wrap$fn__45448 0x2031e135 leihs.core.locale$wrap$fn__45448@2031e135]

>> authorize::request > {:cookies {}, :remote-addr 127.0.0.1, :start-time 228378664489250, :params {}, :settings {:email_sending_enabled false, :sessions_max_lifetime_secs 432000, :smtp_default_from_address your.lending.desk@example.com, :public_image_caching_enabled true, :sessions_force_secure false, :deliver_received_order_notifications false, :external_base_url nil, :sessions_force_uniqueness false, :email_signature Cheers,}, :tx-next #next.jdbc.default_options.DefaultOptions{:connectable #object[com.zaxxer.hikari.HikariDataSource 0x5bbb0d7f HikariDataSource (HikariPool-1)], :options {:builder-fn #object[next.jdbc.result_set$as_unqualified_lower_maps 0x3db93dbb next.jdbc.result_set$as_unqualified_lower_maps@3db93dbb]}}, :query-params-raw {}, :route-params nil, :headers {accept */*, accept-encoding gzip;q=1.0,deflate;q=0.6,identity;q=0.3, host localhost:3230, user-agent Faraday v2.7.1}, :async-channel #object[org.httpkit.server.AsyncChannel 0x2832031c /127.0.0.1:3230<->/127.0.0.1:55834], :server-port 3230, :params-raw {}, :tx {:datasource #object[com.zaxxer.hikari.HikariDataSource 0x18d95122 HikariDataSource (db-pool)]}, :content-length 0, :form-params {}, :websocket? false, :query-params {}, :content-type nil, :form-params-raw {}, :character-encoding utf8, :uri /sign-in, :server-name localhost, :handler-key :sign-in, :query-string nil, :body nil, :graphql-schema #CompiledSchema<>, :handler #object[compojure.core$routes$fn__27950 0x17459cfd compojure.core$routes$fn__27950@17459cfd], :multipart-params {}, :scheme :http, :request-method :get, :accept {:mime :html, :charset nil, :encoding nil, :language nil}}

>> authorize::handler-key >> :sign-in
>myprint>  authEnt? nil
>myprint>  txn #next.jdbc.default_options.DefaultOptions{:connectable #object[com.zaxxer.hikari.HikariDataSource 0x5bbb0d7f HikariDataSource (HikariPool-1)], :options {:builder-fn #object[next.jdbc.result_set$as_unqualified_lower_maps 0x3db93dbb next.jdbc.result_set$as_unqualified_lower_maps@3db93dbb]}}
2023-12-16T14:15:37.873Z NX-41294 DEBUG [leihs.procurement.permissions.user:?] - (sql-format (sql/select [[:exists (-> (sql/select [true :exists]) (sql/from :procurement_admins) (sql/where [:= :procurement_admins.user_id [:cast (:user_id auth-entity) :uuid]]))]])) => ["SELECT EXISTS (SELECT TRUE AS exists FROM procurement_admins WHERE procurement_admins.user_id = CAST(NULL AS UUID))"]
>o> admin? [SELECT EXISTS (SELECT TRUE AS exists FROM procurement_admins WHERE procurement_admins.user_id = CAST(NULL AS UUID))]
2023-12-16T14:15:37.876Z NX-41294 DEBUG [leihs.procurement.permissions.user:38] - query => ["SELECT EXISTS (SELECT TRUE AS exists FROM procurement_admins WHERE procurement_admins.user_id = CAST(NULL AS UUID))"]
>o> admin? {:exists false}
2023-12-16T14:15:37.885Z NX-41294 DEBUG [leihs.procurement.permissions.user:42] - (:exists result) => false
>myprint>  admin false
>o> inspector? [SELECT EXISTS (SELECT TRUE AS exists FROM procurement_category_inspectors WHERE procurement_category_inspectors.user_id = CAST(NULL AS UUID)) AS result]
2023-12-16T14:15:37.886Z NX-41294 DEBUG [leihs.procurement.permissions.user:62] - query => ["SELECT EXISTS (SELECT TRUE AS exists FROM procurement_category_inspectors WHERE procurement_category_inspectors.user_id = CAST(NULL AS UUID)) AS result"]
>o> inspector? {:result false}
>myprint>  inspector false
>o> viewer? [SELECT EXISTS (SELECT TRUE AS exists FROM procurement_category_viewers WHERE procurement_category_viewers.user_id = CAST(NULL AS UUID)) AS result]
2023-12-16T14:15:37.887Z NX-41294 DEBUG [leihs.procurement.permissions.user:85] - query => ["SELECT EXISTS (SELECT TRUE AS exists FROM procurement_category_viewers WHERE procurement_category_viewers.user_id = CAST(NULL AS UUID)) AS result"]
>o> viewer? {:result false}
>myprint>  viewer false
>o> requester?? [SELECT EXISTS (SELECT TRUE AS exists FROM procurement_requesters_organizations WHERE procurement_requesters_organizations.user_id = CAST(NULL AS UUID))]
2023-12-16T14:15:37.889Z NX-41294 DEBUG [leihs.procurement.permissions.user:169] - query => ["SELECT EXISTS (SELECT TRUE AS exists FROM procurement_requesters_organizations WHERE procurement_requesters_organizations.user_id = CAST(NULL AS UUID))"]
>o> requester?? {:exists false}
2023-12-16T14:15:37.890Z NX-41294 DEBUG [leihs.procurement.permissions.user:173] - (:exists result) => false
>myprint>  requester false
>>> authenticate::skip= true  handler-key= :sign-in
>>> authenticate::authenticated-entity nil

>> authorize >

>> authorize::handler > #object[leihs.core.locale$wrap$fn__45448 0x2031e135 leihs.core.locale$wrap$fn__45448@2031e135]

>> authorize::request > {:cookies {leihs-anti-csrf-token {:value 780fa7af-c1dd-4640-9a1c-ae818582c297}}, :remote-addr 127.0.0.1, :start-time 228378787630708, :params {:password password, :user gil.lehner@skiles-hessel.biz}, :settings {:email_sending_enabled false, :sessions_max_lifetime_secs 432000, :smtp_default_from_address your.lending.desk@example.com, :public_image_caching_enabled true, :sessions_force_secure false, :deliver_received_order_notifications false, :external_base_url nil, :sessions_force_uniqueness false, :email_signature Cheers,}, :tx-next #next.jdbc.default_options.DefaultOptions{:connectable #object[com.zaxxer.hikari.pool.HikariProxyConnection 0xcab26ff HikariProxyConnection@212543231 wrapping org.postgresql.jdbc.PgConnection@72b35f05], :options {:builder-fn #object[next.jdbc.result_set$as_unqualified_lower_maps 0x3db93dbb next.jdbc.result_set$as_unqualified_lower_maps@3db93dbb]}}, :query-params-raw {}, :route-params nil, :headers {accept */*, accept-encoding gzip;q=1.0,deflate;q=0.6,identity;q=0.3, content-length 53, content-type application/x-www-form-urlencoded, cookie leihs-anti-csrf-token=780fa7af-c1dd-4640-9a1c-ae818582c297, host localhost:3230, user-agent Faraday v2.7.1, x-csrf-token 780fa7af-c1dd-4640-9a1c-ae818582c297}, :async-channel #object[org.httpkit.server.AsyncChannel 0x72fbc850 /127.0.0.1:3230<->/127.0.0.1:55835], :server-port 3230, :params-raw {:password password, :user gil.lehner@skiles-hessel.biz}, :tx {:datasource #object[com.zaxxer.hikari.HikariDataSource 0x18d95122 HikariDataSource (db-pool)], :connection #object[com.zaxxer.hikari.pool.HikariProxyConnection 0x57f4b716 HikariProxyConnection@1475655446 wrapping org.postgresql.jdbc.PgConnection@68f5f480], :level 1, :rollback #object[clojure.lang.Atom 0x34c8e9b6 {:status :ready, :val false}]}, :content-length 53, :form-params {:password password, :user gil.lehner@skiles-hessel.biz}, :websocket? false, :query-params {}, :content-type application/x-www-form-urlencoded, :form-params-raw {:password password, :user gil.lehner@skiles-hessel.biz}, :character-encoding utf8, :uri /sign-in, :server-name localhost, :handler-key :sign-in, :query-string nil, :body #object[org.httpkit.BytesInputStream 0x6101bd0e BytesInputStream[len=53]], :graphql-schema #CompiledSchema<>, :handler #object[compojure.core$routes$fn__27950 0x17459cfd compojure.core$routes$fn__27950@17459cfd], :multipart-params {}, :scheme :http, :request-method :post, :accept {:mime :html, :charset nil, :encoding nil, :language nil}}

>> authorize::handler-key >> :sign-in
>myprint>  authEnt? nil
>myprint>  txn #next.jdbc.default_options.DefaultOptions{:connectable #object[com.zaxxer.hikari.pool.HikariProxyConnection 0xcab26ff HikariProxyConnection@212543231 wrapping org.postgresql.jdbc.PgConnection@72b35f05], :options {:builder-fn #object[next.jdbc.result_set$as_unqualified_lower_maps 0x3db93dbb next.jdbc.result_set$as_unqualified_lower_maps@3db93dbb]}}
2023-12-16T14:15:37.959Z NX-41294 DEBUG [leihs.procurement.permissions.user:?] - (sql-format (sql/select [[:exists (-> (sql/select [true :exists]) (sql/from :procurement_admins) (sql/where [:= :procurement_admins.user_id [:cast (:user_id auth-entity) :uuid]]))]])) => ["SELECT EXISTS (SELECT TRUE AS exists FROM procurement_admins WHERE procurement_admins.user_id = CAST(NULL AS UUID))"]
>o> admin? [SELECT EXISTS (SELECT TRUE AS exists FROM procurement_admins WHERE procurement_admins.user_id = CAST(NULL AS UUID))]
2023-12-16T14:15:37.959Z NX-41294 DEBUG [leihs.procurement.permissions.user:38] - query => ["SELECT EXISTS (SELECT TRUE AS exists FROM procurement_admins WHERE procurement_admins.user_id = CAST(NULL AS UUID))"]
>o> admin? {:exists false}
2023-12-16T14:15:37.960Z NX-41294 DEBUG [leihs.procurement.permissions.user:42] - (:exists result) => false
>myprint>  admin false
>o> inspector? [SELECT EXISTS (SELECT TRUE AS exists FROM procurement_category_inspectors WHERE procurement_category_inspectors.user_id = CAST(NULL AS UUID)) AS result]
2023-12-16T14:15:37.961Z NX-41294 DEBUG [leihs.procurement.permissions.user:62] - query => ["SELECT EXISTS (SELECT TRUE AS exists FROM procurement_category_inspectors WHERE procurement_category_inspectors.user_id = CAST(NULL AS UUID)) AS result"]
>o> inspector? {:result false}
>myprint>  inspector false
>o> viewer? [SELECT EXISTS (SELECT TRUE AS exists FROM procurement_category_viewers WHERE procurement_category_viewers.user_id = CAST(NULL AS UUID)) AS result]
2023-12-16T14:15:37.962Z NX-41294 DEBUG [leihs.procurement.permissions.user:85] - query => ["SELECT EXISTS (SELECT TRUE AS exists FROM procurement_category_viewers WHERE procurement_category_viewers.user_id = CAST(NULL AS UUID)) AS result"]
>o> viewer? {:result false}
>myprint>  viewer false
>o> requester?? [SELECT EXISTS (SELECT TRUE AS exists FROM procurement_requesters_organizations WHERE procurement_requesters_organizations.user_id = CAST(NULL AS UUID))]
2023-12-16T14:15:37.962Z NX-41294 DEBUG [leihs.procurement.permissions.user:169] - query => ["SELECT EXISTS (SELECT TRUE AS exists FROM procurement_requesters_organizations WHERE procurement_requesters_organizations.user_id = CAST(NULL AS UUID))"]
>o> requester?? {:exists false}
2023-12-16T14:15:37.963Z NX-41294 DEBUG [leihs.procurement.permissions.user:173] - (:exists result) => false
>myprint>  requester false
>>> authenticate::skip= nil  handler-key= :graphql
>>> authenticate::authenticated-entity {:email gil.lehner@skiles-hessel.biz, :contracts_count 0, :lastname Dare, :org_id nil, :scope_read true, :is_admin false, :authentication-method :session, :login nil, :scope_system_admin_write false, :scope_write true, :firstname Lauran, :scope_admin_write false, :user_session_created_at #time/instant "2023-12-16T14:15:37.977274Z", :id #uuid "ebbf3d54-ad68-40c3-911a-fe3667fd8d1c", :user_session_id #uuid "10481388-6f24-440a-b1a0-42c76af17de6", :scope_system_admin_read false, :access-rights (), :user_id #uuid "ebbf3d54-ad68-40c3-911a-fe3667fd8d1c", :is_system_admin false, :external_sign_out_url nil, :language_locale nil, :inventory_pool_roles_count 0, :scope_admin_read false}

>> authorize >

>> authorize::handler > #object[leihs.core.locale$wrap$fn__45448 0x2031e135 leihs.core.locale$wrap$fn__45448@2031e135]

>> authorize::request > {:authenticated-entity {:email gil.lehner@skiles-hessel.biz, :contracts_count 0, :lastname Dare, :org_id nil, :scope_read true, :is_admin false, :authentication-method :session, :login nil, :scope_system_admin_write false, :scope_write true, :firstname Lauran, :scope_admin_write false, :user_session_created_at #time/instant "2023-12-16T14:15:37.977274Z", :id #uuid "ebbf3d54-ad68-40c3-911a-fe3667fd8d1c", :user_session_id #uuid "10481388-6f24-440a-b1a0-42c76af17de6", :scope_system_admin_read false, :access-rights (), :user_id #uuid "ebbf3d54-ad68-40c3-911a-fe3667fd8d1c", :is_system_admin false, :external_sign_out_url nil, :language_locale nil, :inventory_pool_roles_count 0, :scope_admin_read false}, :cookies {leihs-anti-csrf-token {:value 780fa7af-c1dd-4640-9a1c-ae818582c297}, leihs-user-session {:value 18228db9-6917-4fc5-8416-35b84f4d52f0}}, :remote-addr 127.0.0.1, :start-time 228378842313583, :params {}, :settings {:email_sending_enabled false, :sessions_max_lifetime_secs 432000, :smtp_default_from_address your.lending.desk@example.com, :public_image_caching_enabled true, :sessions_force_secure false, :deliver_received_order_notifications false, :external_base_url nil, :sessions_force_uniqueness false, :email_signature Cheers,}, :tx-next #next.jdbc.default_options.DefaultOptions{:connectable #object[com.zaxxer.hikari.HikariDataSource 0x5bbb0d7f HikariDataSource (HikariPool-1)], :options {:builder-fn #object[next.jdbc.result_set$as_unqualified_lower_maps 0x3db93dbb next.jdbc.result_set$as_unqualified_lower_maps@3db93dbb]}}, :query-params-raw {}, :route-params nil, :headers {accept application/json, accept-encoding gzip;q=1.0,deflate;q=0.6,identity;q=0.3, content-length 231, content-type application/json, cookie leihs-anti-csrf-token=780fa7af-c1dd-4640-9a1c-ae818582c297; leihs-user-session=18228db9-6917-4fc5-8416-35b84f4d52f0, host localhost:3230, user-agent Faraday v2.7.1, x-csrf-token 780fa7af-c1dd-4640-9a1c-ae818582c297}, :async-channel #object[org.httpkit.server.AsyncChannel 0x606ed02e /127.0.0.1:3230<->/127.0.0.1:55836], :server-port 3230, :params-raw {}, :tx {:datasource #object[com.zaxxer.hikari.HikariDataSource 0x18d95122 HikariDataSource (db-pool)]}, :content-length 231, :form-params {}, :websocket? false, :query-params {}, :content-type application/json, :form-params-raw {}, :character-encoding utf8, :uri /procure/graphql, :server-name localhost, :handler-key :graphql, :query-string nil, :body {:query         query {
          budget_periods {
            id
            name
            inspection_start_date
            end_date
            total_price_cents_new_requests
          }
        }
, :variables {}}, :graphql-schema #CompiledSchema<>, :handler #object[leihs.procurement.graphql$handler 0x36e39341 leihs.procurement.graphql$handler@36e39341], :multipart-params {}, :scheme :http, :request-method :post, :accept {:mime :json, :charset nil, :encoding nil, :language nil}}

>> authorize::handler-key >> :graphql
>myprint>  authEnt? {:email gil.lehner@skiles-hessel.biz, :contracts_count 0, :lastname Dare, :org_id nil, :scope_read true, :is_admin false, :authentication-method :session, :login nil, :scope_system_admin_write false, :scope_write true, :firstname Lauran, :scope_admin_write false, :user_session_created_at #time/instant "2023-12-16T14:15:37.977274Z", :id #uuid "ebbf3d54-ad68-40c3-911a-fe3667fd8d1c", :user_session_id #uuid "10481388-6f24-440a-b1a0-42c76af17de6", :scope_system_admin_read false, :access-rights (), :user_id #uuid "ebbf3d54-ad68-40c3-911a-fe3667fd8d1c", :is_system_admin false, :external_sign_out_url nil, :language_locale nil, :inventory_pool_roles_count 0, :scope_admin_read false}
>myprint>  txn #next.jdbc.default_options.DefaultOptions{:connectable #object[com.zaxxer.hikari.HikariDataSource 0x5bbb0d7f HikariDataSource (HikariPool-1)], :options {:builder-fn #object[next.jdbc.result_set$as_unqualified_lower_maps 0x3db93dbb next.jdbc.result_set$as_unqualified_lower_maps@3db93dbb]}}
2023-12-16T14:15:38.026Z NX-41294 DEBUG [leihs.procurement.permissions.user:?] - (sql-format (sql/select [[:exists (-> (sql/select [true :exists]) (sql/from :procurement_admins) (sql/where [:= :procurement_admins.user_id [:cast (:user_id auth-entity) :uuid]]))]])) => ["SELECT EXISTS (SELECT TRUE AS exists FROM procurement_admins WHERE procurement_admins.user_id = CAST(? AS UUID))" #uuid "ebbf3d54-ad68-40c3-911a-fe3667fd8d1c"]
>o> admin? [SELECT EXISTS (SELECT TRUE AS exists FROM procurement_admins WHERE procurement_admins.user_id = CAST(? AS UUID)) #uuid "ebbf3d54-ad68-40c3-911a-fe3667fd8d1c"]
2023-12-16T14:15:38.026Z NX-41294 DEBUG [leihs.procurement.permissions.user:38] - query => ["SELECT EXISTS (SELECT TRUE AS exists FROM procurement_admins WHERE procurement_admins.user_id = CAST(? AS UUID))" #uuid "ebbf3d54-ad68-40c3-911a-fe3667fd8d1c"]
>o> admin? {:exists true}
2023-12-16T14:15:38.027Z NX-41294 DEBUG [leihs.procurement.permissions.user:42] - (:exists result) => true
>myprint>  admin true
>o> inspector? [SELECT EXISTS (SELECT TRUE AS exists FROM procurement_category_inspectors WHERE procurement_category_inspectors.user_id = CAST(? AS UUID)) AS result #uuid "ebbf3d54-ad68-40c3-911a-fe3667fd8d1c"]
2023-12-16T14:15:38.027Z NX-41294 DEBUG [leihs.procurement.permissions.user:62] - query => ["SELECT EXISTS (SELECT TRUE AS exists FROM procurement_category_inspectors WHERE procurement_category_inspectors.user_id = CAST(? AS UUID)) AS result" #uuid "ebbf3d54-ad68-40c3-911a-fe3667fd8d1c"]
>o> inspector? {:result false}
>myprint>  inspector false
>o> viewer? [SELECT EXISTS (SELECT TRUE AS exists FROM procurement_category_viewers WHERE procurement_category_viewers.user_id = CAST(? AS UUID)) AS result #uuid "ebbf3d54-ad68-40c3-911a-fe3667fd8d1c"]
2023-12-16T14:15:38.028Z NX-41294 DEBUG [leihs.procurement.permissions.user:85] - query => ["SELECT EXISTS (SELECT TRUE AS exists FROM procurement_category_viewers WHERE procurement_category_viewers.user_id = CAST(? AS UUID)) AS result" #uuid "ebbf3d54-ad68-40c3-911a-fe3667fd8d1c"]
>o> viewer? {:result false}
>myprint>  viewer false
>o> requester?? [SELECT EXISTS (SELECT TRUE AS exists FROM procurement_requesters_organizations WHERE procurement_requesters_organizations.user_id = CAST(? AS UUID)) #uuid "ebbf3d54-ad68-40c3-911a-fe3667fd8d1c"]
2023-12-16T14:15:38.028Z NX-41294 DEBUG [leihs.procurement.permissions.user:169] - query => ["SELECT EXISTS (SELECT TRUE AS exists FROM procurement_requesters_organizations WHERE procurement_requesters_organizations.user_id = CAST(? AS UUID))" #uuid "ebbf3d54-ad68-40c3-911a-fe3667fd8d1c"]
>o> requester?? {:exists false}
2023-12-16T14:15:38.029Z NX-41294 DEBUG [leihs.procurement.permissions.user:173] - (:exists result) => false
>myprint>  requester false
2023-12-16T14:15:38.029Z NX-41294 DEBUG [leihs.procurement.permissions.user:?] - (sql-format (sql/select [[:exists (-> (sql/select [true :exists]) (sql/from :procurement_admins) (sql/where [:= :procurement_admins.user_id [:cast (:user_id auth-entity) :uuid]]))]])) => ["SELECT EXISTS (SELECT TRUE AS exists FROM procurement_admins WHERE procurement_admins.user_id = CAST(? AS UUID))" #uuid "ebbf3d54-ad68-40c3-911a-fe3667fd8d1c"]
>o> admin? [SELECT EXISTS (SELECT TRUE AS exists FROM procurement_admins WHERE procurement_admins.user_id = CAST(? AS UUID)) #uuid "ebbf3d54-ad68-40c3-911a-fe3667fd8d1c"]
2023-12-16T14:15:38.029Z NX-41294 DEBUG [leihs.procurement.permissions.user:38] - query => ["SELECT EXISTS (SELECT TRUE AS exists FROM procurement_admins WHERE procurement_admins.user_id = CAST(? AS UUID))" #uuid "ebbf3d54-ad68-40c3-911a-fe3667fd8d1c"]
>o> admin? {:exists true}
2023-12-16T14:15:38.030Z NX-41294 DEBUG [leihs.procurement.permissions.user:42] - (:exists result) => true
>o> inspector? [SELECT EXISTS (SELECT TRUE AS exists FROM procurement_category_inspectors WHERE procurement_category_inspectors.user_id = CAST(? AS UUID)) AS result #uuid "ebbf3d54-ad68-40c3-911a-fe3667fd8d1c"]
2023-12-16T14:15:38.030Z NX-41294 DEBUG [leihs.procurement.permissions.user:62] - query => ["SELECT EXISTS (SELECT TRUE AS exists FROM procurement_category_inspectors WHERE procurement_category_inspectors.user_id = CAST(? AS UUID)) AS result" #uuid "ebbf3d54-ad68-40c3-911a-fe3667fd8d1c"]
>o> inspector? {:result false}
>o> viewer? [SELECT EXISTS (SELECT TRUE AS exists FROM procurement_category_viewers WHERE procurement_category_viewers.user_id = CAST(? AS UUID)) AS result #uuid "ebbf3d54-ad68-40c3-911a-fe3667fd8d1c"]
2023-12-16T14:15:38.031Z NX-41294 DEBUG [leihs.procurement.permissions.user:85] - query => ["SELECT EXISTS (SELECT TRUE AS exists FROM procurement_category_viewers WHERE procurement_category_viewers.user_id = CAST(? AS UUID)) AS result" #uuid "ebbf3d54-ad68-40c3-911a-fe3667fd8d1c"]
>o> viewer? {:result false}
>o> requester?? [SELECT EXISTS (SELECT TRUE AS exists FROM procurement_requesters_organizations WHERE procurement_requesters_organizations.user_id = CAST(? AS UUID)) #uuid "ebbf3d54-ad68-40c3-911a-fe3667fd8d1c"]
2023-12-16T14:15:38.031Z NX-41294 DEBUG [leihs.procurement.permissions.user:169] - query => ["SELECT EXISTS (SELECT TRUE AS exists FROM procurement_requesters_organizations WHERE procurement_requesters_organizations.user_id = CAST(? AS UUID))" #uuid "ebbf3d54-ad68-40c3-911a-fe3667fd8d1c"]
>o> requester?? {:exists false}
2023-12-16T14:15:38.032Z NX-41294 DEBUG [leihs.procurement.permissions.user:173] - (:exists result) => false
pure-handler >> 2
2023-12-16T14:15:38.033Z NX-41294 DEBUG [leihs.procurement.graphql:46] - graphql query         query {
          budget_periods {
            id
            name
            inspection_start_date
            end_date
            total_price_cents_new_requests
          }
        }
 with variables {}
>oo> vars from graphQL-Requst nil nil nil {}
>oo> Causes issues2 >> nil
2023-12-16T14:15:38.035Z NX-41294 DEBUG [leihs.procurement.resources.budget-periods:63] - (= (:id args) []) => false
2023-12-16T14:15:38.035Z NX-41294 DEBUG [leihs.procurement.resources.budget-periods:67] - args => nil
2023-12-16T14:15:38.035Z NX-41294 DEBUG [leihs.procurement.resources.budget-periods:38] - (:id args) => nil
2023-12-16T14:15:38.035Z NX-41294 DEBUG [leihs.procurement.resources.budget-periods:42] - (-> args :whereRequestsCanBeMovedTo empty? not) => false
2023-12-16T14:15:38.035Z NX-41294 DEBUG [leihs.procurement.resources.budget-periods:37] - (let [ids (spy (:id args))] (cond-> budget-periods-base-query ids (sql/where [:in :procurement_budget_periods.id (cast-uuids ids)]) (spy (-> args :whereRequestsCanBeMovedTo empty? not)) (sql/where [:< :current_date :procurement_budget_periods.end_date]))) => {:select [:*], :from [:procurement_budget_periods], :order-by [[:end_date :desc]]}
2023-12-16T14:15:38.035Z NX-41294 DEBUG [leihs.procurement.resources.budget-periods:?] - (sql-format (budget-periods-query (spy args))) => ["SELECT * FROM procurement_budget_periods ORDER BY end_date DESC"]
2023-12-16T14:15:38.062Z NX-41294 DEBUG [leihs.procurement.resources.budget-periods:65] - (jdbc/execute! (-> context :request :tx-next) (-> (spy args) budget-periods-query sql-format spy)) => [{:id #uuid "8b3e7137-7d54-47b3-b2e2-2f82c2fb7ca4", :name "HephaestusUranus", :inspection_start_date #inst "2024-01-15T14:15:37.578584000-00:00", :end_date #inst "2024-03-15T14:15:37.578665000-00:00", :created_at #inst "2023-12-16T14:15:37.578912000-00:00", :updated_at #inst "2023-12-16T14:15:37.578912000-00:00"}]
>>1x #next.jdbc.default_options.DefaultOptions{:connectable #object[com.zaxxer.hikari.HikariDataSource 0x5bbb0d7f HikariDataSource (HikariPool-1)], :options {:builder-fn #object[next.jdbc.result_set$as_unqualified_lower_maps 0x3db93dbb next.jdbc.result_set$as_unqualified_lower_maps@3db93dbb]}}
>>2x {:email gil.lehner@skiles-hessel.biz, :contracts_count 0, :lastname Dare, :org_id nil, :scope_read true, :is_admin false, :authentication-method :session, :login nil, :scope_system_admin_write false, :scope_write true, :firstname Lauran, :scope_admin_write false, :user_session_created_at #time/instant "2023-12-16T14:15:37.977274Z", :id #uuid "ebbf3d54-ad68-40c3-911a-fe3667fd8d1c", :user_session_id #uuid "10481388-6f24-440a-b1a0-42c76af17de6", :scope_system_admin_read false, :access-rights (), :user_id #uuid "ebbf3d54-ad68-40c3-911a-fe3667fd8d1c", :is_system_admin false, :external_sign_out_url nil, :language_locale nil, :inventory_pool_roles_count 0, :scope_admin_read false}
2023-12-16T14:15:38.062Z NX-41294 DEBUG [leihs.procurement.permissions.user:?] - (sql-format (sql/select [[:exists (-> (sql/select [true :exists]) (sql/from :procurement_admins) (sql/where [:= :procurement_admins.user_id [:cast (:user_id auth-entity) :uuid]]))]])) => ["SELECT EXISTS (SELECT TRUE AS exists FROM procurement_admins WHERE procurement_admins.user_id = CAST(? AS UUID))" #uuid "ebbf3d54-ad68-40c3-911a-fe3667fd8d1c"]
>o> admin? [SELECT EXISTS (SELECT TRUE AS exists FROM procurement_admins WHERE procurement_admins.user_id = CAST(? AS UUID)) #uuid "ebbf3d54-ad68-40c3-911a-fe3667fd8d1c"]
2023-12-16T14:15:38.062Z NX-41294 DEBUG [leihs.procurement.permissions.user:38] - query => ["SELECT EXISTS (SELECT TRUE AS exists FROM procurement_admins WHERE procurement_admins.user_id = CAST(? AS UUID))" #uuid "ebbf3d54-ad68-40c3-911a-fe3667fd8d1c"]
>o> admin? {:exists true}
2023-12-16T14:15:38.063Z NX-41294 DEBUG [leihs.procurement.permissions.user:42] - (:exists result) => true
>oo> total-price-cents-new-requests {:id #uuid "8b3e7137-7d54-47b3-b2e2-2f82c2fb7ca4", :name HephaestusUranus, :inspection_start_date #inst "2024-01-15T14:15:37.578584000-00:00", :end_date #inst "2024-03-15T14:15:37.578665000-00:00", :created_at #inst "2023-12-16T14:15:37.578912000-00:00", :updated_at #inst "2023-12-16T14:15:37.578912000-00:00"}
>oo> total-price-sqlmap :requested_quantity
>oo> sql-sum :requested_quantity
2023-12-16T14:15:38.064Z NX-41294 DEBUG [leihs.procurement.resources.requests:435] - (as-> qty-type <> [:* :procurement_requests.price_cents <>] [:cast <> :bigint] [:sum <>]) => [:sum [:cast [:* :procurement_requests.price_cents :requested_quantity] :bigint]]
2023-12-16T14:15:38.064Z NX-41294 DEBUG [leihs.procurement.resources.requests:470] - (-> (sql/select :procurement_requests.budget_period_id [(sql-sum qty-type) :result]) (sql/from :procurement_requests) (sql/where [:= :procurement_requests.budget_period_id [:cast bp-id :uuid]]) (sql/group-by :procurement_requests.budget_period_id)) => {:select [:procurement_requests.budget_period_id [[:sum [:cast [:* :procurement_requests.price_cents :requested_quantity] :bigint]] :result]], :from [:procurement_requests], :where [:= :procurement_requests.budget_period_id [:cast [:cast #uuid "8b3e7137-7d54-47b3-b2e2-2f82c2fb7ca4" :uuid] :uuid]], :group-by [:procurement_requests.budget_period_id]}
>oo> get-total-price-cents {:select [:procurement_requests.budget_period_id [[:sum [:cast [:* :procurement_requests.price_cents :requested_quantity] :bigint]] :result]], :from [:procurement_requests], :where [:and [:= :procurement_requests.budget_period_id [:cast [:cast #uuid "8b3e7137-7d54-47b3-b2e2-2f82c2fb7ca4" :uuid] :uuid]] [:= :procurement_requests.approved_quantity nil]], :group-by [:procurement_requests.budget_period_id]}
2023-12-16T14:15:38.084Z NX-41294 DEBUG [leihs.procurement.resources.requests:423] - (some->> sqlmap sql-format (jdbc/execute-one! tx) :result) => 0M

>request-grapql _> request {:leihs-user-language {:name English (UK), :locale en-GB, :default true, :active true}, :authenticated-entity {:email gil.lehner@skiles-hessel.biz, :contracts_count 0, :lastname Dare, :org_id nil, :scope_read true, :is_admin false, :authentication-method :session, :login nil, :scope_system_admin_write false, :scope_write true, :firstname Lauran, :scope_admin_write false, :user_session_created_at #time/instant "2023-12-16T14:15:37.977274Z", :id #uuid "ebbf3d54-ad68-40c3-911a-fe3667fd8d1c", :user_session_id #uuid "10481388-6f24-440a-b1a0-42c76af17de6", :scope_system_admin_read false, :access-rights (), :user_id #uuid "ebbf3d54-ad68-40c3-911a-fe3667fd8d1c", :is_system_admin false, :external_sign_out_url nil, :language_locale nil, :inventory_pool_roles_count 0, :scope_admin_read false}, :cookies {leihs-anti-csrf-token {:value 780fa7af-c1dd-4640-9a1c-ae818582c297}, leihs-user-session {:value 18228db9-6917-4fc5-8416-35b84f4d52f0}}, :remote-addr 127.0.0.1, :start-time 228378842313583, :params {}, :settings {:email_sending_enabled false, :sessions_max_lifetime_secs 432000, :smtp_default_from_address your.lending.desk@example.com, :public_image_caching_enabled true, :sessions_force_secure false, :deliver_received_order_notifications false, :external_base_url nil, :sessions_force_uniqueness false, :email_signature Cheers,}, :tx-next #next.jdbc.default_options.DefaultOptions{:connectable #object[com.zaxxer.hikari.HikariDataSource 0x5bbb0d7f HikariDataSource (HikariPool-1)], :options {:builder-fn #object[next.jdbc.result_set$as_unqualified_lower_maps 0x3db93dbb next.jdbc.result_set$as_unqualified_lower_maps@3db93dbb]}}, :query-params-raw {}, :route-params nil, :headers {accept application/json, accept-encoding gzip;q=1.0,deflate;q=0.6,identity;q=0.3, content-length 231, content-type application/json, cookie leihs-anti-csrf-token=780fa7af-c1dd-4640-9a1c-ae818582c297; leihs-user-session=18228db9-6917-4fc5-8416-35b84f4d52f0, host localhost:3230, user-agent Faraday v2.7.1, x-csrf-token 780fa7af-c1dd-4640-9a1c-ae818582c297}, :async-channel #object[org.httpkit.server.AsyncChannel 0x606ed02e /127.0.0.1:3230<->/127.0.0.1:55836], :server-port 3230, :params-raw {}, :tx {:datasource #object[com.zaxxer.hikari.HikariDataSource 0x18d95122 HikariDataSource (db-pool)]}, :content-length 231, :form-params {}, :websocket? false, :query-params {}, :content-type application/json, :form-params-raw {}, :character-encoding utf8, :uri /procure/graphql, :server-name localhost, :handler-key :graphql, :query-string nil, :body {:query         query {
          budget_periods {
            id
            name
            inspection_start_date
            end_date
            total_price_cents_new_requests
          }
        }
, :variables {}}, :graphql-schema #CompiledSchema<>, :handler #object[leihs.procurement.graphql$handler 0x36e39341 leihs.procurement.graphql$handler@36e39341], :multipart-params {}, :scheme :http, :request-method :post, :accept {:mime :json, :charset nil, :encoding nil, :language nil}}

>request-c-grapql _> request (json) {"leihs-user-language":{"name":"English (UK)","locale":"en-GB","default":true,"active":true},"authenticated-entity":{"email":"gil.lehner@skiles-hessel.biz","contracts_count":0,"lastname":"Dare","org_id":null,"scope_read":true,"is_admin":false,"authentication-method":"session","login":null,"scope_system_admin_write":false,"scope_write":true,"firstname":"Lauran","scope_admin_write":false,"user_session_created_at":"2023-12-16T14:15:37.977274Z","id":"ebbf3d54-ad68-40c3-911a-fe3667fd8d1c","user_session_id":"10481388-6f24-440a-b1a0-42c76af17de6","scope_system_admin_read":false,"access-rights":[],"user_id":"ebbf3d54-ad68-40c3-911a-fe3667fd8d1c","is_system_admin":false,"external_sign_out_url":null,"language_locale":null,"inventory_pool_roles_count":0,"scope_admin_read":false},"cookies":{"leihs-anti-csrf-token":{"value":"780fa7af-c1dd-4640-9a1c-ae818582c297"},"leihs-user-session":{"value":"18228db9-6917-4fc5-8416-35b84f4d52f0"}},"remote-addr":"127.0.0.1","start-time":228378842313583,"params":{},"settings":{"email_sending_enabled":false,"sessions_max_lifetime_secs":432000,"smtp_default_from_address":"your.lending.desk@example.com","public_image_caching_enabled":true,"sessions_force_secure":false,"deliver_received_order_notifications":false,"external_base_url":null,"sessions_force_uniqueness":false,"email_signature":"Cheers,"},"query-params-raw":{},"route-params":null,"headers":{"accept":"application\/json","accept-encoding":"gzip;q=1.0,deflate;q=0.6,identity;q=0.3","content-length":"231","content-type":"application\/json","cookie":"leihs-anti-csrf-token=780fa7af-c1dd-4640-9a1c-ae818582c297; leihs-user-session=18228db9-6917-4fc5-8416-35b84f4d52f0","host":"localhost:3230","user-agent":"Faraday v2.7.1","x-csrf-token":"780fa7af-c1dd-4640-9a1c-ae818582c297"},"server-port":3230,"params-raw":{},"content-length":231,"form-params":{},"websocket?":false,"query-params":{},"content-type":"application\/json","form-params-raw":{},"character-encoding":"utf8","uri":"\/procure\/graphql","server-name":"localhost","handler-key":"graphql","query-string":null,"body":{"query":"        query {\n          budget_periods {\n            id\n            name\n            inspection_start_date\n            end_date\n            total_price_cents_new_requests\n          }\n        }\n","variables":{}},"multipart-params":{},"scheme":"http","request-method":"post","accept":{"mime":"json","charset":null,"encoding":null,"language":null}}

>request-grapql _> result => {:data #ordered/map ([:budget_periods [#ordered/map ([:id 8b3e7137-7d54-47b3-b2e2-2f82c2fb7ca4] [:name HephaestusUranus] [:inspection_start_date 2024-01-15 15:15:37.578584] [:end_date 2024-03-15 15:15:37.578665] [:total_price_cents_new_requests 0])]])}
2023-12-16T14:15:38.085Z NX-41294 DEBUG [leihs.procurement.graphql:86] - result => {:data #ordered/map ([:budget_periods [#ordered/map ([:id "8b3e7137-7d54-47b3-b2e2-2f82c2fb7ca4"] [:name "HephaestusUranus"] [:inspection_start_date "2024-01-15 15:15:37.578584"] [:end_date "2024-03-15 15:15:37.578665"] [:total_price_cents_new_requests "0"])]])}
>>> authenticate::skip= true  handler-key= :sign-in
>>> authenticate::authenticated-entity nil

>> authorize >

>> authorize::handler > #object[leihs.core.locale$wrap$fn__45448 0x2031e135 leihs.core.locale$wrap$fn__45448@2031e135]

>> authorize::request > {:cookies {}, :remote-addr 127.0.0.1, :start-time 228379774878250, :params {}, :settings {:email_sending_enabled false, :sessions_max_lifetime_secs 432000, :smtp_default_from_address your.lending.desk@example.com, :public_image_caching_enabled true, :sessions_force_secure false, :deliver_received_order_notifications false, :external_base_url nil, :sessions_force_uniqueness false, :email_signature Cheers,}, :tx-next #next.jdbc.default_options.DefaultOptions{:connectable #object[com.zaxxer.hikari.HikariDataSource 0x5bbb0d7f HikariDataSource (HikariPool-1)], :options {:builder-fn #object[next.jdbc.result_set$as_unqualified_lower_maps 0x3db93dbb next.jdbc.result_set$as_unqualified_lower_maps@3db93dbb]}}, :query-params-raw {}, :route-params nil, :headers {accept */*, accept-encoding gzip;q=1.0,deflate;q=0.6,identity;q=0.3, host localhost:3230, user-agent Faraday v2.7.1}, :async-channel #object[org.httpkit.server.AsyncChannel 0x74363689 /127.0.0.1:3230<->/127.0.0.1:55843], :server-port 3230, :params-raw {}, :tx {:datasource #object[com.zaxxer.hikari.HikariDataSource 0x18d95122 HikariDataSource (db-pool)]}, :content-length 0, :form-params {}, :websocket? false, :query-params {}, :content-type nil, :form-params-raw {}, :character-encoding utf8, :uri /sign-in, :server-name localhost, :handler-key :sign-in, :query-string nil, :body nil, :graphql-schema #CompiledSchema<>, :handler #object[compojure.core$routes$fn__27950 0x17459cfd compojure.core$routes$fn__27950@17459cfd], :multipart-params {}, :scheme :http, :request-method :get, :accept {:mime :html, :charset nil, :encoding nil, :language nil}}

>> authorize::handler-key >> :sign-in
>myprint>  authEnt? nil
>myprint>  txn #next.jdbc.default_options.DefaultOptions{:connectable #object[com.zaxxer.hikari.HikariDataSource 0x5bbb0d7f HikariDataSource (HikariPool-1)], :options {:builder-fn #object[next.jdbc.result_set$as_unqualified_lower_maps 0x3db93dbb next.jdbc.result_set$as_unqualified_lower_maps@3db93dbb]}}
2023-12-16T14:15:38.993Z NX-41294 DEBUG [leihs.procurement.permissions.user:?] - (sql-format (sql/select [[:exists (-> (sql/select [true :exists]) (sql/from :procurement_admins) (sql/where [:= :procurement_admins.user_id [:cast (:user_id auth-entity) :uuid]]))]])) => ["SELECT EXISTS (SELECT TRUE AS exists FROM procurement_admins WHERE procurement_admins.user_id = CAST(NULL AS UUID))"]
>o> admin? [SELECT EXISTS (SELECT TRUE AS exists FROM procurement_admins WHERE procurement_admins.user_id = CAST(NULL AS UUID))]
2023-12-16T14:15:38.994Z NX-41294 DEBUG [leihs.procurement.permissions.user:38] - query => ["SELECT EXISTS (SELECT TRUE AS exists FROM procurement_admins WHERE procurement_admins.user_id = CAST(NULL AS UUID))"]
>o> admin? {:exists false}
2023-12-16T14:15:39.006Z NX-41294 DEBUG [leihs.procurement.permissions.user:42] - (:exists result) => false
>myprint>  admin false
>o> inspector? [SELECT EXISTS (SELECT TRUE AS exists FROM procurement_category_inspectors WHERE procurement_category_inspectors.user_id = CAST(NULL AS UUID)) AS result]
2023-12-16T14:15:39.009Z NX-41294 DEBUG [leihs.procurement.permissions.user:62] - query => ["SELECT EXISTS (SELECT TRUE AS exists FROM procurement_category_inspectors WHERE procurement_category_inspectors.user_id = CAST(NULL AS UUID)) AS result"]
>o> inspector? {:result false}
>myprint>  inspector false
>o> viewer? [SELECT EXISTS (SELECT TRUE AS exists FROM procurement_category_viewers WHERE procurement_category_viewers.user_id = CAST(NULL AS UUID)) AS result]
2023-12-16T14:15:39.011Z NX-41294 DEBUG [leihs.procurement.permissions.user:85] - query => ["SELECT EXISTS (SELECT TRUE AS exists FROM procurement_category_viewers WHERE procurement_category_viewers.user_id = CAST(NULL AS UUID)) AS result"]
>o> viewer? {:result false}
>myprint>  viewer false
>o> requester?? [SELECT EXISTS (SELECT TRUE AS exists FROM procurement_requesters_organizations WHERE procurement_requesters_organizations.user_id = CAST(NULL AS UUID))]
2023-12-16T14:15:39.013Z NX-41294 DEBUG [leihs.procurement.permissions.user:169] - query => ["SELECT EXISTS (SELECT TRUE AS exists FROM procurement_requesters_organizations WHERE procurement_requesters_organizations.user_id = CAST(NULL AS UUID))"]
>o> requester?? {:exists false}
2023-12-16T14:15:39.014Z NX-41294 DEBUG [leihs.procurement.permissions.user:173] - (:exists result) => false
>myprint>  requester false
>>> authenticate::skip= true  handler-key= :sign-in
>>> authenticate::authenticated-entity nil

>> authorize >

>> authorize::handler > #object[leihs.core.locale$wrap$fn__45448 0x2031e135 leihs.core.locale$wrap$fn__45448@2031e135]

>> authorize::request > {:cookies {leihs-anti-csrf-token {:value 34a10ca3-dea6-4c3c-8143-397c54b67a71}}, :remote-addr 127.0.0.1, :start-time 228379941925333, :params {:password password, :user amelia@rosenbaum.name}, :settings {:email_sending_enabled false, :sessions_max_lifetime_secs 432000, :smtp_default_from_address your.lending.desk@example.com, :public_image_caching_enabled true, :sessions_force_secure false, :deliver_received_order_notifications false, :external_base_url nil, :sessions_force_uniqueness false, :email_signature Cheers,}, :tx-next #next.jdbc.default_options.DefaultOptions{:connectable #object[com.zaxxer.hikari.pool.HikariProxyConnection 0x1ea572a6 HikariProxyConnection@514159270 wrapping org.postgresql.jdbc.PgConnection@72b35f05], :options {:builder-fn #object[next.jdbc.result_set$as_unqualified_lower_maps 0x3db93dbb next.jdbc.result_set$as_unqualified_lower_maps@3db93dbb]}}, :query-params-raw {}, :route-params nil, :headers {accept */*, accept-encoding gzip;q=1.0,deflate;q=0.6,identity;q=0.3, content-length 46, content-type application/x-www-form-urlencoded, cookie leihs-anti-csrf-token=34a10ca3-dea6-4c3c-8143-397c54b67a71, host localhost:3230, user-agent Faraday v2.7.1, x-csrf-token 34a10ca3-dea6-4c3c-8143-397c54b67a71}, :async-channel #object[org.httpkit.server.AsyncChannel 0x3b4da7e7 /127.0.0.1:3230<->/127.0.0.1:55844], :server-port 3230, :params-raw {:password password, :user amelia@rosenbaum.name}, :tx {:datasource #object[com.zaxxer.hikari.HikariDataSource 0x18d95122 HikariDataSource (db-pool)], :connection #object[com.zaxxer.hikari.pool.HikariProxyConnection 0x74ea0eeb HikariProxyConnection@1961496299 wrapping org.postgresql.jdbc.PgConnection@68f5f480], :level 1, :rollback #object[clojure.lang.Atom 0x7555aab3 {:status :ready, :val false}]}, :content-length 46, :form-params {:password password, :user amelia@rosenbaum.name}, :websocket? false, :query-params {}, :content-type application/x-www-form-urlencoded, :form-params-raw {:password password, :user amelia@rosenbaum.name}, :character-encoding utf8, :uri /sign-in, :server-name localhost, :handler-key :sign-in, :query-string nil, :body #object[org.httpkit.BytesInputStream 0x40d0d6fd BytesInputStream[len=46]], :graphql-schema #CompiledSchema<>, :handler #object[compojure.core$routes$fn__27950 0x17459cfd compojure.core$routes$fn__27950@17459cfd], :multipart-params {}, :scheme :http, :request-method :post, :accept {:mime :html, :charset nil, :encoding nil, :language nil}}

>> authorize::handler-key >> :sign-in
>myprint>  authEnt? nil
>myprint>  txn #next.jdbc.default_options.DefaultOptions{:connectable #object[com.zaxxer.hikari.pool.HikariProxyConnection 0x1ea572a6 HikariProxyConnection@514159270 wrapping org.postgresql.jdbc.PgConnection@72b35f05], :options {:builder-fn #object[next.jdbc.result_set$as_unqualified_lower_maps 0x3db93dbb next.jdbc.result_set$as_unqualified_lower_maps@3db93dbb]}}
2023-12-16T14:15:39.112Z NX-41294 DEBUG [leihs.procurement.permissions.user:?] - (sql-format (sql/select [[:exists (-> (sql/select [true :exists]) (sql/from :procurement_admins) (sql/where [:= :procurement_admins.user_id [:cast (:user_id auth-entity) :uuid]]))]])) => ["SELECT EXISTS (SELECT TRUE AS exists FROM procurement_admins WHERE procurement_admins.user_id = CAST(NULL AS UUID))"]
>o> admin? [SELECT EXISTS (SELECT TRUE AS exists FROM procurement_admins WHERE procurement_admins.user_id = CAST(NULL AS UUID))]
2023-12-16T14:15:39.112Z NX-41294 DEBUG [leihs.procurement.permissions.user:38] - query => ["SELECT EXISTS (SELECT TRUE AS exists FROM procurement_admins WHERE procurement_admins.user_id = CAST(NULL AS UUID))"]
>o> admin? {:exists false}
2023-12-16T14:15:39.113Z NX-41294 DEBUG [leihs.procurement.permissions.user:42] - (:exists result) => false
>myprint>  admin false
>o> inspector? [SELECT EXISTS (SELECT TRUE AS exists FROM procurement_category_inspectors WHERE procurement_category_inspectors.user_id = CAST(NULL AS UUID)) AS result]
2023-12-16T14:15:39.113Z NX-41294 DEBUG [leihs.procurement.permissions.user:62] - query => ["SELECT EXISTS (SELECT TRUE AS exists FROM procurement_category_inspectors WHERE procurement_category_inspectors.user_id = CAST(NULL AS UUID)) AS result"]
>o> inspector? {:result false}
>myprint>  inspector false
>o> viewer? [SELECT EXISTS (SELECT TRUE AS exists FROM procurement_category_viewers WHERE procurement_category_viewers.user_id = CAST(NULL AS UUID)) AS result]
2023-12-16T14:15:39.114Z NX-41294 DEBUG [leihs.procurement.permissions.user:85] - query => ["SELECT EXISTS (SELECT TRUE AS exists FROM procurement_category_viewers WHERE procurement_category_viewers.user_id = CAST(NULL AS UUID)) AS result"]
>o> viewer? {:result false}
>myprint>  viewer false
>o> requester?? [SELECT EXISTS (SELECT TRUE AS exists FROM procurement_requesters_organizations WHERE procurement_requesters_organizations.user_id = CAST(NULL AS UUID))]
2023-12-16T14:15:39.114Z NX-41294 DEBUG [leihs.procurement.permissions.user:169] - query => ["SELECT EXISTS (SELECT TRUE AS exists FROM procurement_requesters_organizations WHERE procurement_requesters_organizations.user_id = CAST(NULL AS UUID))"]
>o> requester?? {:exists false}
2023-12-16T14:15:39.115Z NX-41294 DEBUG [leihs.procurement.permissions.user:173] - (:exists result) => false
>myprint>  requester false
>>> authenticate::skip= nil  handler-key= :graphql
>>> authenticate::authenticated-entity {:email amelia@rosenbaum.name, :contracts_count 0, :lastname Kemmer, :org_id nil, :scope_read true, :is_admin false, :authentication-method :session, :login nil, :scope_system_admin_write false, :scope_write true, :firstname Dawna, :scope_admin_write false, :user_session_created_at #time/instant "2023-12-16T14:15:39.132537Z", :id #uuid "1abd6618-ae86-47b0-8a20-57b599090729", :user_session_id #uuid "bcb93870-a996-4852-befd-44ef930b298a", :scope_system_admin_read false, :access-rights (), :user_id #uuid "1abd6618-ae86-47b0-8a20-57b599090729", :is_system_admin false, :external_sign_out_url nil, :language_locale nil, :inventory_pool_roles_count 0, :scope_admin_read false}

>> authorize >

>> authorize::handler > #object[leihs.core.locale$wrap$fn__45448 0x2031e135 leihs.core.locale$wrap$fn__45448@2031e135]

>> authorize::request > {:authenticated-entity {:email amelia@rosenbaum.name, :contracts_count 0, :lastname Kemmer, :org_id nil, :scope_read true, :is_admin false, :authentication-method :session, :login nil, :scope_system_admin_write false, :scope_write true, :firstname Dawna, :scope_admin_write false, :user_session_created_at #time/instant "2023-12-16T14:15:39.132537Z", :id #uuid "1abd6618-ae86-47b0-8a20-57b599090729", :user_session_id #uuid "bcb93870-a996-4852-befd-44ef930b298a", :scope_system_admin_read false, :access-rights (), :user_id #uuid "1abd6618-ae86-47b0-8a20-57b599090729", :is_system_admin false, :external_sign_out_url nil, :language_locale nil, :inventory_pool_roles_count 0, :scope_admin_read false}, :cookies {leihs-anti-csrf-token {:value 34a10ca3-dea6-4c3c-8143-397c54b67a71}, leihs-user-session {:value fe49f965-324e-4446-8151-63e9a85020d7}}, :remote-addr 127.0.0.1, :start-time 228379992696416, :params {}, :settings {:email_sending_enabled false, :sessions_max_lifetime_secs 432000, :smtp_default_from_address your.lending.desk@example.com, :public_image_caching_enabled true, :sessions_force_secure false, :deliver_received_order_notifications false, :external_base_url nil, :sessions_force_uniqueness false, :email_signature Cheers,}, :tx-next #next.jdbc.default_options.DefaultOptions{:connectable #object[com.zaxxer.hikari.HikariDataSource 0x5bbb0d7f HikariDataSource (HikariPool-1)], :options {:builder-fn #object[next.jdbc.result_set$as_unqualified_lower_maps 0x3db93dbb next.jdbc.result_set$as_unqualified_lower_maps@3db93dbb]}}, :query-params-raw {}, :route-params nil, :headers {accept application/json, accept-encoding gzip;q=1.0,deflate;q=0.6,identity;q=0.3, content-length 204, content-type application/json, cookie leihs-anti-csrf-token=34a10ca3-dea6-4c3c-8143-397c54b67a71; leihs-user-session=fe49f965-324e-4446-8151-63e9a85020d7, host localhost:3230, user-agent Faraday v2.7.1, x-csrf-token 34a10ca3-dea6-4c3c-8143-397c54b67a71}, :async-channel #object[org.httpkit.server.AsyncChannel 0x350b7143 /127.0.0.1:3230<->/127.0.0.1:55845], :server-port 3230, :params-raw {}, :tx {:datasource #object[com.zaxxer.hikari.HikariDataSource 0x18d95122 HikariDataSource (db-pool)]}, :content-length 204, :form-params {}, :websocket? false, :query-params {}, :content-type application/json, :form-params-raw {}, :character-encoding utf8, :uri /procure/graphql, :server-name localhost, :handler-key :graphql, :query-string nil, :body {:query         query {
          budget_periods(id: ["bfea4e8b-3cbe-4172-8dd0-e3608892144c"]) {
            id
            total_price_cents_new_requests
          }
        }
, :variables {}}, :graphql-schema #CompiledSchema<>, :handler #object[leihs.procurement.graphql$handler 0x36e39341 leihs.procurement.graphql$handler@36e39341], :multipart-params {}, :scheme :http, :request-method :post, :accept {:mime :json, :charset nil, :encoding nil, :language nil}}

>> authorize::handler-key >> :graphql
>myprint>  authEnt? {:email amelia@rosenbaum.name, :contracts_count 0, :lastname Kemmer, :org_id nil, :scope_read true, :is_admin false, :authentication-method :session, :login nil, :scope_system_admin_write false, :scope_write true, :firstname Dawna, :scope_admin_write false, :user_session_created_at #time/instant "2023-12-16T14:15:39.132537Z", :id #uuid "1abd6618-ae86-47b0-8a20-57b599090729", :user_session_id #uuid "bcb93870-a996-4852-befd-44ef930b298a", :scope_system_admin_read false, :access-rights (), :user_id #uuid "1abd6618-ae86-47b0-8a20-57b599090729", :is_system_admin false, :external_sign_out_url nil, :language_locale nil, :inventory_pool_roles_count 0, :scope_admin_read false}
>myprint>  txn #next.jdbc.default_options.DefaultOptions{:connectable #object[com.zaxxer.hikari.HikariDataSource 0x5bbb0d7f HikariDataSource (HikariPool-1)], :options {:builder-fn #object[next.jdbc.result_set$as_unqualified_lower_maps 0x3db93dbb next.jdbc.result_set$as_unqualified_lower_maps@3db93dbb]}}
2023-12-16T14:15:39.180Z NX-41294 DEBUG [leihs.procurement.permissions.user:?] - (sql-format (sql/select [[:exists (-> (sql/select [true :exists]) (sql/from :procurement_admins) (sql/where [:= :procurement_admins.user_id [:cast (:user_id auth-entity) :uuid]]))]])) => ["SELECT EXISTS (SELECT TRUE AS exists FROM procurement_admins WHERE procurement_admins.user_id = CAST(? AS UUID))" #uuid "1abd6618-ae86-47b0-8a20-57b599090729"]
>o> admin? [SELECT EXISTS (SELECT TRUE AS exists FROM procurement_admins WHERE procurement_admins.user_id = CAST(? AS UUID)) #uuid "1abd6618-ae86-47b0-8a20-57b599090729"]
2023-12-16T14:15:39.181Z NX-41294 DEBUG [leihs.procurement.permissions.user:38] - query => ["SELECT EXISTS (SELECT TRUE AS exists FROM procurement_admins WHERE procurement_admins.user_id = CAST(? AS UUID))" #uuid "1abd6618-ae86-47b0-8a20-57b599090729"]
>o> admin? {:exists true}
2023-12-16T14:15:39.181Z NX-41294 DEBUG [leihs.procurement.permissions.user:42] - (:exists result) => true
>myprint>  admin true
>o> inspector? [SELECT EXISTS (SELECT TRUE AS exists FROM procurement_category_inspectors WHERE procurement_category_inspectors.user_id = CAST(? AS UUID)) AS result #uuid "1abd6618-ae86-47b0-8a20-57b599090729"]
2023-12-16T14:15:39.182Z NX-41294 DEBUG [leihs.procurement.permissions.user:62] - query => ["SELECT EXISTS (SELECT TRUE AS exists FROM procurement_category_inspectors WHERE procurement_category_inspectors.user_id = CAST(? AS UUID)) AS result" #uuid "1abd6618-ae86-47b0-8a20-57b599090729"]
>o> inspector? {:result false}
>myprint>  inspector false
>o> viewer? [SELECT EXISTS (SELECT TRUE AS exists FROM procurement_category_viewers WHERE procurement_category_viewers.user_id = CAST(? AS UUID)) AS result #uuid "1abd6618-ae86-47b0-8a20-57b599090729"]
2023-12-16T14:15:39.183Z NX-41294 DEBUG [leihs.procurement.permissions.user:85] - query => ["SELECT EXISTS (SELECT TRUE AS exists FROM procurement_category_viewers WHERE procurement_category_viewers.user_id = CAST(? AS UUID)) AS result" #uuid "1abd6618-ae86-47b0-8a20-57b599090729"]
>o> viewer? {:result false}
>myprint>  viewer false
>o> requester?? [SELECT EXISTS (SELECT TRUE AS exists FROM procurement_requesters_organizations WHERE procurement_requesters_organizations.user_id = CAST(? AS UUID)) #uuid "1abd6618-ae86-47b0-8a20-57b599090729"]
2023-12-16T14:15:39.183Z NX-41294 DEBUG [leihs.procurement.permissions.user:169] - query => ["SELECT EXISTS (SELECT TRUE AS exists FROM procurement_requesters_organizations WHERE procurement_requesters_organizations.user_id = CAST(? AS UUID))" #uuid "1abd6618-ae86-47b0-8a20-57b599090729"]
>o> requester?? {:exists false}
2023-12-16T14:15:39.184Z NX-41294 DEBUG [leihs.procurement.permissions.user:173] - (:exists result) => false
>myprint>  requester false
2023-12-16T14:15:39.184Z NX-41294 DEBUG [leihs.procurement.permissions.user:?] - (sql-format (sql/select [[:exists (-> (sql/select [true :exists]) (sql/from :procurement_admins) (sql/where [:= :procurement_admins.user_id [:cast (:user_id auth-entity) :uuid]]))]])) => ["SELECT EXISTS (SELECT TRUE AS exists FROM procurement_admins WHERE procurement_admins.user_id = CAST(? AS UUID))" #uuid "1abd6618-ae86-47b0-8a20-57b599090729"]
>o> admin? [SELECT EXISTS (SELECT TRUE AS exists FROM procurement_admins WHERE procurement_admins.user_id = CAST(? AS UUID)) #uuid "1abd6618-ae86-47b0-8a20-57b599090729"]
2023-12-16T14:15:39.184Z NX-41294 DEBUG [leihs.procurement.permissions.user:38] - query => ["SELECT EXISTS (SELECT TRUE AS exists FROM procurement_admins WHERE procurement_admins.user_id = CAST(? AS UUID))" #uuid "1abd6618-ae86-47b0-8a20-57b599090729"]
>o> admin? {:exists true}
2023-12-16T14:15:39.184Z NX-41294 DEBUG [leihs.procurement.permissions.user:42] - (:exists result) => true
>o> inspector? [SELECT EXISTS (SELECT TRUE AS exists FROM procurement_category_inspectors WHERE procurement_category_inspectors.user_id = CAST(? AS UUID)) AS result #uuid "1abd6618-ae86-47b0-8a20-57b599090729"]
2023-12-16T14:15:39.185Z NX-41294 DEBUG [leihs.procurement.permissions.user:62] - query => ["SELECT EXISTS (SELECT TRUE AS exists FROM procurement_category_inspectors WHERE procurement_category_inspectors.user_id = CAST(? AS UUID)) AS result" #uuid "1abd6618-ae86-47b0-8a20-57b599090729"]
>o> inspector? {:result false}
>o> viewer? [SELECT EXISTS (SELECT TRUE AS exists FROM procurement_category_viewers WHERE procurement_category_viewers.user_id = CAST(? AS UUID)) AS result #uuid "1abd6618-ae86-47b0-8a20-57b599090729"]
2023-12-16T14:15:39.185Z NX-41294 DEBUG [leihs.procurement.permissions.user:85] - query => ["SELECT EXISTS (SELECT TRUE AS exists FROM procurement_category_viewers WHERE procurement_category_viewers.user_id = CAST(? AS UUID)) AS result" #uuid "1abd6618-ae86-47b0-8a20-57b599090729"]
>o> viewer? {:result false}
>o> requester?? [SELECT EXISTS (SELECT TRUE AS exists FROM procurement_requesters_organizations WHERE procurement_requesters_organizations.user_id = CAST(? AS UUID)) #uuid "1abd6618-ae86-47b0-8a20-57b599090729"]
2023-12-16T14:15:39.185Z NX-41294 DEBUG [leihs.procurement.permissions.user:169] - query => ["SELECT EXISTS (SELECT TRUE AS exists FROM procurement_requesters_organizations WHERE procurement_requesters_organizations.user_id = CAST(? AS UUID))" #uuid "1abd6618-ae86-47b0-8a20-57b599090729"]
>o> requester?? {:exists false}
2023-12-16T14:15:39.186Z NX-41294 DEBUG [leihs.procurement.permissions.user:173] - (:exists result) => false
pure-handler >> 2
2023-12-16T14:15:39.187Z NX-41294 DEBUG [leihs.procurement.graphql:46] - graphql query         query {
          budget_periods(id: ["bfea4e8b-3cbe-4172-8dd0-e3608892144c"]) {
            id
            total_price_cents_new_requests
          }
        }
 with variables {}
>oo> vars from graphQL-Requst nil nil nil {}
>oo> Causes issues2 >> {:id [bfea4e8b-3cbe-4172-8dd0-e3608892144c]}
2023-12-16T14:15:39.189Z NX-41294 DEBUG [leihs.procurement.resources.budget-periods:63] - (= (:id args) []) => false
2023-12-16T14:15:39.189Z NX-41294 DEBUG [leihs.procurement.resources.budget-periods:67] - args => {:id ["bfea4e8b-3cbe-4172-8dd0-e3608892144c"]}
2023-12-16T14:15:39.189Z NX-41294 DEBUG [leihs.procurement.resources.budget-periods:38] - (:id args) => ["bfea4e8b-3cbe-4172-8dd0-e3608892144c"]
>o> uuids-sql clojure.lang.PersistentVector
>o> uuids-sql ([:cast bfea4e8b-3cbe-4172-8dd0-e3608892144c :uuid])
2023-12-16T14:15:39.189Z NX-41294 DEBUG [leihs.procurement.utils.helpers:78] - uuids-sql => ([:cast "bfea4e8b-3cbe-4172-8dd0-e3608892144c" :uuid])
2023-12-16T14:15:39.189Z NX-41294 DEBUG [leihs.procurement.resources.budget-periods:42] - (-> args :whereRequestsCanBeMovedTo empty? not) => false
2023-12-16T14:15:39.189Z NX-41294 DEBUG [leihs.procurement.resources.budget-periods:37] - (let [ids (spy (:id args))] (cond-> budget-periods-base-query ids (sql/where [:in :procurement_budget_periods.id (cast-uuids ids)]) (spy (-> args :whereRequestsCanBeMovedTo empty? not)) (sql/where [:< :current_date :procurement_budget_periods.end_date]))) => {:select [:*], :from [:procurement_budget_periods], :order-by [[:end_date :desc]], :where [:in :procurement_budget_periods.id ([:cast "bfea4e8b-3cbe-4172-8dd0-e3608892144c" :uuid])]}
2023-12-16T14:15:39.190Z NX-41294 DEBUG [leihs.procurement.resources.budget-periods:?] - (sql-format (budget-periods-query (spy args))) => ["SELECT * FROM procurement_budget_periods WHERE procurement_budget_periods.id IN (CAST(? AS UUID)) ORDER BY end_date DESC" "bfea4e8b-3cbe-4172-8dd0-e3608892144c"]
2023-12-16T14:15:39.211Z NX-41294 DEBUG [leihs.procurement.resources.budget-periods:65] - (jdbc/execute! (-> context :request :tx-next) (-> (spy args) budget-periods-query sql-format spy)) => [{:id #uuid "bfea4e8b-3cbe-4172-8dd0-e3608892144c", :name "PoseidonGaia", :inspection_start_date #inst "2024-01-15T14:15:38.717146000-00:00", :end_date #inst "2024-03-15T14:15:38.717261000-00:00", :created_at #inst "2023-12-16T14:15:38.717722000-00:00", :updated_at #inst "2023-12-16T14:15:38.717722000-00:00"}]
>>1x #next.jdbc.default_options.DefaultOptions{:connectable #object[com.zaxxer.hikari.HikariDataSource 0x5bbb0d7f HikariDataSource (HikariPool-1)], :options {:builder-fn #object[next.jdbc.result_set$as_unqualified_lower_maps 0x3db93dbb next.jdbc.result_set$as_unqualified_lower_maps@3db93dbb]}}
>>2x {:email amelia@rosenbaum.name, :contracts_count 0, :lastname Kemmer, :org_id nil, :scope_read true, :is_admin false, :authentication-method :session, :login nil, :scope_system_admin_write false, :scope_write true, :firstname Dawna, :scope_admin_write false, :user_session_created_at #time/instant "2023-12-16T14:15:39.132537Z", :id #uuid "1abd6618-ae86-47b0-8a20-57b599090729", :user_session_id #uuid "bcb93870-a996-4852-befd-44ef930b298a", :scope_system_admin_read false, :access-rights (), :user_id #uuid "1abd6618-ae86-47b0-8a20-57b599090729", :is_system_admin false, :external_sign_out_url nil, :language_locale nil, :inventory_pool_roles_count 0, :scope_admin_read false}
2023-12-16T14:15:39.212Z NX-41294 DEBUG [leihs.procurement.permissions.user:?] - (sql-format (sql/select [[:exists (-> (sql/select [true :exists]) (sql/from :procurement_admins) (sql/where [:= :procurement_admins.user_id [:cast (:user_id auth-entity) :uuid]]))]])) => ["SELECT EXISTS (SELECT TRUE AS exists FROM procurement_admins WHERE procurement_admins.user_id = CAST(? AS UUID))" #uuid "1abd6618-ae86-47b0-8a20-57b599090729"]
>o> admin? [SELECT EXISTS (SELECT TRUE AS exists FROM procurement_admins WHERE procurement_admins.user_id = CAST(? AS UUID)) #uuid "1abd6618-ae86-47b0-8a20-57b599090729"]
2023-12-16T14:15:39.212Z NX-41294 DEBUG [leihs.procurement.permissions.user:38] - query => ["SELECT EXISTS (SELECT TRUE AS exists FROM procurement_admins WHERE procurement_admins.user_id = CAST(? AS UUID))" #uuid "1abd6618-ae86-47b0-8a20-57b599090729"]
>o> admin? {:exists true}
2023-12-16T14:15:39.213Z NX-41294 DEBUG [leihs.procurement.permissions.user:42] - (:exists result) => true
>oo> total-price-cents-new-requests {:id #uuid "bfea4e8b-3cbe-4172-8dd0-e3608892144c", :name PoseidonGaia, :inspection_start_date #inst "2024-01-15T14:15:38.717146000-00:00", :end_date #inst "2024-03-15T14:15:38.717261000-00:00", :created_at #inst "2023-12-16T14:15:38.717722000-00:00", :updated_at #inst "2023-12-16T14:15:38.717722000-00:00"}
>oo> total-price-sqlmap :requested_quantity
>oo> sql-sum :requested_quantity
2023-12-16T14:15:39.213Z NX-41294 DEBUG [leihs.procurement.resources.requests:435] - (as-> qty-type <> [:* :procurement_requests.price_cents <>] [:cast <> :bigint] [:sum <>]) => [:sum [:cast [:* :procurement_requests.price_cents :requested_quantity] :bigint]]
2023-12-16T14:15:39.213Z NX-41294 DEBUG [leihs.procurement.resources.requests:470] - (-> (sql/select :procurement_requests.budget_period_id [(sql-sum qty-type) :result]) (sql/from :procurement_requests) (sql/where [:= :procurement_requests.budget_period_id [:cast bp-id :uuid]]) (sql/group-by :procurement_requests.budget_period_id)) => {:select [:procurement_requests.budget_period_id [[:sum [:cast [:* :procurement_requests.price_cents :requested_quantity] :bigint]] :result]], :from [:procurement_requests], :where [:= :procurement_requests.budget_period_id [:cast [:cast #uuid "bfea4e8b-3cbe-4172-8dd0-e3608892144c" :uuid] :uuid]], :group-by [:procurement_requests.budget_period_id]}
>oo> get-total-price-cents {:select [:procurement_requests.budget_period_id [[:sum [:cast [:* :procurement_requests.price_cents :requested_quantity] :bigint]] :result]], :from [:procurement_requests], :where [:and [:= :procurement_requests.budget_period_id [:cast [:cast #uuid "bfea4e8b-3cbe-4172-8dd0-e3608892144c" :uuid] :uuid]] [:= :procurement_requests.approved_quantity nil]], :group-by [:procurement_requests.budget_period_id]}
2023-12-16T14:15:39.231Z NX-41294 DEBUG [leihs.procurement.resources.requests:423] - (some->> sqlmap sql-format (jdbc/execute-one! tx) :result) => 200M

>request-grapql _> request {:leihs-user-language {:name English (UK), :locale en-GB, :default true, :active true}, :authenticated-entity {:email amelia@rosenbaum.name, :contracts_count 0, :lastname Kemmer, :org_id nil, :scope_read true, :is_admin false, :authentication-method :session, :login nil, :scope_system_admin_write false, :scope_write true, :firstname Dawna, :scope_admin_write false, :user_session_created_at #time/instant "2023-12-16T14:15:39.132537Z", :id #uuid "1abd6618-ae86-47b0-8a20-57b599090729", :user_session_id #uuid "bcb93870-a996-4852-befd-44ef930b298a", :scope_system_admin_read false, :access-rights (), :user_id #uuid "1abd6618-ae86-47b0-8a20-57b599090729", :is_system_admin false, :external_sign_out_url nil, :language_locale nil, :inventory_pool_roles_count 0, :scope_admin_read false}, :cookies {leihs-anti-csrf-token {:value 34a10ca3-dea6-4c3c-8143-397c54b67a71}, leihs-user-session {:value fe49f965-324e-4446-8151-63e9a85020d7}}, :remote-addr 127.0.0.1, :start-time 228379992696416, :params {}, :settings {:email_sending_enabled false, :sessions_max_lifetime_secs 432000, :smtp_default_from_address your.lending.desk@example.com, :public_image_caching_enabled true, :sessions_force_secure false, :deliver_received_order_notifications false, :external_base_url nil, :sessions_force_uniqueness false, :email_signature Cheers,}, :tx-next #next.jdbc.default_options.DefaultOptions{:connectable #object[com.zaxxer.hikari.HikariDataSource 0x5bbb0d7f HikariDataSource (HikariPool-1)], :options {:builder-fn #object[next.jdbc.result_set$as_unqualified_lower_maps 0x3db93dbb next.jdbc.result_set$as_unqualified_lower_maps@3db93dbb]}}, :query-params-raw {}, :route-params nil, :headers {accept application/json, accept-encoding gzip;q=1.0,deflate;q=0.6,identity;q=0.3, content-length 204, content-type application/json, cookie leihs-anti-csrf-token=34a10ca3-dea6-4c3c-8143-397c54b67a71; leihs-user-session=fe49f965-324e-4446-8151-63e9a85020d7, host localhost:3230, user-agent Faraday v2.7.1, x-csrf-token 34a10ca3-dea6-4c3c-8143-397c54b67a71}, :async-channel #object[org.httpkit.server.AsyncChannel 0x350b7143 /127.0.0.1:3230<->/127.0.0.1:55845], :server-port 3230, :params-raw {}, :tx {:datasource #object[com.zaxxer.hikari.HikariDataSource 0x18d95122 HikariDataSource (db-pool)]}, :content-length 204, :form-params {}, :websocket? false, :query-params {}, :content-type application/json, :form-params-raw {}, :character-encoding utf8, :uri /procure/graphql, :server-name localhost, :handler-key :graphql, :query-string nil, :body {:query         query {
          budget_periods(id: ["bfea4e8b-3cbe-4172-8dd0-e3608892144c"]) {
            id
            total_price_cents_new_requests
          }
        }
, :variables {}}, :graphql-schema #CompiledSchema<>, :handler #object[leihs.procurement.graphql$handler 0x36e39341 leihs.procurement.graphql$handler@36e39341], :multipart-params {}, :scheme :http, :request-method :post, :accept {:mime :json, :charset nil, :encoding nil, :language nil}}

>request-c-grapql _> request (json) {"leihs-user-language":{"name":"English (UK)","locale":"en-GB","default":true,"active":true},"authenticated-entity":{"email":"amelia@rosenbaum.name","contracts_count":0,"lastname":"Kemmer","org_id":null,"scope_read":true,"is_admin":false,"authentication-method":"session","login":null,"scope_system_admin_write":false,"scope_write":true,"firstname":"Dawna","scope_admin_write":false,"user_session_created_at":"2023-12-16T14:15:39.132537Z","id":"1abd6618-ae86-47b0-8a20-57b599090729","user_session_id":"bcb93870-a996-4852-befd-44ef930b298a","scope_system_admin_read":false,"access-rights":[],"user_id":"1abd6618-ae86-47b0-8a20-57b599090729","is_system_admin":false,"external_sign_out_url":null,"language_locale":null,"inventory_pool_roles_count":0,"scope_admin_read":false},"cookies":{"leihs-anti-csrf-token":{"value":"34a10ca3-dea6-4c3c-8143-397c54b67a71"},"leihs-user-session":{"value":"fe49f965-324e-4446-8151-63e9a85020d7"}},"remote-addr":"127.0.0.1","start-time":228379992696416,"params":{},"settings":{"email_sending_enabled":false,"sessions_max_lifetime_secs":432000,"smtp_default_from_address":"your.lending.desk@example.com","public_image_caching_enabled":true,"sessions_force_secure":false,"deliver_received_order_notifications":false,"external_base_url":null,"sessions_force_uniqueness":false,"email_signature":"Cheers,"},"query-params-raw":{},"route-params":null,"headers":{"accept":"application\/json","accept-encoding":"gzip;q=1.0,deflate;q=0.6,identity;q=0.3","content-length":"204","content-type":"application\/json","cookie":"leihs-anti-csrf-token=34a10ca3-dea6-4c3c-8143-397c54b67a71; leihs-user-session=fe49f965-324e-4446-8151-63e9a85020d7","host":"localhost:3230","user-agent":"Faraday v2.7.1","x-csrf-token":"34a10ca3-dea6-4c3c-8143-397c54b67a71"},"server-port":3230,"params-raw":{},"content-length":204,"form-params":{},"websocket?":false,"query-params":{},"content-type":"application\/json","form-params-raw":{},"character-encoding":"utf8","uri":"\/procure\/graphql","server-name":"localhost","handler-key":"graphql","query-string":null,"body":{"query":"        query {\n          budget_periods(id: [\"bfea4e8b-3cbe-4172-8dd0-e3608892144c\"]) {\n            id\n            total_price_cents_new_requests\n          }\n        }\n","variables":{}},"multipart-params":{},"scheme":"http","request-method":"post","accept":{"mime":"json","charset":null,"encoding":null,"language":null}}

>request-grapql _> result => {:data #ordered/map ([:budget_periods [#ordered/map ([:id bfea4e8b-3cbe-4172-8dd0-e3608892144c] [:total_price_cents_new_requests 200])]])}
2023-12-16T14:15:39.235Z NX-41294 DEBUG [leihs.procurement.graphql:86] - result => {:data #ordered/map ([:budget_periods [#ordered/map ([:id "bfea4e8b-3cbe-4172-8dd0-e3608892144c"] [:total_price_cents_new_requests "200"])]])}
>>> authenticate::skip= true  handler-key= :sign-in
>>> authenticate::authenticated-entity nil

>> authorize >

>> authorize::handler > #object[leihs.core.locale$wrap$fn__45448 0x2031e135 leihs.core.locale$wrap$fn__45448@2031e135]

>> authorize::request > {:cookies {}, :remote-addr 127.0.0.1, :start-time 228381131807000, :params {}, :settings {:email_sending_enabled false, :sessions_max_lifetime_secs 432000, :smtp_default_from_address your.lending.desk@example.com, :public_image_caching_enabled true, :sessions_force_secure false, :deliver_received_order_notifications false, :external_base_url nil, :sessions_force_uniqueness false, :email_signature Cheers,}, :tx-next #next.jdbc.default_options.DefaultOptions{:connectable #object[com.zaxxer.hikari.HikariDataSource 0x5bbb0d7f HikariDataSource (HikariPool-1)], :options {:builder-fn #object[next.jdbc.result_set$as_unqualified_lower_maps 0x3db93dbb next.jdbc.result_set$as_unqualified_lower_maps@3db93dbb]}}, :query-params-raw {}, :route-params nil, :headers {accept */*, accept-encoding gzip;q=1.0,deflate;q=0.6,identity;q=0.3, host localhost:3230, user-agent Faraday v2.7.1}, :async-channel #object[org.httpkit.server.AsyncChannel 0x49b9a3e3 /127.0.0.1:3230<->/127.0.0.1:55851], :server-port 3230, :params-raw {}, :tx {:datasource #object[com.zaxxer.hikari.HikariDataSource 0x18d95122 HikariDataSource (db-pool)]}, :content-length 0, :form-params {}, :websocket? false, :query-params {}, :content-type nil, :form-params-raw {}, :character-encoding utf8, :uri /sign-in, :server-name localhost, :handler-key :sign-in, :query-string nil, :body nil, :graphql-schema #CompiledSchema<>, :handler #object[compojure.core$routes$fn__27950 0x17459cfd compojure.core$routes$fn__27950@17459cfd], :multipart-params {}, :scheme :http, :request-method :get, :accept {:mime :html, :charset nil, :encoding nil, :language nil}}

>> authorize::handler-key >> :sign-in
>myprint>  authEnt? nil
>myprint>  txn #next.jdbc.default_options.DefaultOptions{:connectable #object[com.zaxxer.hikari.HikariDataSource 0x5bbb0d7f HikariDataSource (HikariPool-1)], :options {:builder-fn #object[next.jdbc.result_set$as_unqualified_lower_maps 0x3db93dbb next.jdbc.result_set$as_unqualified_lower_maps@3db93dbb]}}
2023-12-16T14:15:40.327Z NX-41294 DEBUG [leihs.procurement.permissions.user:?] - (sql-format (sql/select [[:exists (-> (sql/select [true :exists]) (sql/from :procurement_admins) (sql/where [:= :procurement_admins.user_id [:cast (:user_id auth-entity) :uuid]]))]])) => ["SELECT EXISTS (SELECT TRUE AS exists FROM procurement_admins WHERE procurement_admins.user_id = CAST(NULL AS UUID))"]
>o> admin? [SELECT EXISTS (SELECT TRUE AS exists FROM procurement_admins WHERE procurement_admins.user_id = CAST(NULL AS UUID))]
2023-12-16T14:15:40.327Z NX-41294 DEBUG [leihs.procurement.permissions.user:38] - query => ["SELECT EXISTS (SELECT TRUE AS exists FROM procurement_admins WHERE procurement_admins.user_id = CAST(NULL AS UUID))"]
>o> admin? {:exists false}
2023-12-16T14:15:40.337Z NX-41294 DEBUG [leihs.procurement.permissions.user:42] - (:exists result) => false
>myprint>  admin false
>o> inspector? [SELECT EXISTS (SELECT TRUE AS exists FROM procurement_category_inspectors WHERE procurement_category_inspectors.user_id = CAST(NULL AS UUID)) AS result]
2023-12-16T14:15:40.337Z NX-41294 DEBUG [leihs.procurement.permissions.user:62] - query => ["SELECT EXISTS (SELECT TRUE AS exists FROM procurement_category_inspectors WHERE procurement_category_inspectors.user_id = CAST(NULL AS UUID)) AS result"]
>o> inspector? {:result false}
>myprint>  inspector false
>o> viewer? [SELECT EXISTS (SELECT TRUE AS exists FROM procurement_category_viewers WHERE procurement_category_viewers.user_id = CAST(NULL AS UUID)) AS result]
2023-12-16T14:15:40.340Z NX-41294 DEBUG [leihs.procurement.permissions.user:85] - query => ["SELECT EXISTS (SELECT TRUE AS exists FROM procurement_category_viewers WHERE procurement_category_viewers.user_id = CAST(NULL AS UUID)) AS result"]
>o> viewer? {:result false}
>myprint>  viewer false
>o> requester?? [SELECT EXISTS (SELECT TRUE AS exists FROM procurement_requesters_organizations WHERE procurement_requesters_organizations.user_id = CAST(NULL AS UUID))]
2023-12-16T14:15:40.342Z NX-41294 DEBUG [leihs.procurement.permissions.user:169] - query => ["SELECT EXISTS (SELECT TRUE AS exists FROM procurement_requesters_organizations WHERE procurement_requesters_organizations.user_id = CAST(NULL AS UUID))"]
>o> requester?? {:exists false}
2023-12-16T14:15:40.348Z NX-41294 DEBUG [leihs.procurement.permissions.user:173] - (:exists result) => false
>myprint>  requester false
>>> authenticate::skip= true  handler-key= :sign-in
>>> authenticate::authenticated-entity nil

>> authorize >

>> authorize::handler > #object[leihs.core.locale$wrap$fn__45448 0x2031e135 leihs.core.locale$wrap$fn__45448@2031e135]

>> authorize::request > {:cookies {leihs-anti-csrf-token {:value 5206b79a-86a0-490e-87a1-cd5e6c117a8b}}, :remote-addr 127.0.0.1, :start-time 228381255714875, :params {:password password, :user amelia@rosenbaum.name}, :settings {:email_sending_enabled false, :sessions_max_lifetime_secs 432000, :smtp_default_from_address your.lending.desk@example.com, :public_image_caching_enabled true, :sessions_force_secure false, :deliver_received_order_notifications false, :external_base_url nil, :sessions_force_uniqueness false, :email_signature Cheers,}, :tx-next #next.jdbc.default_options.DefaultOptions{:connectable #object[com.zaxxer.hikari.pool.HikariProxyConnection 0x794edbb1 HikariProxyConnection@2035211185 wrapping org.postgresql.jdbc.PgConnection@72b35f05], :options {:builder-fn #object[next.jdbc.result_set$as_unqualified_lower_maps 0x3db93dbb next.jdbc.result_set$as_unqualified_lower_maps@3db93dbb]}}, :query-params-raw {}, :route-params nil, :headers {accept */*, accept-encoding gzip;q=1.0,deflate;q=0.6,identity;q=0.3, content-length 46, content-type application/x-www-form-urlencoded, cookie leihs-anti-csrf-token=5206b79a-86a0-490e-87a1-cd5e6c117a8b, host localhost:3230, user-agent Faraday v2.7.1, x-csrf-token 5206b79a-86a0-490e-87a1-cd5e6c117a8b}, :async-channel #object[org.httpkit.server.AsyncChannel 0x6d17bf33 /127.0.0.1:3230<->/127.0.0.1:55852], :server-port 3230, :params-raw {:password password, :user amelia@rosenbaum.name}, :tx {:datasource #object[com.zaxxer.hikari.HikariDataSource 0x18d95122 HikariDataSource (db-pool)], :connection #object[com.zaxxer.hikari.pool.HikariProxyConnection 0x40f18fe6 HikariProxyConnection@1089572838 wrapping org.postgresql.jdbc.PgConnection@68f5f480], :level 1, :rollback #object[clojure.lang.Atom 0x1bd15360 {:status :ready, :val false}]}, :content-length 46, :form-params {:password password, :user amelia@rosenbaum.name}, :websocket? false, :query-params {}, :content-type application/x-www-form-urlencoded, :form-params-raw {:password password, :user amelia@rosenbaum.name}, :character-encoding utf8, :uri /sign-in, :server-name localhost, :handler-key :sign-in, :query-string nil, :body #object[org.httpkit.BytesInputStream 0x144d90f8 BytesInputStream[len=46]], :graphql-schema #CompiledSchema<>, :handler #object[compojure.core$routes$fn__27950 0x17459cfd compojure.core$routes$fn__27950@17459cfd], :multipart-params {}, :scheme :http, :request-method :post, :accept {:mime :html, :charset nil, :encoding nil, :language nil}}

>> authorize::handler-key >> :sign-in
>myprint>  authEnt? nil
>myprint>  txn #next.jdbc.default_options.DefaultOptions{:connectable #object[com.zaxxer.hikari.pool.HikariProxyConnection 0x794edbb1 HikariProxyConnection@2035211185 wrapping org.postgresql.jdbc.PgConnection@72b35f05], :options {:builder-fn #object[next.jdbc.result_set$as_unqualified_lower_maps 0x3db93dbb next.jdbc.result_set$as_unqualified_lower_maps@3db93dbb]}}
2023-12-16T14:15:40.424Z NX-41294 DEBUG [leihs.procurement.permissions.user:?] - (sql-format (sql/select [[:exists (-> (sql/select [true :exists]) (sql/from :procurement_admins) (sql/where [:= :procurement_admins.user_id [:cast (:user_id auth-entity) :uuid]]))]])) => ["SELECT EXISTS (SELECT TRUE AS exists FROM procurement_admins WHERE procurement_admins.user_id = CAST(NULL AS UUID))"]
>o> admin? [SELECT EXISTS (SELECT TRUE AS exists FROM procurement_admins WHERE procurement_admins.user_id = CAST(NULL AS UUID))]
2023-12-16T14:15:40.424Z NX-41294 DEBUG [leihs.procurement.permissions.user:38] - query => ["SELECT EXISTS (SELECT TRUE AS exists FROM procurement_admins WHERE procurement_admins.user_id = CAST(NULL AS UUID))"]
>o> admin? {:exists false}
2023-12-16T14:15:40.425Z NX-41294 DEBUG [leihs.procurement.permissions.user:42] - (:exists result) => false
>myprint>  admin false
>o> inspector? [SELECT EXISTS (SELECT TRUE AS exists FROM procurement_category_inspectors WHERE procurement_category_inspectors.user_id = CAST(NULL AS UUID)) AS result]
2023-12-16T14:15:40.425Z NX-41294 DEBUG [leihs.procurement.permissions.user:62] - query => ["SELECT EXISTS (SELECT TRUE AS exists FROM procurement_category_inspectors WHERE procurement_category_inspectors.user_id = CAST(NULL AS UUID)) AS result"]
>o> inspector? {:result false}
>myprint>  inspector false
>o> viewer? [SELECT EXISTS (SELECT TRUE AS exists FROM procurement_category_viewers WHERE procurement_category_viewers.user_id = CAST(NULL AS UUID)) AS result]
2023-12-16T14:15:40.426Z NX-41294 DEBUG [leihs.procurement.permissions.user:85] - query => ["SELECT EXISTS (SELECT TRUE AS exists FROM procurement_category_viewers WHERE procurement_category_viewers.user_id = CAST(NULL AS UUID)) AS result"]
>o> viewer? {:result false}
>myprint>  viewer false
>o> requester?? [SELECT EXISTS (SELECT TRUE AS exists FROM procurement_requesters_organizations WHERE procurement_requesters_organizations.user_id = CAST(NULL AS UUID))]
2023-12-16T14:15:40.426Z NX-41294 DEBUG [leihs.procurement.permissions.user:169] - query => ["SELECT EXISTS (SELECT TRUE AS exists FROM procurement_requesters_organizations WHERE procurement_requesters_organizations.user_id = CAST(NULL AS UUID))"]
>o> requester?? {:exists false}
2023-12-16T14:15:40.426Z NX-41294 DEBUG [leihs.procurement.permissions.user:173] - (:exists result) => false
>myprint>  requester false
>>> authenticate::skip= nil  handler-key= :graphql
>>> authenticate::authenticated-entity {:email amelia@rosenbaum.name, :contracts_count 0, :lastname Kemmer, :org_id nil, :scope_read true, :is_admin false, :authentication-method :session, :login nil, :scope_system_admin_write false, :scope_write true, :firstname Dawna, :scope_admin_write false, :user_session_created_at #time/instant "2023-12-16T14:15:40.439961Z", :id #uuid "9424e289-f4e0-4122-8b6f-e646111cd8eb", :user_session_id #uuid "4ec326a2-1ae3-4cd9-8bb7-e0b22b02b8c9", :scope_system_admin_read false, :access-rights (), :user_id #uuid "9424e289-f4e0-4122-8b6f-e646111cd8eb", :is_system_admin false, :external_sign_out_url nil, :language_locale nil, :inventory_pool_roles_count 0, :scope_admin_read false}

>> authorize >

>> authorize::handler > #object[leihs.core.locale$wrap$fn__45448 0x2031e135 leihs.core.locale$wrap$fn__45448@2031e135]

>> authorize::request > {:authenticated-entity {:email amelia@rosenbaum.name, :contracts_count 0, :lastname Kemmer, :org_id nil, :scope_read true, :is_admin false, :authentication-method :session, :login nil, :scope_system_admin_write false, :scope_write true, :firstname Dawna, :scope_admin_write false, :user_session_created_at #time/instant "2023-12-16T14:15:40.439961Z", :id #uuid "9424e289-f4e0-4122-8b6f-e646111cd8eb", :user_session_id #uuid "4ec326a2-1ae3-4cd9-8bb7-e0b22b02b8c9", :scope_system_admin_read false, :access-rights (), :user_id #uuid "9424e289-f4e0-4122-8b6f-e646111cd8eb", :is_system_admin false, :external_sign_out_url nil, :language_locale nil, :inventory_pool_roles_count 0, :scope_admin_read false}, :cookies {leihs-anti-csrf-token {:value 5206b79a-86a0-490e-87a1-cd5e6c117a8b}, leihs-user-session {:value 3a8de393-ae98-4a84-982b-1fb69991c8f1}}, :remote-addr 127.0.0.1, :start-time 228381300879375, :params {}, :settings {:email_sending_enabled false, :sessions_max_lifetime_secs 432000, :smtp_default_from_address your.lending.desk@example.com, :public_image_caching_enabled true, :sessions_force_secure false, :deliver_received_order_notifications false, :external_base_url nil, :sessions_force_uniqueness false, :email_signature Cheers,}, :tx-next #next.jdbc.default_options.DefaultOptions{:connectable #object[com.zaxxer.hikari.HikariDataSource 0x5bbb0d7f HikariDataSource (HikariPool-1)], :options {:builder-fn #object[next.jdbc.result_set$as_unqualified_lower_maps 0x3db93dbb next.jdbc.result_set$as_unqualified_lower_maps@3db93dbb]}}, :query-params-raw {}, :route-params nil, :headers {accept application/json, accept-encoding gzip;q=1.0,deflate;q=0.6,identity;q=0.3, content-length 210, content-type application/json, cookie leihs-anti-csrf-token=5206b79a-86a0-490e-87a1-cd5e6c117a8b; leihs-user-session=3a8de393-ae98-4a84-982b-1fb69991c8f1, host localhost:3230, user-agent Faraday v2.7.1, x-csrf-token 5206b79a-86a0-490e-87a1-cd5e6c117a8b}, :async-channel #object[org.httpkit.server.AsyncChannel 0x7f9e06a7 /127.0.0.1:3230<->/127.0.0.1:55853], :server-port 3230, :params-raw {}, :tx {:datasource #object[com.zaxxer.hikari.HikariDataSource 0x18d95122 HikariDataSource (db-pool)]}, :content-length 210, :form-params {}, :websocket? false, :query-params {}, :content-type application/json, :form-params-raw {}, :character-encoding utf8, :uri /procure/graphql, :server-name localhost, :handler-key :graphql, :query-string nil, :body {:query         query {
          budget_periods(id: ["e9c699ec-46eb-4742-ba4e-53c379ebfa18"]) {
            id
            total_price_cents_inspected_requests
          }
        }
, :variables {}}, :graphql-schema #CompiledSchema<>, :handler #object[leihs.procurement.graphql$handler 0x36e39341 leihs.procurement.graphql$handler@36e39341], :multipart-params {}, :scheme :http, :request-method :post, :accept {:mime :json, :charset nil, :encoding nil, :language nil}}

>> authorize::handler-key >> :graphql
>myprint>  authEnt? {:email amelia@rosenbaum.name, :contracts_count 0, :lastname Kemmer, :org_id nil, :scope_read true, :is_admin false, :authentication-method :session, :login nil, :scope_system_admin_write false, :scope_write true, :firstname Dawna, :scope_admin_write false, :user_session_created_at #time/instant "2023-12-16T14:15:40.439961Z", :id #uuid "9424e289-f4e0-4122-8b6f-e646111cd8eb", :user_session_id #uuid "4ec326a2-1ae3-4cd9-8bb7-e0b22b02b8c9", :scope_system_admin_read false, :access-rights (), :user_id #uuid "9424e289-f4e0-4122-8b6f-e646111cd8eb", :is_system_admin false, :external_sign_out_url nil, :language_locale nil, :inventory_pool_roles_count 0, :scope_admin_read false}
>myprint>  txn #next.jdbc.default_options.DefaultOptions{:connectable #object[com.zaxxer.hikari.HikariDataSource 0x5bbb0d7f HikariDataSource (HikariPool-1)], :options {:builder-fn #object[next.jdbc.result_set$as_unqualified_lower_maps 0x3db93dbb next.jdbc.result_set$as_unqualified_lower_maps@3db93dbb]}}
2023-12-16T14:15:40.483Z NX-41294 DEBUG [leihs.procurement.permissions.user:?] - (sql-format (sql/select [[:exists (-> (sql/select [true :exists]) (sql/from :procurement_admins) (sql/where [:= :procurement_admins.user_id [:cast (:user_id auth-entity) :uuid]]))]])) => ["SELECT EXISTS (SELECT TRUE AS exists FROM procurement_admins WHERE procurement_admins.user_id = CAST(? AS UUID))" #uuid "9424e289-f4e0-4122-8b6f-e646111cd8eb"]
>o> admin? [SELECT EXISTS (SELECT TRUE AS exists FROM procurement_admins WHERE procurement_admins.user_id = CAST(? AS UUID)) #uuid "9424e289-f4e0-4122-8b6f-e646111cd8eb"]
2023-12-16T14:15:40.484Z NX-41294 DEBUG [leihs.procurement.permissions.user:38] - query => ["SELECT EXISTS (SELECT TRUE AS exists FROM procurement_admins WHERE procurement_admins.user_id = CAST(? AS UUID))" #uuid "9424e289-f4e0-4122-8b6f-e646111cd8eb"]
>o> admin? {:exists true}
2023-12-16T14:15:40.484Z NX-41294 DEBUG [leihs.procurement.permissions.user:42] - (:exists result) => true
>myprint>  admin true
>o> inspector? [SELECT EXISTS (SELECT TRUE AS exists FROM procurement_category_inspectors WHERE procurement_category_inspectors.user_id = CAST(? AS UUID)) AS result #uuid "9424e289-f4e0-4122-8b6f-e646111cd8eb"]
2023-12-16T14:15:40.484Z NX-41294 DEBUG [leihs.procurement.permissions.user:62] - query => ["SELECT EXISTS (SELECT TRUE AS exists FROM procurement_category_inspectors WHERE procurement_category_inspectors.user_id = CAST(? AS UUID)) AS result" #uuid "9424e289-f4e0-4122-8b6f-e646111cd8eb"]
>o> inspector? {:result false}
>myprint>  inspector false
>o> viewer? [SELECT EXISTS (SELECT TRUE AS exists FROM procurement_category_viewers WHERE procurement_category_viewers.user_id = CAST(? AS UUID)) AS result #uuid "9424e289-f4e0-4122-8b6f-e646111cd8eb"]
2023-12-16T14:15:40.485Z NX-41294 DEBUG [leihs.procurement.permissions.user:85] - query => ["SELECT EXISTS (SELECT TRUE AS exists FROM procurement_category_viewers WHERE procurement_category_viewers.user_id = CAST(? AS UUID)) AS result" #uuid "9424e289-f4e0-4122-8b6f-e646111cd8eb"]
>o> viewer? {:result false}
>myprint>  viewer false
>o> requester?? [SELECT EXISTS (SELECT TRUE AS exists FROM procurement_requesters_organizations WHERE procurement_requesters_organizations.user_id = CAST(? AS UUID)) #uuid "9424e289-f4e0-4122-8b6f-e646111cd8eb"]
2023-12-16T14:15:40.485Z NX-41294 DEBUG [leihs.procurement.permissions.user:169] - query => ["SELECT EXISTS (SELECT TRUE AS exists FROM procurement_requesters_organizations WHERE procurement_requesters_organizations.user_id = CAST(? AS UUID))" #uuid "9424e289-f4e0-4122-8b6f-e646111cd8eb"]
>o> requester?? {:exists false}
2023-12-16T14:15:40.486Z NX-41294 DEBUG [leihs.procurement.permissions.user:173] - (:exists result) => false
>myprint>  requester false
2023-12-16T14:15:40.486Z NX-41294 DEBUG [leihs.procurement.permissions.user:?] - (sql-format (sql/select [[:exists (-> (sql/select [true :exists]) (sql/from :procurement_admins) (sql/where [:= :procurement_admins.user_id [:cast (:user_id auth-entity) :uuid]]))]])) => ["SELECT EXISTS (SELECT TRUE AS exists FROM procurement_admins WHERE procurement_admins.user_id = CAST(? AS UUID))" #uuid "9424e289-f4e0-4122-8b6f-e646111cd8eb"]
>o> admin? [SELECT EXISTS (SELECT TRUE AS exists FROM procurement_admins WHERE procurement_admins.user_id = CAST(? AS UUID)) #uuid "9424e289-f4e0-4122-8b6f-e646111cd8eb"]
2023-12-16T14:15:40.486Z NX-41294 DEBUG [leihs.procurement.permissions.user:38] - query => ["SELECT EXISTS (SELECT TRUE AS exists FROM procurement_admins WHERE procurement_admins.user_id = CAST(? AS UUID))" #uuid "9424e289-f4e0-4122-8b6f-e646111cd8eb"]
>o> admin? {:exists true}
2023-12-16T14:15:40.486Z NX-41294 DEBUG [leihs.procurement.permissions.user:42] - (:exists result) => true
>o> inspector? [SELECT EXISTS (SELECT TRUE AS exists FROM procurement_category_inspectors WHERE procurement_category_inspectors.user_id = CAST(? AS UUID)) AS result #uuid "9424e289-f4e0-4122-8b6f-e646111cd8eb"]
2023-12-16T14:15:40.486Z NX-41294 DEBUG [leihs.procurement.permissions.user:62] - query => ["SELECT EXISTS (SELECT TRUE AS exists FROM procurement_category_inspectors WHERE procurement_category_inspectors.user_id = CAST(? AS UUID)) AS result" #uuid "9424e289-f4e0-4122-8b6f-e646111cd8eb"]
>o> inspector? {:result false}
>o> viewer? [SELECT EXISTS (SELECT TRUE AS exists FROM procurement_category_viewers WHERE procurement_category_viewers.user_id = CAST(? AS UUID)) AS result #uuid "9424e289-f4e0-4122-8b6f-e646111cd8eb"]
2023-12-16T14:15:40.487Z NX-41294 DEBUG [leihs.procurement.permissions.user:85] - query => ["SELECT EXISTS (SELECT TRUE AS exists FROM procurement_category_viewers WHERE procurement_category_viewers.user_id = CAST(? AS UUID)) AS result" #uuid "9424e289-f4e0-4122-8b6f-e646111cd8eb"]
>o> viewer? {:result false}
>o> requester?? [SELECT EXISTS (SELECT TRUE AS exists FROM procurement_requesters_organizations WHERE procurement_requesters_organizations.user_id = CAST(? AS UUID)) #uuid "9424e289-f4e0-4122-8b6f-e646111cd8eb"]
2023-12-16T14:15:40.488Z NX-41294 DEBUG [leihs.procurement.permissions.user:169] - query => ["SELECT EXISTS (SELECT TRUE AS exists FROM procurement_requesters_organizations WHERE procurement_requesters_organizations.user_id = CAST(? AS UUID))" #uuid "9424e289-f4e0-4122-8b6f-e646111cd8eb"]
>o> requester?? {:exists false}
2023-12-16T14:15:40.488Z NX-41294 DEBUG [leihs.procurement.permissions.user:173] - (:exists result) => false
pure-handler >> 2
2023-12-16T14:15:40.490Z NX-41294 DEBUG [leihs.procurement.graphql:46] - graphql query         query {
          budget_periods(id: ["e9c699ec-46eb-4742-ba4e-53c379ebfa18"]) {
            id
            total_price_cents_inspected_requests
          }
        }
 with variables {}
>oo> vars from graphQL-Requst nil nil nil {}
>oo> Causes issues2 >> {:id [e9c699ec-46eb-4742-ba4e-53c379ebfa18]}
2023-12-16T14:15:40.491Z NX-41294 DEBUG [leihs.procurement.resources.budget-periods:63] - (= (:id args) []) => false
2023-12-16T14:15:40.491Z NX-41294 DEBUG [leihs.procurement.resources.budget-periods:67] - args => {:id ["e9c699ec-46eb-4742-ba4e-53c379ebfa18"]}
2023-12-16T14:15:40.491Z NX-41294 DEBUG [leihs.procurement.resources.budget-periods:38] - (:id args) => ["e9c699ec-46eb-4742-ba4e-53c379ebfa18"]
>o> uuids-sql clojure.lang.PersistentVector
>o> uuids-sql ([:cast e9c699ec-46eb-4742-ba4e-53c379ebfa18 :uuid])
2023-12-16T14:15:40.491Z NX-41294 DEBUG [leihs.procurement.utils.helpers:78] - uuids-sql => ([:cast "e9c699ec-46eb-4742-ba4e-53c379ebfa18" :uuid])
2023-12-16T14:15:40.491Z NX-41294 DEBUG [leihs.procurement.resources.budget-periods:42] - (-> args :whereRequestsCanBeMovedTo empty? not) => false
2023-12-16T14:15:40.491Z NX-41294 DEBUG [leihs.procurement.resources.budget-periods:37] - (let [ids (spy (:id args))] (cond-> budget-periods-base-query ids (sql/where [:in :procurement_budget_periods.id (cast-uuids ids)]) (spy (-> args :whereRequestsCanBeMovedTo empty? not)) (sql/where [:< :current_date :procurement_budget_periods.end_date]))) => {:select [:*], :from [:procurement_budget_periods], :order-by [[:end_date :desc]], :where [:in :procurement_budget_periods.id ([:cast "e9c699ec-46eb-4742-ba4e-53c379ebfa18" :uuid])]}
2023-12-16T14:15:40.492Z NX-41294 DEBUG [leihs.procurement.resources.budget-periods:?] - (sql-format (budget-periods-query (spy args))) => ["SELECT * FROM procurement_budget_periods WHERE procurement_budget_periods.id IN (CAST(? AS UUID)) ORDER BY end_date DESC" "e9c699ec-46eb-4742-ba4e-53c379ebfa18"]
2023-12-16T14:15:40.514Z NX-41294 DEBUG [leihs.procurement.resources.budget-periods:65] - (jdbc/execute! (-> context :request :tx-next) (-> (spy args) budget-periods-query sql-format spy)) => [{:id #uuid "e9c699ec-46eb-4742-ba4e-53c379ebfa18", :name "PoseidonGaia", :inspection_start_date #inst "2024-01-15T14:15:40.143178000-00:00", :end_date #inst "2024-03-15T14:15:40.143296000-00:00", :created_at #inst "2023-12-16T14:15:40.143609000-00:00", :updated_at #inst "2023-12-16T14:15:40.143609000-00:00"}]
>>1x #next.jdbc.default_options.DefaultOptions{:connectable #object[com.zaxxer.hikari.HikariDataSource 0x5bbb0d7f HikariDataSource (HikariPool-1)], :options {:builder-fn #object[next.jdbc.result_set$as_unqualified_lower_maps 0x3db93dbb next.jdbc.result_set$as_unqualified_lower_maps@3db93dbb]}}
>>2x {:email amelia@rosenbaum.name, :contracts_count 0, :lastname Kemmer, :org_id nil, :scope_read true, :is_admin false, :authentication-method :session, :login nil, :scope_system_admin_write false, :scope_write true, :firstname Dawna, :scope_admin_write false, :user_session_created_at #time/instant "2023-12-16T14:15:40.439961Z", :id #uuid "9424e289-f4e0-4122-8b6f-e646111cd8eb", :user_session_id #uuid "4ec326a2-1ae3-4cd9-8bb7-e0b22b02b8c9", :scope_system_admin_read false, :access-rights (), :user_id #uuid "9424e289-f4e0-4122-8b6f-e646111cd8eb", :is_system_admin false, :external_sign_out_url nil, :language_locale nil, :inventory_pool_roles_count 0, :scope_admin_read false}
2023-12-16T14:15:40.515Z NX-41294 DEBUG [leihs.procurement.permissions.user:?] - (sql-format (sql/select [[:exists (-> (sql/select [true :exists]) (sql/from :procurement_admins) (sql/where [:= :procurement_admins.user_id [:cast (:user_id auth-entity) :uuid]]))]])) => ["SELECT EXISTS (SELECT TRUE AS exists FROM procurement_admins WHERE procurement_admins.user_id = CAST(? AS UUID))" #uuid "9424e289-f4e0-4122-8b6f-e646111cd8eb"]
>o> admin? [SELECT EXISTS (SELECT TRUE AS exists FROM procurement_admins WHERE procurement_admins.user_id = CAST(? AS UUID)) #uuid "9424e289-f4e0-4122-8b6f-e646111cd8eb"]
2023-12-16T14:15:40.515Z NX-41294 DEBUG [leihs.procurement.permissions.user:38] - query => ["SELECT EXISTS (SELECT TRUE AS exists FROM procurement_admins WHERE procurement_admins.user_id = CAST(? AS UUID))" #uuid "9424e289-f4e0-4122-8b6f-e646111cd8eb"]
>o> admin? {:exists true}
2023-12-16T14:15:40.515Z NX-41294 DEBUG [leihs.procurement.permissions.user:42] - (:exists result) => true
>oo> total-price-cents-inspected-requests {:id #uuid "e9c699ec-46eb-4742-ba4e-53c379ebfa18", :name PoseidonGaia, :inspection_start_date #inst "2024-01-15T14:15:40.143178000-00:00", :end_date #inst "2024-03-15T14:15:40.143296000-00:00", :created_at #inst "2023-12-16T14:15:40.143609000-00:00", :updated_at #inst "2023-12-16T14:15:40.143609000-00:00"}
>oo> bp-id #uuid "e9c699ec-46eb-4742-ba4e-53c379ebfa18"
>oo> total-price-sqlmap [[:coalesce :procurement_requests.order_quantity :procurement_requests.approved_quantity]]
>oo> sql-sum [[:coalesce :procurement_requests.order_quantity :procurement_requests.approved_quantity]]
2023-12-16T14:15:40.516Z NX-41294 DEBUG [leihs.procurement.resources.requests:435] - (as-> qty-type <> [:* :procurement_requests.price_cents <>] [:cast <> :bigint] [:sum <>]) => [:sum [:cast [:* :procurement_requests.price_cents [[:coalesce :procurement_requests.order_quantity :procurement_requests.approved_quantity]]] :bigint]]
2023-12-16T14:15:40.516Z NX-41294 DEBUG [leihs.procurement.resources.requests:470] - (-> (sql/select :procurement_requests.budget_period_id [(sql-sum qty-type) :result]) (sql/from :procurement_requests) (sql/where [:= :procurement_requests.budget_period_id [:cast bp-id :uuid]]) (sql/group-by :procurement_requests.budget_period_id)) => {:select [:procurement_requests.budget_period_id [[:sum [:cast [:* :procurement_requests.price_cents [[:coalesce :procurement_requests.order_quantity :procurement_requests.approved_quantity]]] :bigint]] :result]], :from [:procurement_requests], :where [:= :procurement_requests.budget_period_id [:cast #uuid "e9c699ec-46eb-4742-ba4e-53c379ebfa18" :uuid]], :group-by [:procurement_requests.budget_period_id]}
>oo> get-total-price-cents {:select [:procurement_requests.budget_period_id [[:sum [:cast [:* :procurement_requests.price_cents [[:coalesce :procurement_requests.order_quantity :procurement_requests.approved_quantity]]] :bigint]] :result]], :from [:procurement_requests], :where [:and [:= :procurement_requests.budget_period_id [:cast #uuid "e9c699ec-46eb-4742-ba4e-53c379ebfa18" :uuid]] [:!= :procurement_requests.approved_quantity nil]], :group-by [:procurement_requests.budget_period_id]}
2023-12-16T14:15:40.535Z NX-41294 DEBUG [leihs.procurement.resources.requests:423] - (some->> sqlmap sql-format (jdbc/execute-one! tx) :result) => 400M

>request-grapql _> request {:leihs-user-language {:name English (UK), :locale en-GB, :default true, :active true}, :authenticated-entity {:email amelia@rosenbaum.name, :contracts_count 0, :lastname Kemmer, :org_id nil, :scope_read true, :is_admin false, :authentication-method :session, :login nil, :scope_system_admin_write false, :scope_write true, :firstname Dawna, :scope_admin_write false, :user_session_created_at #time/instant "2023-12-16T14:15:40.439961Z", :id #uuid "9424e289-f4e0-4122-8b6f-e646111cd8eb", :user_session_id #uuid "4ec326a2-1ae3-4cd9-8bb7-e0b22b02b8c9", :scope_system_admin_read false, :access-rights (), :user_id #uuid "9424e289-f4e0-4122-8b6f-e646111cd8eb", :is_system_admin false, :external_sign_out_url nil, :language_locale nil, :inventory_pool_roles_count 0, :scope_admin_read false}, :cookies {leihs-anti-csrf-token {:value 5206b79a-86a0-490e-87a1-cd5e6c117a8b}, leihs-user-session {:value 3a8de393-ae98-4a84-982b-1fb69991c8f1}}, :remote-addr 127.0.0.1, :start-time 228381300879375, :params {}, :settings {:email_sending_enabled false, :sessions_max_lifetime_secs 432000, :smtp_default_from_address your.lending.desk@example.com, :public_image_caching_enabled true, :sessions_force_secure false, :deliver_received_order_notifications false, :external_base_url nil, :sessions_force_uniqueness false, :email_signature Cheers,}, :tx-next #next.jdbc.default_options.DefaultOptions{:connectable #object[com.zaxxer.hikari.HikariDataSource 0x5bbb0d7f HikariDataSource (HikariPool-1)], :options {:builder-fn #object[next.jdbc.result_set$as_unqualified_lower_maps 0x3db93dbb next.jdbc.result_set$as_unqualified_lower_maps@3db93dbb]}}, :query-params-raw {}, :route-params nil, :headers {accept application/json, accept-encoding gzip;q=1.0,deflate;q=0.6,identity;q=0.3, content-length 210, content-type application/json, cookie leihs-anti-csrf-token=5206b79a-86a0-490e-87a1-cd5e6c117a8b; leihs-user-session=3a8de393-ae98-4a84-982b-1fb69991c8f1, host localhost:3230, user-agent Faraday v2.7.1, x-csrf-token 5206b79a-86a0-490e-87a1-cd5e6c117a8b}, :async-channel #object[org.httpkit.server.AsyncChannel 0x7f9e06a7 /127.0.0.1:3230<->/127.0.0.1:55853], :server-port 3230, :params-raw {}, :tx {:datasource #object[com.zaxxer.hikari.HikariDataSource 0x18d95122 HikariDataSource (db-pool)]}, :content-length 210, :form-params {}, :websocket? false, :query-params {}, :content-type application/json, :form-params-raw {}, :character-encoding utf8, :uri /procure/graphql, :server-name localhost, :handler-key :graphql, :query-string nil, :body {:query         query {
          budget_periods(id: ["e9c699ec-46eb-4742-ba4e-53c379ebfa18"]) {
            id
            total_price_cents_inspected_requests
          }
        }
, :variables {}}, :graphql-schema #CompiledSchema<>, :handler #object[leihs.procurement.graphql$handler 0x36e39341 leihs.procurement.graphql$handler@36e39341], :multipart-params {}, :scheme :http, :request-method :post, :accept {:mime :json, :charset nil, :encoding nil, :language nil}}

>request-c-grapql _> request (json) {"leihs-user-language":{"name":"English (UK)","locale":"en-GB","default":true,"active":true},"authenticated-entity":{"email":"amelia@rosenbaum.name","contracts_count":0,"lastname":"Kemmer","org_id":null,"scope_read":true,"is_admin":false,"authentication-method":"session","login":null,"scope_system_admin_write":false,"scope_write":true,"firstname":"Dawna","scope_admin_write":false,"user_session_created_at":"2023-12-16T14:15:40.439961Z","id":"9424e289-f4e0-4122-8b6f-e646111cd8eb","user_session_id":"4ec326a2-1ae3-4cd9-8bb7-e0b22b02b8c9","scope_system_admin_read":false,"access-rights":[],"user_id":"9424e289-f4e0-4122-8b6f-e646111cd8eb","is_system_admin":false,"external_sign_out_url":null,"language_locale":null,"inventory_pool_roles_count":0,"scope_admin_read":false},"cookies":{"leihs-anti-csrf-token":{"value":"5206b79a-86a0-490e-87a1-cd5e6c117a8b"},"leihs-user-session":{"value":"3a8de393-ae98-4a84-982b-1fb69991c8f1"}},"remote-addr":"127.0.0.1","start-time":228381300879375,"params":{},"settings":{"email_sending_enabled":false,"sessions_max_lifetime_secs":432000,"smtp_default_from_address":"your.lending.desk@example.com","public_image_caching_enabled":true,"sessions_force_secure":false,"deliver_received_order_notifications":false,"external_base_url":null,"sessions_force_uniqueness":false,"email_signature":"Cheers,"},"query-params-raw":{},"route-params":null,"headers":{"accept":"application\/json","accept-encoding":"gzip;q=1.0,deflate;q=0.6,identity;q=0.3","content-length":"210","content-type":"application\/json","cookie":"leihs-anti-csrf-token=5206b79a-86a0-490e-87a1-cd5e6c117a8b; leihs-user-session=3a8de393-ae98-4a84-982b-1fb69991c8f1","host":"localhost:3230","user-agent":"Faraday v2.7.1","x-csrf-token":"5206b79a-86a0-490e-87a1-cd5e6c117a8b"},"server-port":3230,"params-raw":{},"content-length":210,"form-params":{},"websocket?":false,"query-params":{},"content-type":"application\/json","form-params-raw":{},"character-encoding":"utf8","uri":"\/procure\/graphql","server-name":"localhost","handler-key":"graphql","query-string":null,"body":{"query":"        query {\n          budget_periods(id: [\"e9c699ec-46eb-4742-ba4e-53c379ebfa18\"]) {\n            id\n            total_price_cents_inspected_requests\n          }\n        }\n","variables":{}},"multipart-params":{},"scheme":"http","request-method":"post","accept":{"mime":"json","charset":null,"encoding":null,"language":null}}

>request-grapql _> result => {:data #ordered/map ([:budget_periods [#ordered/map ([:id e9c699ec-46eb-4742-ba4e-53c379ebfa18] [:total_price_cents_inspected_requests 400])]])}
2023-12-16T14:15:40.536Z NX-41294 DEBUG [leihs.procurement.graphql:86] - result => {:data #ordered/map ([:budget_periods [#ordered/map ([:id "e9c699ec-46eb-4742-ba4e-53c379ebfa18"] [:total_price_cents_inspected_requests "400"])]])}
>>> authenticate::skip= true  handler-key= :sign-in
>>> authenticate::authenticated-entity nil

>> authorize >

>> authorize::handler > #object[leihs.core.locale$wrap$fn__45448 0x2031e135 leihs.core.locale$wrap$fn__45448@2031e135]

>> authorize::request > {:cookies {}, :remote-addr 127.0.0.1, :start-time 228381756411500, :params {}, :settings {:email_sending_enabled false, :sessions_max_lifetime_secs 432000, :smtp_default_from_address your.lending.desk@example.com, :public_image_caching_enabled true, :sessions_force_secure false, :deliver_received_order_notifications false, :external_base_url nil, :sessions_force_uniqueness false, :email_signature Cheers,}, :tx-next #next.jdbc.default_options.DefaultOptions{:connectable #object[com.zaxxer.hikari.HikariDataSource 0x5bbb0d7f HikariDataSource (HikariPool-1)], :options {:builder-fn #object[next.jdbc.result_set$as_unqualified_lower_maps 0x3db93dbb next.jdbc.result_set$as_unqualified_lower_maps@3db93dbb]}}, :query-params-raw {}, :route-params nil, :headers {accept */*, accept-encoding gzip;q=1.0,deflate;q=0.6,identity;q=0.3, host localhost:3230, user-agent Faraday v2.7.1}, :async-channel #object[org.httpkit.server.AsyncChannel 0x389f7e46 /127.0.0.1:3230<->/127.0.0.1:55859], :server-port 3230, :params-raw {}, :tx {:datasource #object[com.zaxxer.hikari.HikariDataSource 0x18d95122 HikariDataSource (db-pool)]}, :content-length 0, :form-params {}, :websocket? false, :query-params {}, :content-type nil, :form-params-raw {}, :character-encoding utf8, :uri /sign-in, :server-name localhost, :handler-key :sign-in, :query-string nil, :body nil, :graphql-schema #CompiledSchema<>, :handler #object[compojure.core$routes$fn__27950 0x17459cfd compojure.core$routes$fn__27950@17459cfd], :multipart-params {}, :scheme :http, :request-method :get, :accept {:mime :html, :charset nil, :encoding nil, :language nil}}

>> authorize::handler-key >> :sign-in
>myprint>  authEnt? nil
>myprint>  txn #next.jdbc.default_options.DefaultOptions{:connectable #object[com.zaxxer.hikari.HikariDataSource 0x5bbb0d7f HikariDataSource (HikariPool-1)], :options {:builder-fn #object[next.jdbc.result_set$as_unqualified_lower_maps 0x3db93dbb next.jdbc.result_set$as_unqualified_lower_maps@3db93dbb]}}
2023-12-16T14:15:40.933Z NX-41294 DEBUG [leihs.procurement.permissions.user:?] - (sql-format (sql/select [[:exists (-> (sql/select [true :exists]) (sql/from :procurement_admins) (sql/where [:= :procurement_admins.user_id [:cast (:user_id auth-entity) :uuid]]))]])) => ["SELECT EXISTS (SELECT TRUE AS exists FROM procurement_admins WHERE procurement_admins.user_id = CAST(NULL AS UUID))"]
>o> admin? [SELECT EXISTS (SELECT TRUE AS exists FROM procurement_admins WHERE procurement_admins.user_id = CAST(NULL AS UUID))]
2023-12-16T14:15:40.934Z NX-41294 DEBUG [leihs.procurement.permissions.user:38] - query => ["SELECT EXISTS (SELECT TRUE AS exists FROM procurement_admins WHERE procurement_admins.user_id = CAST(NULL AS UUID))"]
>o> admin? {:exists false}
2023-12-16T14:15:40.934Z NX-41294 DEBUG [leihs.procurement.permissions.user:42] - (:exists result) => false
>myprint>  admin false
>o> inspector? [SELECT EXISTS (SELECT TRUE AS exists FROM procurement_category_inspectors WHERE procurement_category_inspectors.user_id = CAST(NULL AS UUID)) AS result]
2023-12-16T14:15:40.935Z NX-41294 DEBUG [leihs.procurement.permissions.user:62] - query => ["SELECT EXISTS (SELECT TRUE AS exists FROM procurement_category_inspectors WHERE procurement_category_inspectors.user_id = CAST(NULL AS UUID)) AS result"]
>o> inspector? {:result false}
>myprint>  inspector false
>o> viewer? [SELECT EXISTS (SELECT TRUE AS exists FROM procurement_category_viewers WHERE procurement_category_viewers.user_id = CAST(NULL AS UUID)) AS result]
2023-12-16T14:15:40.939Z NX-41294 DEBUG [leihs.procurement.permissions.user:85] - query => ["SELECT EXISTS (SELECT TRUE AS exists FROM procurement_category_viewers WHERE procurement_category_viewers.user_id = CAST(NULL AS UUID)) AS result"]
>o> viewer? {:result false}
>myprint>  viewer false
>o> requester?? [SELECT EXISTS (SELECT TRUE AS exists FROM procurement_requesters_organizations WHERE procurement_requesters_organizations.user_id = CAST(NULL AS UUID))]
2023-12-16T14:15:40.940Z NX-41294 DEBUG [leihs.procurement.permissions.user:169] - query => ["SELECT EXISTS (SELECT TRUE AS exists FROM procurement_requesters_organizations WHERE procurement_requesters_organizations.user_id = CAST(NULL AS UUID))"]
>o> requester?? {:exists false}
2023-12-16T14:15:40.941Z NX-41294 DEBUG [leihs.procurement.permissions.user:173] - (:exists result) => false
>myprint>  requester false
>>> authenticate::skip= true  handler-key= :sign-in
>>> authenticate::authenticated-entity nil

>> authorize >

>> authorize::handler > #object[leihs.core.locale$wrap$fn__45448 0x2031e135 leihs.core.locale$wrap$fn__45448@2031e135]

>> authorize::request > {:cookies {leihs-anti-csrf-token {:value 7b64ff2f-6a1a-4bec-b0bf-60516d8be8bf}}, :remote-addr 127.0.0.1, :start-time 228381803604541, :params {:password password, :user gil.lehner@skiles-hessel.biz}, :settings {:email_sending_enabled false, :sessions_max_lifetime_secs 432000, :smtp_default_from_address your.lending.desk@example.com, :public_image_caching_enabled true, :sessions_force_secure false, :deliver_received_order_notifications false, :external_base_url nil, :sessions_force_uniqueness false, :email_signature Cheers,}, :tx-next #next.jdbc.default_options.DefaultOptions{:connectable #object[com.zaxxer.hikari.pool.HikariProxyConnection 0x3b94c4a6 HikariProxyConnection@999605414 wrapping org.postgresql.jdbc.PgConnection@72b35f05], :options {:builder-fn #object[next.jdbc.result_set$as_unqualified_lower_maps 0x3db93dbb next.jdbc.result_set$as_unqualified_lower_maps@3db93dbb]}}, :query-params-raw {}, :route-params nil, :headers {accept */*, accept-encoding gzip;q=1.0,deflate;q=0.6,identity;q=0.3, content-length 53, content-type application/x-www-form-urlencoded, cookie leihs-anti-csrf-token=7b64ff2f-6a1a-4bec-b0bf-60516d8be8bf, host localhost:3230, user-agent Faraday v2.7.1, x-csrf-token 7b64ff2f-6a1a-4bec-b0bf-60516d8be8bf}, :async-channel #object[org.httpkit.server.AsyncChannel 0x11ae5029 /127.0.0.1:3230<->/127.0.0.1:55860], :server-port 3230, :params-raw {:password password, :user gil.lehner@skiles-hessel.biz}, :tx {:datasource #object[com.zaxxer.hikari.HikariDataSource 0x18d95122 HikariDataSource (db-pool)], :connection #object[com.zaxxer.hikari.pool.HikariProxyConnection 0x62c80457 HikariProxyConnection@1657275479 wrapping org.postgresql.jdbc.PgConnection@68f5f480], :level 1, :rollback #object[clojure.lang.Atom 0x51a5522f {:status :ready, :val false}]}, :content-length 53, :form-params {:password password, :user gil.lehner@skiles-hessel.biz}, :websocket? false, :query-params {}, :content-type application/x-www-form-urlencoded, :form-params-raw {:password password, :user gil.lehner@skiles-hessel.biz}, :character-encoding utf8, :uri /sign-in, :server-name localhost, :handler-key :sign-in, :query-string nil, :body #object[org.httpkit.BytesInputStream 0x4c090d49 BytesInputStream[len=53]], :graphql-schema #CompiledSchema<>, :handler #object[compojure.core$routes$fn__27950 0x17459cfd compojure.core$routes$fn__27950@17459cfd], :multipart-params {}, :scheme :http, :request-method :post, :accept {:mime :html, :charset nil, :encoding nil, :language nil}}

>> authorize::handler-key >> :sign-in
>myprint>  authEnt? nil
>myprint>  txn #next.jdbc.default_options.DefaultOptions{:connectable #object[com.zaxxer.hikari.pool.HikariProxyConnection 0x3b94c4a6 HikariProxyConnection@999605414 wrapping org.postgresql.jdbc.PgConnection@72b35f05], :options {:builder-fn #object[next.jdbc.result_set$as_unqualified_lower_maps 0x3db93dbb next.jdbc.result_set$as_unqualified_lower_maps@3db93dbb]}}
2023-12-16T14:15:40.972Z NX-41294 DEBUG [leihs.procurement.permissions.user:?] - (sql-format (sql/select [[:exists (-> (sql/select [true :exists]) (sql/from :procurement_admins) (sql/where [:= :procurement_admins.user_id [:cast (:user_id auth-entity) :uuid]]))]])) => ["SELECT EXISTS (SELECT TRUE AS exists FROM procurement_admins WHERE procurement_admins.user_id = CAST(NULL AS UUID))"]
>o> admin? [SELECT EXISTS (SELECT TRUE AS exists FROM procurement_admins WHERE procurement_admins.user_id = CAST(NULL AS UUID))]
2023-12-16T14:15:40.972Z NX-41294 DEBUG [leihs.procurement.permissions.user:38] - query => ["SELECT EXISTS (SELECT TRUE AS exists FROM procurement_admins WHERE procurement_admins.user_id = CAST(NULL AS UUID))"]
>o> admin? {:exists false}
2023-12-16T14:15:40.972Z NX-41294 DEBUG [leihs.procurement.permissions.user:42] - (:exists result) => false
>myprint>  admin false
>o> inspector? [SELECT EXISTS (SELECT TRUE AS exists FROM procurement_category_inspectors WHERE procurement_category_inspectors.user_id = CAST(NULL AS UUID)) AS result]
2023-12-16T14:15:40.973Z NX-41294 DEBUG [leihs.procurement.permissions.user:62] - query => ["SELECT EXISTS (SELECT TRUE AS exists FROM procurement_category_inspectors WHERE procurement_category_inspectors.user_id = CAST(NULL AS UUID)) AS result"]
>o> inspector? {:result false}
>myprint>  inspector false
>o> viewer? [SELECT EXISTS (SELECT TRUE AS exists FROM procurement_category_viewers WHERE procurement_category_viewers.user_id = CAST(NULL AS UUID)) AS result]
2023-12-16T14:15:40.973Z NX-41294 DEBUG [leihs.procurement.permissions.user:85] - query => ["SELECT EXISTS (SELECT TRUE AS exists FROM procurement_category_viewers WHERE procurement_category_viewers.user_id = CAST(NULL AS UUID)) AS result"]
>o> viewer? {:result false}
>myprint>  viewer false
>o> requester?? [SELECT EXISTS (SELECT TRUE AS exists FROM procurement_requesters_organizations WHERE procurement_requesters_organizations.user_id = CAST(NULL AS UUID))]
2023-12-16T14:15:40.974Z NX-41294 DEBUG [leihs.procurement.permissions.user:169] - query => ["SELECT EXISTS (SELECT TRUE AS exists FROM procurement_requesters_organizations WHERE procurement_requesters_organizations.user_id = CAST(NULL AS UUID))"]
>o> requester?? {:exists false}
2023-12-16T14:15:40.974Z NX-41294 DEBUG [leihs.procurement.permissions.user:173] - (:exists result) => false
>myprint>  requester false
>>> authenticate::skip= nil  handler-key= :graphql
>>> authenticate::authenticated-entity {:email gil.lehner@skiles-hessel.biz, :contracts_count 0, :lastname Dare, :org_id nil, :scope_read true, :is_admin false, :authentication-method :session, :login nil, :scope_system_admin_write false, :scope_write true, :firstname Lauran, :scope_admin_write false, :user_session_created_at #time/instant "2023-12-16T14:15:40.984341Z", :id #uuid "e2049b76-6ef1-417e-97cb-25daa3591cb9", :user_session_id #uuid "0485aa3c-36ff-408b-9757-e2b4030ca905", :scope_system_admin_read false, :access-rights (), :user_id #uuid "e2049b76-6ef1-417e-97cb-25daa3591cb9", :is_system_admin false, :external_sign_out_url nil, :language_locale nil, :inventory_pool_roles_count 0, :scope_admin_read false}

>> authorize >

>> authorize::handler > #object[leihs.core.locale$wrap$fn__45448 0x2031e135 leihs.core.locale$wrap$fn__45448@2031e135]

>> authorize::request > {:authenticated-entity {:email gil.lehner@skiles-hessel.biz, :contracts_count 0, :lastname Dare, :org_id nil, :scope_read true, :is_admin false, :authentication-method :session, :login nil, :scope_system_admin_write false, :scope_write true, :firstname Lauran, :scope_admin_write false, :user_session_created_at #time/instant "2023-12-16T14:15:40.984341Z", :id #uuid "e2049b76-6ef1-417e-97cb-25daa3591cb9", :user_session_id #uuid "0485aa3c-36ff-408b-9757-e2b4030ca905", :scope_system_admin_read false, :access-rights (), :user_id #uuid "e2049b76-6ef1-417e-97cb-25daa3591cb9", :is_system_admin false, :external_sign_out_url nil, :language_locale nil, :inventory_pool_roles_count 0, :scope_admin_read false}, :cookies {leihs-anti-csrf-token {:value 7b64ff2f-6a1a-4bec-b0bf-60516d8be8bf}, leihs-user-session {:value c58bf8f9-bc49-4ac3-a429-8fd739e7d95a}}, :remote-addr 127.0.0.1, :start-time 228381833542208, :params {}, :settings {:email_sending_enabled false, :sessions_max_lifetime_secs 432000, :smtp_default_from_address your.lending.desk@example.com, :public_image_caching_enabled true, :sessions_force_secure false, :deliver_received_order_notifications false, :external_base_url nil, :sessions_force_uniqueness false, :email_signature Cheers,}, :tx-next #next.jdbc.default_options.DefaultOptions{:connectable #object[com.zaxxer.hikari.HikariDataSource 0x5bbb0d7f HikariDataSource (HikariPool-1)], :options {:builder-fn #object[next.jdbc.result_set$as_unqualified_lower_maps 0x3db93dbb next.jdbc.result_set$as_unqualified_lower_maps@3db93dbb]}}, :query-params-raw {}, :route-params nil, :headers {accept application/json, accept-encoding gzip;q=1.0,deflate;q=0.6,identity;q=0.3, content-length 168, content-type application/json, cookie leihs-anti-csrf-token=7b64ff2f-6a1a-4bec-b0bf-60516d8be8bf; leihs-user-session=c58bf8f9-bc49-4ac3-a429-8fd739e7d95a, host localhost:3230, user-agent Faraday v2.7.1, x-csrf-token 7b64ff2f-6a1a-4bec-b0bf-60516d8be8bf}, :async-channel #object[org.httpkit.server.AsyncChannel 0x6aa4be58 /127.0.0.1:3230<->/127.0.0.1:55861], :server-port 3230, :params-raw {}, :tx {:datasource #object[com.zaxxer.hikari.HikariDataSource 0x18d95122 HikariDataSource (db-pool)]}, :content-length 168, :form-params {}, :websocket? false, :query-params {}, :content-type application/json, :form-params-raw {}, :character-encoding utf8, :uri /procure/graphql, :server-name localhost, :handler-key :graphql, :query-string nil, :body {:query           query {
            budget_periods {
              id
              total_price_cents_new_requests
            }
          }
, :variables {}}, :graphql-schema #CompiledSchema<>, :handler #object[leihs.procurement.graphql$handler 0x36e39341 leihs.procurement.graphql$handler@36e39341], :multipart-params {}, :scheme :http, :request-method :post, :accept {:mime :json, :charset nil, :encoding nil, :language nil}}

>> authorize::handler-key >> :graphql
>myprint>  authEnt? {:email gil.lehner@skiles-hessel.biz, :contracts_count 0, :lastname Dare, :org_id nil, :scope_read true, :is_admin false, :authentication-method :session, :login nil, :scope_system_admin_write false, :scope_write true, :firstname Lauran, :scope_admin_write false, :user_session_created_at #time/instant "2023-12-16T14:15:40.984341Z", :id #uuid "e2049b76-6ef1-417e-97cb-25daa3591cb9", :user_session_id #uuid "0485aa3c-36ff-408b-9757-e2b4030ca905", :scope_system_admin_read false, :access-rights (), :user_id #uuid "e2049b76-6ef1-417e-97cb-25daa3591cb9", :is_system_admin false, :external_sign_out_url nil, :language_locale nil, :inventory_pool_roles_count 0, :scope_admin_read false}
>myprint>  txn #next.jdbc.default_options.DefaultOptions{:connectable #object[com.zaxxer.hikari.HikariDataSource 0x5bbb0d7f HikariDataSource (HikariPool-1)], :options {:builder-fn #object[next.jdbc.result_set$as_unqualified_lower_maps 0x3db93dbb next.jdbc.result_set$as_unqualified_lower_maps@3db93dbb]}}
2023-12-16T14:15:41.010Z NX-41294 DEBUG [leihs.procurement.permissions.user:?] - (sql-format (sql/select [[:exists (-> (sql/select [true :exists]) (sql/from :procurement_admins) (sql/where [:= :procurement_admins.user_id [:cast (:user_id auth-entity) :uuid]]))]])) => ["SELECT EXISTS (SELECT TRUE AS exists FROM procurement_admins WHERE procurement_admins.user_id = CAST(? AS UUID))" #uuid "e2049b76-6ef1-417e-97cb-25daa3591cb9"]
>o> admin? [SELECT EXISTS (SELECT TRUE AS exists FROM procurement_admins WHERE procurement_admins.user_id = CAST(? AS UUID)) #uuid "e2049b76-6ef1-417e-97cb-25daa3591cb9"]
2023-12-16T14:15:41.010Z NX-41294 DEBUG [leihs.procurement.permissions.user:38] - query => ["SELECT EXISTS (SELECT TRUE AS exists FROM procurement_admins WHERE procurement_admins.user_id = CAST(? AS UUID))" #uuid "e2049b76-6ef1-417e-97cb-25daa3591cb9"]
>o> admin? {:exists false}
2023-12-16T14:15:41.011Z NX-41294 DEBUG [leihs.procurement.permissions.user:42] - (:exists result) => false
>myprint>  admin false
>o> inspector? [SELECT EXISTS (SELECT TRUE AS exists FROM procurement_category_inspectors WHERE procurement_category_inspectors.user_id = CAST(? AS UUID)) AS result #uuid "e2049b76-6ef1-417e-97cb-25daa3591cb9"]
2023-12-16T14:15:41.011Z NX-41294 DEBUG [leihs.procurement.permissions.user:62] - query => ["SELECT EXISTS (SELECT TRUE AS exists FROM procurement_category_inspectors WHERE procurement_category_inspectors.user_id = CAST(? AS UUID)) AS result" #uuid "e2049b76-6ef1-417e-97cb-25daa3591cb9"]
>o> inspector? {:result true}
>myprint>  inspector true
>o> viewer? [SELECT EXISTS (SELECT TRUE AS exists FROM procurement_category_viewers WHERE procurement_category_viewers.user_id = CAST(? AS UUID)) AS result #uuid "e2049b76-6ef1-417e-97cb-25daa3591cb9"]
2023-12-16T14:15:41.011Z NX-41294 DEBUG [leihs.procurement.permissions.user:85] - query => ["SELECT EXISTS (SELECT TRUE AS exists FROM procurement_category_viewers WHERE procurement_category_viewers.user_id = CAST(? AS UUID)) AS result" #uuid "e2049b76-6ef1-417e-97cb-25daa3591cb9"]
>o> viewer? {:result false}
>myprint>  viewer false
>o> requester?? [SELECT EXISTS (SELECT TRUE AS exists FROM procurement_requesters_organizations WHERE procurement_requesters_organizations.user_id = CAST(? AS UUID)) #uuid "e2049b76-6ef1-417e-97cb-25daa3591cb9"]
2023-12-16T14:15:41.012Z NX-41294 DEBUG [leihs.procurement.permissions.user:169] - query => ["SELECT EXISTS (SELECT TRUE AS exists FROM procurement_requesters_organizations WHERE procurement_requesters_organizations.user_id = CAST(? AS UUID))" #uuid "e2049b76-6ef1-417e-97cb-25daa3591cb9"]
>o> requester?? {:exists false}
2023-12-16T14:15:41.012Z NX-41294 DEBUG [leihs.procurement.permissions.user:173] - (:exists result) => false
>myprint>  requester false
2023-12-16T14:15:41.012Z NX-41294 DEBUG [leihs.procurement.permissions.user:?] - (sql-format (sql/select [[:exists (-> (sql/select [true :exists]) (sql/from :procurement_admins) (sql/where [:= :procurement_admins.user_id [:cast (:user_id auth-entity) :uuid]]))]])) => ["SELECT EXISTS (SELECT TRUE AS exists FROM procurement_admins WHERE procurement_admins.user_id = CAST(? AS UUID))" #uuid "e2049b76-6ef1-417e-97cb-25daa3591cb9"]
>o> admin? [SELECT EXISTS (SELECT TRUE AS exists FROM procurement_admins WHERE procurement_admins.user_id = CAST(? AS UUID)) #uuid "e2049b76-6ef1-417e-97cb-25daa3591cb9"]
2023-12-16T14:15:41.012Z NX-41294 DEBUG [leihs.procurement.permissions.user:38] - query => ["SELECT EXISTS (SELECT TRUE AS exists FROM procurement_admins WHERE procurement_admins.user_id = CAST(? AS UUID))" #uuid "e2049b76-6ef1-417e-97cb-25daa3591cb9"]
>o> admin? {:exists false}
2023-12-16T14:15:41.013Z NX-41294 DEBUG [leihs.procurement.permissions.user:42] - (:exists result) => false
>o> inspector? [SELECT EXISTS (SELECT TRUE AS exists FROM procurement_category_inspectors WHERE procurement_category_inspectors.user_id = CAST(? AS UUID)) AS result #uuid "e2049b76-6ef1-417e-97cb-25daa3591cb9"]
2023-12-16T14:15:41.013Z NX-41294 DEBUG [leihs.procurement.permissions.user:62] - query => ["SELECT EXISTS (SELECT TRUE AS exists FROM procurement_category_inspectors WHERE procurement_category_inspectors.user_id = CAST(? AS UUID)) AS result" #uuid "e2049b76-6ef1-417e-97cb-25daa3591cb9"]
>o> inspector? {:result true}
>o> viewer? [SELECT EXISTS (SELECT TRUE AS exists FROM procurement_category_viewers WHERE procurement_category_viewers.user_id = CAST(? AS UUID)) AS result #uuid "e2049b76-6ef1-417e-97cb-25daa3591cb9"]
2023-12-16T14:15:41.013Z NX-41294 DEBUG [leihs.procurement.permissions.user:85] - query => ["SELECT EXISTS (SELECT TRUE AS exists FROM procurement_category_viewers WHERE procurement_category_viewers.user_id = CAST(? AS UUID)) AS result" #uuid "e2049b76-6ef1-417e-97cb-25daa3591cb9"]
>o> viewer? {:result false}
>o> requester?? [SELECT EXISTS (SELECT TRUE AS exists FROM procurement_requesters_organizations WHERE procurement_requesters_organizations.user_id = CAST(? AS UUID)) #uuid "e2049b76-6ef1-417e-97cb-25daa3591cb9"]
2023-12-16T14:15:41.014Z NX-41294 DEBUG [leihs.procurement.permissions.user:169] - query => ["SELECT EXISTS (SELECT TRUE AS exists FROM procurement_requesters_organizations WHERE procurement_requesters_organizations.user_id = CAST(? AS UUID))" #uuid "e2049b76-6ef1-417e-97cb-25daa3591cb9"]
>o> requester?? {:exists false}
2023-12-16T14:15:41.014Z NX-41294 DEBUG [leihs.procurement.permissions.user:173] - (:exists result) => false
pure-handler >> 2
2023-12-16T14:15:41.016Z NX-41294 DEBUG [leihs.procurement.graphql:46] - graphql query           query {
            budget_periods {
              id
              total_price_cents_new_requests
            }
          }
 with variables {}
>oo> vars from graphQL-Requst nil nil nil {}
>oo> Causes issues2 >> nil
2023-12-16T14:15:41.017Z NX-41294 DEBUG [leihs.procurement.resources.budget-periods:63] - (= (:id args) []) => false
2023-12-16T14:15:41.018Z NX-41294 DEBUG [leihs.procurement.resources.budget-periods:67] - args => nil
2023-12-16T14:15:41.018Z NX-41294 DEBUG [leihs.procurement.resources.budget-periods:38] - (:id args) => nil
2023-12-16T14:15:41.018Z NX-41294 DEBUG [leihs.procurement.resources.budget-periods:42] - (-> args :whereRequestsCanBeMovedTo empty? not) => false
2023-12-16T14:15:41.018Z NX-41294 DEBUG [leihs.procurement.resources.budget-periods:37] - (let [ids (spy (:id args))] (cond-> budget-periods-base-query ids (sql/where [:in :procurement_budget_periods.id (cast-uuids ids)]) (spy (-> args :whereRequestsCanBeMovedTo empty? not)) (sql/where [:< :current_date :procurement_budget_periods.end_date]))) => {:select [:*], :from [:procurement_budget_periods], :order-by [[:end_date :desc]]}
2023-12-16T14:15:41.018Z NX-41294 DEBUG [leihs.procurement.resources.budget-periods:?] - (sql-format (budget-periods-query (spy args))) => ["SELECT * FROM procurement_budget_periods ORDER BY end_date DESC"]
2023-12-16T14:15:41.025Z NX-41294 DEBUG [leihs.procurement.resources.budget-periods:65] - (jdbc/execute! (-> context :request :tx-next) (-> (spy args) budget-periods-query sql-format spy)) => [{:id #uuid "c67c0c5a-c10a-47dd-a91c-e976d5ee362f", :name "HephaestusUranus", :inspection_start_date #inst "2024-01-15T14:15:40.857067000-00:00", :end_date #inst "2024-03-15T14:15:40.857111000-00:00", :created_at #inst "2023-12-16T14:15:40.857254000-00:00", :updated_at #inst "2023-12-16T14:15:40.857254000-00:00"}]
>>1x #next.jdbc.default_options.DefaultOptions{:connectable #object[com.zaxxer.hikari.HikariDataSource 0x5bbb0d7f HikariDataSource (HikariPool-1)], :options {:builder-fn #object[next.jdbc.result_set$as_unqualified_lower_maps 0x3db93dbb next.jdbc.result_set$as_unqualified_lower_maps@3db93dbb]}}
>>2x {:email gil.lehner@skiles-hessel.biz, :contracts_count 0, :lastname Dare, :org_id nil, :scope_read true, :is_admin false, :authentication-method :session, :login nil, :scope_system_admin_write false, :scope_write true, :firstname Lauran, :scope_admin_write false, :user_session_created_at #time/instant "2023-12-16T14:15:40.984341Z", :id #uuid "e2049b76-6ef1-417e-97cb-25daa3591cb9", :user_session_id #uuid "0485aa3c-36ff-408b-9757-e2b4030ca905", :scope_system_admin_read false, :access-rights (), :user_id #uuid "e2049b76-6ef1-417e-97cb-25daa3591cb9", :is_system_admin false, :external_sign_out_url nil, :language_locale nil, :inventory_pool_roles_count 0, :scope_admin_read false}
2023-12-16T14:15:41.026Z NX-41294 DEBUG [leihs.procurement.permissions.user:?] - (sql-format (sql/select [[:exists (-> (sql/select [true :exists]) (sql/from :procurement_admins) (sql/where [:= :procurement_admins.user_id [:cast (:user_id auth-entity) :uuid]]))]])) => ["SELECT EXISTS (SELECT TRUE AS exists FROM procurement_admins WHERE procurement_admins.user_id = CAST(? AS UUID))" #uuid "e2049b76-6ef1-417e-97cb-25daa3591cb9"]
>o> admin? [SELECT EXISTS (SELECT TRUE AS exists FROM procurement_admins WHERE procurement_admins.user_id = CAST(? AS UUID)) #uuid "e2049b76-6ef1-417e-97cb-25daa3591cb9"]
2023-12-16T14:15:41.026Z NX-41294 DEBUG [leihs.procurement.permissions.user:38] - query => ["SELECT EXISTS (SELECT TRUE AS exists FROM procurement_admins WHERE procurement_admins.user_id = CAST(? AS UUID))" #uuid "e2049b76-6ef1-417e-97cb-25daa3591cb9"]
>o> admin? {:exists false}
2023-12-16T14:15:41.027Z NX-41294 DEBUG [leihs.procurement.permissions.user:42] - (:exists result) => false
>e> #error {
 :cause UnauthorizedException - Not authorized for this query path and arguments.
 :data {:status 403}
 :via
 [{:type clojure.lang.ExceptionInfo
   :message UnauthorizedException - Not authorized for this query path and arguments.
   :data {:status 403}
   :at [leihs.procurement.authorization$throw_unauthorized invokeStatic authorization.clj 22]}]
 :trace
 [[leihs.procurement.authorization$throw_unauthorized invokeStatic authorization.clj 22]
  [leihs.procurement.authorization$throw_unauthorized invoke authorization.clj 21]
  [leihs.procurement.authorization$wrap_ensure_one_of$fn__39324 invoke authorization.clj 40]
  [leihs.procurement.graphql.resolver$wrap_resolver_with_error$fn__45634 invoke resolver.clj 16]
  [com.walmartlabs.lacinia.schema$wrap_resolver_to_ensure_resolver_result$fn__14023 invoke schema.clj 986]
  [com.walmartlabs.lacinia.executor$invoke_resolver_for_field invokeStatic executor.clj 86]
  [com.walmartlabs.lacinia.executor$invoke_resolver_for_field invoke executor.clj 68]
  [com.walmartlabs.lacinia.executor$resolve_and_select invokeStatic executor.clj 353]
  [com.walmartlabs.lacinia.executor$resolve_and_select invoke executor.clj 234]
  [com.walmartlabs.lacinia.executor$apply_field_selection invokeStatic executor.clj 140]
  [com.walmartlabs.lacinia.executor$apply_field_selection invoke executor.clj 135]
  [com.walmartlabs.lacinia.executor$apply_selection invokeStatic executor.clj 173]
  [com.walmartlabs.lacinia.executor$apply_selection invoke executor.clj 165]
  [com.walmartlabs.lacinia.executor$execute_nested_selections$fn__17481 invoke executor.clj 197]
  [com.walmartlabs.lacinia.internal_utils$keepv$fn__12187 invoke internal_utils.clj 46]
  [clojure.core.protocols$iter_reduce invokeStatic protocols.clj 49]
  [clojure.core.protocols$fn__8170 invokeStatic protocols.clj 75]
  [clojure.core.protocols$fn__8170 invoke protocols.clj 75]
  [clojure.core.protocols$fn__8110$G__8105__8123 invoke protocols.clj 13]
  [clojure.core$reduce invokeStatic core.clj 6830]
  [clojure.core$reduce invoke core.clj 6812]
  [com.walmartlabs.lacinia.internal_utils$keepv invokeStatic internal_utils.clj 45]
  [com.walmartlabs.lacinia.internal_utils$keepv invoke internal_utils.clj 41]
  [com.walmartlabs.lacinia.executor$execute_nested_selections invokeStatic executor.clj 197]
  [com.walmartlabs.lacinia.executor$execute_nested_selections invoke executor.clj 190]
  [com.walmartlabs.lacinia.executor$resolve_and_select$selector_callback__17497 invoke executor.clj 262]
  [com.walmartlabs.lacinia.schema$floor_selector invokeStatic schema.clj 994]
  [com.walmartlabs.lacinia.schema$floor_selector invoke schema.clj 992]
  [com.walmartlabs.lacinia.schema$create_root_selector$select_unwrap_tagged_type__14049 invoke schema.clj 1156]
  [com.walmartlabs.lacinia.schema$create_root_selector$select_apply_static_type__14051 invoke schema.clj 1163]
  [com.walmartlabs.lacinia.schema$create_root_selector$select_require_single_value__14053 invoke schema.clj 1171]
  [com.walmartlabs.lacinia.schema$create_root_selector$select_bypass_if_nil__14055 invoke schema.clj 1178]
  [com.walmartlabs.lacinia.schema$assemble_selector$select_list__14063$unwrapper__14064 invoke schema.clj 1223]
  [com.walmartlabs.lacinia.schema$assemble_selector$select_list__14063$fn__14066 invoke schema.clj 1231]
  [com.walmartlabs.lacinia.internal_utils$fast_map_indexed$fn__12209 invoke internal_utils.clj 122]
  [clojure.core$mapv$fn__8468 invoke core.clj 6914]
  [clojure.lang.PersistentVector reduce PersistentVector.java 343]
  [clojure.core$reduce invokeStatic core.clj 6829]
  [clojure.core$mapv invokeStatic core.clj 6905]
  [clojure.core$mapv invoke core.clj 6905]
  [com.walmartlabs.lacinia.internal_utils$fast_map_indexed invokeStatic internal_utils.clj 121]
  [com.walmartlabs.lacinia.internal_utils$fast_map_indexed invoke internal_utils.clj 118]
  [com.walmartlabs.lacinia.schema$assemble_selector$select_list__14063 invoke schema.clj 1231]
  [com.walmartlabs.lacinia.executor$resolve_and_select$process_resolved_value__17502 invoke executor.clj 297]
  [com.walmartlabs.lacinia.executor$resolve_and_select$unwrap_resolver_result__17505$receive_resolved_value_from_field__17506 invoke executor.clj 324]
  [com.walmartlabs.lacinia.resolve.ResolverResultImpl on_deliver_BANG_ resolve.clj 135]
  [com.walmartlabs.lacinia.executor$resolve_and_select$unwrap_resolver_result__17505 invoke executor.clj 322]
  [com.walmartlabs.lacinia.executor$resolve_and_select invokeStatic executor.clj 353]
  [com.walmartlabs.lacinia.executor$resolve_and_select invoke executor.clj 234]
  [com.walmartlabs.lacinia.executor$apply_field_selection invokeStatic executor.clj 140]
  [com.walmartlabs.lacinia.executor$apply_field_selection invoke executor.clj 135]
  [com.walmartlabs.lacinia.executor$apply_selection invokeStatic executor.clj 173]
  [com.walmartlabs.lacinia.executor$apply_selection invoke executor.clj 165]
  [com.walmartlabs.lacinia.executor$execute_nested_selections$fn__17481 invoke executor.clj 197]
  [com.walmartlabs.lacinia.internal_utils$keepv$fn__12187 invoke internal_utils.clj 46]
  [clojure.lang.ArrayChunk reduce ArrayChunk.java 58]
  [clojure.core.protocols$fn__8176 invokeStatic protocols.clj 136]
  [clojure.core.protocols$fn__8176 invoke protocols.clj 124]
  [clojure.core.protocols$fn__8136$G__8131__8145 invoke protocols.clj 19]
  [clojure.core.protocols$seq_reduce invokeStatic protocols.clj 31]
  [clojure.core.protocols$fn__8168 invokeStatic protocols.clj 75]
  [clojure.core.protocols$fn__8168 invoke protocols.clj 75]
  [clojure.core.protocols$fn__8110$G__8105__8123 invoke protocols.clj 13]
  [clojure.core$reduce invokeStatic core.clj 6830]
  [clojure.core$reduce invoke core.clj 6812]
  [com.walmartlabs.lacinia.internal_utils$keepv invokeStatic internal_utils.clj 45]
  [com.walmartlabs.lacinia.internal_utils$keepv invoke internal_utils.clj 41]
  [com.walmartlabs.lacinia.executor$execute_nested_selections invokeStatic executor.clj 197]
  [com.walmartlabs.lacinia.executor$execute_nested_selections invoke executor.clj 190]
  [com.walmartlabs.lacinia.executor$execute_query$fn__17519 invoke executor.clj 400]
  [clojure.lang.AFn applyToHelper AFn.java 152]
  [clojure.lang.AFn applyTo AFn.java 144]
  [clojure.core$apply invokeStatic core.clj 667]
  [clojure.core$with_bindings_STAR_ invokeStatic core.clj 1977]
  [clojure.core$with_bindings_STAR_ doInvoke core.clj 1977]
  [clojure.lang.RestFn invoke RestFn.java 425]
  [clojure.lang.AFn applyToHelper AFn.java 156]
  [clojure.lang.RestFn applyTo RestFn.java 132]
  [clojure.core$apply invokeStatic core.clj 671]
  [clojure.core$bound_fn_STAR_$fn__5767 doInvoke core.clj 2007]
  [clojure.lang.RestFn invoke RestFn.java 397]
  [com.walmartlabs.lacinia.executor$execute_query$fn__17524 invoke executor.clj 421]
  [clojure.core$binding_conveyor_fn$fn__5772 invoke core.clj 2034]
  [clojure.lang.AFn call AFn.java 18]
  [java.util.concurrent.FutureTask run FutureTask.java 264]
  [java.util.concurrent.ThreadPoolExecutor runWorker ThreadPoolExecutor.java 1128]
  [java.util.concurrent.ThreadPoolExecutor$Worker run ThreadPoolExecutor.java 628]
  [java.lang.Thread run Thread.java 829]]}
2023-12-16T14:15:41.029Z NX-41294 WARN [leihs.procurement.graphql.resolver:326] - UnauthorizedException - Not authorized for this query path and arguments.
2023-12-16T14:15:41.030Z NX-41294 DEBUG [leihs.procurement.graphql.resolver:326] - #error {
 :cause UnauthorizedException - Not authorized for this query path and arguments.
 :data {:status 403}
 :via
 [{:type clojure.lang.ExceptionInfo
   :message UnauthorizedException - Not authorized for this query path and arguments.
   :data {:status 403}
   :at [leihs.procurement.authorization$throw_unauthorized invokeStatic authorization.clj 22]}]
 :trace
 [[leihs.procurement.authorization$throw_unauthorized invokeStatic authorization.clj 22]
  [leihs.procurement.authorization$throw_unauthorized invoke authorization.clj 21]
  [leihs.procurement.authorization$wrap_ensure_one_of$fn__39324 invoke authorization.clj 40]
  [leihs.procurement.graphql.resolver$wrap_resolver_with_error$fn__45634 invoke resolver.clj 16]
  [com.walmartlabs.lacinia.schema$wrap_resolver_to_ensure_resolver_result$fn__14023 invoke schema.clj 986]
  [com.walmartlabs.lacinia.executor$invoke_resolver_for_field invokeStatic executor.clj 86]
  [com.walmartlabs.lacinia.executor$invoke_resolver_for_field invoke executor.clj 68]
  [com.walmartlabs.lacinia.executor$resolve_and_select invokeStatic executor.clj 353]
  [com.walmartlabs.lacinia.executor$resolve_and_select invoke executor.clj 234]
  [com.walmartlabs.lacinia.executor$apply_field_selection invokeStatic executor.clj 140]
  [com.walmartlabs.lacinia.executor$apply_field_selection invoke executor.clj 135]
  [com.walmartlabs.lacinia.executor$apply_selection invokeStatic executor.clj 173]
  [com.walmartlabs.lacinia.executor$apply_selection invoke executor.clj 165]
  [com.walmartlabs.lacinia.executor$execute_nested_selections$fn__17481 invoke executor.clj 197]
  [com.walmartlabs.lacinia.internal_utils$keepv$fn__12187 invoke internal_utils.clj 46]
  [clojure.core.protocols$iter_reduce invokeStatic protocols.clj 49]
  [clojure.core.protocols$fn__8170 invokeStatic protocols.clj 75]
  [clojure.core.protocols$fn__8170 invoke protocols.clj 75]
  [clojure.core.protocols$fn__8110$G__8105__8123 invoke protocols.clj 13]
  [clojure.core$reduce invokeStatic core.clj 6830]
  [clojure.core$reduce invoke core.clj 6812]
  [com.walmartlabs.lacinia.internal_utils$keepv invokeStatic internal_utils.clj 45]
  [com.walmartlabs.lacinia.internal_utils$keepv invoke internal_utils.clj 41]
  [com.walmartlabs.lacinia.executor$execute_nested_selections invokeStatic executor.clj 197]
  [com.walmartlabs.lacinia.executor$execute_nested_selections invoke executor.clj 190]
  [com.walmartlabs.lacinia.executor$resolve_and_select$selector_callback__17497 invoke executor.clj 262]
  [com.walmartlabs.lacinia.schema$floor_selector invokeStatic schema.clj 994]
  [com.walmartlabs.lacinia.schema$floor_selector invoke schema.clj 992]
  [com.walmartlabs.lacinia.schema$create_root_selector$select_unwrap_tagged_type__14049 invoke schema.clj 1156]
  [com.walmartlabs.lacinia.schema$create_root_selector$select_apply_static_type__14051 invoke schema.clj 1163]
  [com.walmartlabs.lacinia.schema$create_root_selector$select_require_single_value__14053 invoke schema.clj 1171]
  [com.walmartlabs.lacinia.schema$create_root_selector$select_bypass_if_nil__14055 invoke schema.clj 1178]
  [com.walmartlabs.lacinia.schema$assemble_selector$select_list__14063$unwrapper__14064 invoke schema.clj 1223]
  [com.walmartlabs.lacinia.schema$assemble_selector$select_list__14063$fn__14066 invoke schema.clj 1231]
  [com.walmartlabs.lacinia.internal_utils$fast_map_indexed$fn__12209 invoke internal_utils.clj 122]
  [clojure.core$mapv$fn__8468 invoke core.clj 6914]
  [clojure.lang.PersistentVector reduce PersistentVector.java 343]
  [clojure.core$reduce invokeStatic core.clj 6829]
  [clojure.core$mapv invokeStatic core.clj 6905]
  [clojure.core$mapv invoke core.clj 6905]
  [com.walmartlabs.lacinia.internal_utils$fast_map_indexed invokeStatic internal_utils.clj 121]
  [com.walmartlabs.lacinia.internal_utils$fast_map_indexed invoke internal_utils.clj 118]
  [com.walmartlabs.lacinia.schema$assemble_selector$select_list__14063 invoke schema.clj 1231]
  [com.walmartlabs.lacinia.executor$resolve_and_select$process_resolved_value__17502 invoke executor.clj 297]
  [com.walmartlabs.lacinia.executor$resolve_and_select$unwrap_resolver_result__17505$receive_resolved_value_from_field__17506 invoke executor.clj 324]
  [com.walmartlabs.lacinia.resolve.ResolverResultImpl on_deliver_BANG_ resolve.clj 135]
  [com.walmartlabs.lacinia.executor$resolve_and_select$unwrap_resolver_result__17505 invoke executor.clj 322]
  [com.walmartlabs.lacinia.executor$resolve_and_select invokeStatic executor.clj 353]
  [com.walmartlabs.lacinia.executor$resolve_and_select invoke executor.clj 234]
  [com.walmartlabs.lacinia.executor$apply_field_selection invokeStatic executor.clj 140]
  [com.walmartlabs.lacinia.executor$apply_field_selection invoke executor.clj 135]
  [com.walmartlabs.lacinia.executor$apply_selection invokeStatic executor.clj 173]
  [com.walmartlabs.lacinia.executor$apply_selection invoke executor.clj 165]
  [com.walmartlabs.lacinia.executor$execute_nested_selections$fn__17481 invoke executor.clj 197]
  [com.walmartlabs.lacinia.internal_utils$keepv$fn__12187 invoke internal_utils.clj 46]
  [clojure.lang.ArrayChunk reduce ArrayChunk.java 58]
  [clojure.core.protocols$fn__8176 invokeStatic protocols.clj 136]
  [clojure.core.protocols$fn__8176 invoke protocols.clj 124]
  [clojure.core.protocols$fn__8136$G__8131__8145 invoke protocols.clj 19]
  [clojure.core.protocols$seq_reduce invokeStatic protocols.clj 31]
  [clojure.core.protocols$fn__8168 invokeStatic protocols.clj 75]
  [clojure.core.protocols$fn__8168 invoke protocols.clj 75]
  [clojure.core.protocols$fn__8110$G__8105__8123 invoke protocols.clj 13]
  [clojure.core$reduce invokeStatic core.clj 6830]
  [clojure.core$reduce invoke core.clj 6812]
  [com.walmartlabs.lacinia.internal_utils$keepv invokeStatic internal_utils.clj 45]
  [com.walmartlabs.lacinia.internal_utils$keepv invoke internal_utils.clj 41]
  [com.walmartlabs.lacinia.executor$execute_nested_selections invokeStatic executor.clj 197]
  [com.walmartlabs.lacinia.executor$execute_nested_selections invoke executor.clj 190]
  [com.walmartlabs.lacinia.executor$execute_query$fn__17519 invoke executor.clj 400]
  [clojure.lang.AFn applyToHelper AFn.java 152]
  [clojure.lang.AFn applyTo AFn.java 144]
  [clojure.core$apply invokeStatic core.clj 667]
  [clojure.core$with_bindings_STAR_ invokeStatic core.clj 1977]
  [clojure.core$with_bindings_STAR_ doInvoke core.clj 1977]
  [clojure.lang.RestFn invoke RestFn.java 425]
  [clojure.lang.AFn applyToHelper AFn.java 156]
  [clojure.lang.RestFn applyTo RestFn.java 132]
  [clojure.core$apply invokeStatic core.clj 671]
  [clojure.core$bound_fn_STAR_$fn__5767 doInvoke core.clj 2007]
  [clojure.lang.RestFn invoke RestFn.java 397]
  [com.walmartlabs.lacinia.executor$execute_query$fn__17524 invoke executor.clj 421]
  [clojure.core$binding_conveyor_fn$fn__5772 invoke core.clj 2034]
  [clojure.lang.AFn call AFn.java 18]
  [java.util.concurrent.FutureTask run FutureTask.java 264]
  [java.util.concurrent.ThreadPoolExecutor runWorker ThreadPoolExecutor.java 1128]
  [java.util.concurrent.ThreadPoolExecutor$Worker run ThreadPoolExecutor.java 628]
  [java.lang.Thread run Thread.java 829]]}

>request-grapql _> request {:leihs-user-language {:name English (UK), :locale en-GB, :default true, :active true}, :authenticated-entity {:email gil.lehner@skiles-hessel.biz, :contracts_count 0, :lastname Dare, :org_id nil, :scope_read true, :is_admin false, :authentication-method :session, :login nil, :scope_system_admin_write false, :scope_write true, :firstname Lauran, :scope_admin_write false, :user_session_created_at #time/instant "2023-12-16T14:15:40.984341Z", :id #uuid "e2049b76-6ef1-417e-97cb-25daa3591cb9", :user_session_id #uuid "0485aa3c-36ff-408b-9757-e2b4030ca905", :scope_system_admin_read false, :access-rights (), :user_id #uuid "e2049b76-6ef1-417e-97cb-25daa3591cb9", :is_system_admin false, :external_sign_out_url nil, :language_locale nil, :inventory_pool_roles_count 0, :scope_admin_read false}, :cookies {leihs-anti-csrf-token {:value 7b64ff2f-6a1a-4bec-b0bf-60516d8be8bf}, leihs-user-session {:value c58bf8f9-bc49-4ac3-a429-8fd739e7d95a}}, :remote-addr 127.0.0.1, :start-time 228381833542208, :params {}, :settings {:email_sending_enabled false, :sessions_max_lifetime_secs 432000, :smtp_default_from_address your.lending.desk@example.com, :public_image_caching_enabled true, :sessions_force_secure false, :deliver_received_order_notifications false, :external_base_url nil, :sessions_force_uniqueness false, :email_signature Cheers,}, :tx-next #next.jdbc.default_options.DefaultOptions{:connectable #object[com.zaxxer.hikari.HikariDataSource 0x5bbb0d7f HikariDataSource (HikariPool-1)], :options {:builder-fn #object[next.jdbc.result_set$as_unqualified_lower_maps 0x3db93dbb next.jdbc.result_set$as_unqualified_lower_maps@3db93dbb]}}, :query-params-raw {}, :route-params nil, :headers {accept application/json, accept-encoding gzip;q=1.0,deflate;q=0.6,identity;q=0.3, content-length 168, content-type application/json, cookie leihs-anti-csrf-token=7b64ff2f-6a1a-4bec-b0bf-60516d8be8bf; leihs-user-session=c58bf8f9-bc49-4ac3-a429-8fd739e7d95a, host localhost:3230, user-agent Faraday v2.7.1, x-csrf-token 7b64ff2f-6a1a-4bec-b0bf-60516d8be8bf}, :async-channel #object[org.httpkit.server.AsyncChannel 0x6aa4be58 /127.0.0.1:3230<->/127.0.0.1:55861], :server-port 3230, :params-raw {}, :tx {:datasource #object[com.zaxxer.hikari.HikariDataSource 0x18d95122 HikariDataSource (db-pool)]}, :content-length 168, :form-params {}, :websocket? false, :query-params {}, :content-type application/json, :form-params-raw {}, :character-encoding utf8, :uri /procure/graphql, :server-name localhost, :handler-key :graphql, :query-string nil, :body {:query           query {
            budget_periods {
              id
              total_price_cents_new_requests
            }
          }
, :variables {}}, :graphql-schema #CompiledSchema<>, :handler #object[leihs.procurement.graphql$handler 0x36e39341 leihs.procurement.graphql$handler@36e39341], :multipart-params {}, :scheme :http, :request-method :post, :accept {:mime :json, :charset nil, :encoding nil, :language nil}}

>request-c-grapql _> request (json) {"leihs-user-language":{"name":"English (UK)","locale":"en-GB","default":true,"active":true},"authenticated-entity":{"email":"gil.lehner@skiles-hessel.biz","contracts_count":0,"lastname":"Dare","org_id":null,"scope_read":true,"is_admin":false,"authentication-method":"session","login":null,"scope_system_admin_write":false,"scope_write":true,"firstname":"Lauran","scope_admin_write":false,"user_session_created_at":"2023-12-16T14:15:40.984341Z","id":"e2049b76-6ef1-417e-97cb-25daa3591cb9","user_session_id":"0485aa3c-36ff-408b-9757-e2b4030ca905","scope_system_admin_read":false,"access-rights":[],"user_id":"e2049b76-6ef1-417e-97cb-25daa3591cb9","is_system_admin":false,"external_sign_out_url":null,"language_locale":null,"inventory_pool_roles_count":0,"scope_admin_read":false},"cookies":{"leihs-anti-csrf-token":{"value":"7b64ff2f-6a1a-4bec-b0bf-60516d8be8bf"},"leihs-user-session":{"value":"c58bf8f9-bc49-4ac3-a429-8fd739e7d95a"}},"remote-addr":"127.0.0.1","start-time":228381833542208,"params":{},"settings":{"email_sending_enabled":false,"sessions_max_lifetime_secs":432000,"smtp_default_from_address":"your.lending.desk@example.com","public_image_caching_enabled":true,"sessions_force_secure":false,"deliver_received_order_notifications":false,"external_base_url":null,"sessions_force_uniqueness":false,"email_signature":"Cheers,"},"query-params-raw":{},"route-params":null,"headers":{"accept":"application\/json","accept-encoding":"gzip;q=1.0,deflate;q=0.6,identity;q=0.3","content-length":"168","content-type":"application\/json","cookie":"leihs-anti-csrf-token=7b64ff2f-6a1a-4bec-b0bf-60516d8be8bf; leihs-user-session=c58bf8f9-bc49-4ac3-a429-8fd739e7d95a","host":"localhost:3230","user-agent":"Faraday v2.7.1","x-csrf-token":"7b64ff2f-6a1a-4bec-b0bf-60516d8be8bf"},"server-port":3230,"params-raw":{},"content-length":168,"form-params":{},"websocket?":false,"query-params":{},"content-type":"application\/json","form-params-raw":{},"character-encoding":"utf8","uri":"\/procure\/graphql","server-name":"localhost","handler-key":"graphql","query-string":null,"body":{"query":"          query {\n            budget_periods {\n              id\n              total_price_cents_new_requests\n            }\n          }\n","variables":{}},"multipart-params":{},"scheme":"http","request-method":"post","accept":{"mime":"json","charset":null,"encoding":null,"language":null}}

>request-grapql _> result => {:data #ordered/map ([:budget_periods [#ordered/map ([:id c67c0c5a-c10a-47dd-a91c-e976d5ee362f] [:total_price_cents_new_requests nil])]]), :errors ({:message UnauthorizedException - Not authorized for this query path and arguments., :locations [{:line 4, :column 15}], :path [:budget_periods 0 :total_price_cents_new_requests], :extensions {:exception ExceptionInfo}})}
2023-12-16T14:15:41.033Z NX-41294 DEBUG [leihs.procurement.graphql:86] - result => {:data #ordered/map ([:budget_periods [#ordered/map ([:id "c67c0c5a-c10a-47dd-a91c-e976d5ee362f"] [:total_price_cents_new_requests nil])]]), :errors ({:message "UnauthorizedException - Not authorized for this query path and arguments.", :locations [{:line 4, :column 15}], :path [:budget_periods 0 :total_price_cents_new_requests], :extensions {:exception "ExceptionInfo"}})}
2023-12-16T14:15:41.033Z NX-41294 DEBUG [leihs.procurement.graphql:87] - {:data #ordered/map ([:budget_periods [#ordered/map ([:id "c67c0c5a-c10a-47dd-a91c-e976d5ee362f"] [:total_price_cents_new_requests nil])]]), :errors ({:message "UnauthorizedException - Not authorized for this query path and arguments.", :locations [{:line 4, :column 15}], :path [:budget_periods 0 :total_price_cents_new_requests], :extensions {:exception "ExceptionInfo"}})}

>o> ERROR 4pure-handler, result=> {:data #ordered/map ([:budget_periods [#ordered/map ([:id c67c0c5a-c10a-47dd-a91c-e976d5ee362f] [:total_price_cents_new_requests nil])]]), :errors ({:message UnauthorizedException - Not authorized for this query path and arguments., :locations [{:line 4, :column 15}], :path [:budget_periods 0 :total_price_cents_new_requests], :extensions {:exception ExceptionInfo}})}
>>> authenticate::skip= true  handler-key= :sign-in
>>> authenticate::authenticated-entity nil

>> authorize >

>> authorize::handler > #object[leihs.core.locale$wrap$fn__45448 0x2031e135 leihs.core.locale$wrap$fn__45448@2031e135]

>> authorize::request > {:cookies {}, :remote-addr 127.0.0.1, :start-time 228381873654791, :params {}, :settings {:email_sending_enabled false, :sessions_max_lifetime_secs 432000, :smtp_default_from_address your.lending.desk@example.com, :public_image_caching_enabled true, :sessions_force_secure false, :deliver_received_order_notifications false, :external_base_url nil, :sessions_force_uniqueness false, :email_signature Cheers,}, :tx-next #next.jdbc.default_options.DefaultOptions{:connectable #object[com.zaxxer.hikari.HikariDataSource 0x5bbb0d7f HikariDataSource (HikariPool-1)], :options {:builder-fn #object[next.jdbc.result_set$as_unqualified_lower_maps 0x3db93dbb next.jdbc.result_set$as_unqualified_lower_maps@3db93dbb]}}, :query-params-raw {}, :route-params nil, :headers {accept */*, accept-encoding gzip;q=1.0,deflate;q=0.6,identity;q=0.3, host localhost:3230, user-agent Faraday v2.7.1}, :async-channel #object[org.httpkit.server.AsyncChannel 0x5835f8d5 /127.0.0.1:3230<->/127.0.0.1:55862], :server-port 3230, :params-raw {}, :tx {:datasource #object[com.zaxxer.hikari.HikariDataSource 0x18d95122 HikariDataSource (db-pool)]}, :content-length 0, :form-params {}, :websocket? false, :query-params {}, :content-type nil, :form-params-raw {}, :character-encoding utf8, :uri /sign-in, :server-name localhost, :handler-key :sign-in, :query-string nil, :body nil, :graphql-schema #CompiledSchema<>, :handler #object[compojure.core$routes$fn__27950 0x17459cfd compojure.core$routes$fn__27950@17459cfd], :multipart-params {}, :scheme :http, :request-method :get, :accept {:mime :html, :charset nil, :encoding nil, :language nil}}

>> authorize::handler-key >> :sign-in
>myprint>  authEnt? nil
>myprint>  txn #next.jdbc.default_options.DefaultOptions{:connectable #object[com.zaxxer.hikari.HikariDataSource 0x5bbb0d7f HikariDataSource (HikariPool-1)], :options {:builder-fn #object[next.jdbc.result_set$as_unqualified_lower_maps 0x3db93dbb next.jdbc.result_set$as_unqualified_lower_maps@3db93dbb]}}
2023-12-16T14:15:41.041Z NX-41294 DEBUG [leihs.procurement.permissions.user:?] - (sql-format (sql/select [[:exists (-> (sql/select [true :exists]) (sql/from :procurement_admins) (sql/where [:= :procurement_admins.user_id [:cast (:user_id auth-entity) :uuid]]))]])) => ["SELECT EXISTS (SELECT TRUE AS exists FROM procurement_admins WHERE procurement_admins.user_id = CAST(NULL AS UUID))"]
>o> admin? [SELECT EXISTS (SELECT TRUE AS exists FROM procurement_admins WHERE procurement_admins.user_id = CAST(NULL AS UUID))]
2023-12-16T14:15:41.041Z NX-41294 DEBUG [leihs.procurement.permissions.user:38] - query => ["SELECT EXISTS (SELECT TRUE AS exists FROM procurement_admins WHERE procurement_admins.user_id = CAST(NULL AS UUID))"]
>o> admin? {:exists false}
2023-12-16T14:15:41.041Z NX-41294 DEBUG [leihs.procurement.permissions.user:42] - (:exists result) => false
>myprint>  admin false
>o> inspector? [SELECT EXISTS (SELECT TRUE AS exists FROM procurement_category_inspectors WHERE procurement_category_inspectors.user_id = CAST(NULL AS UUID)) AS result]
2023-12-16T14:15:41.042Z NX-41294 DEBUG [leihs.procurement.permissions.user:62] - query => ["SELECT EXISTS (SELECT TRUE AS exists FROM procurement_category_inspectors WHERE procurement_category_inspectors.user_id = CAST(NULL AS UUID)) AS result"]
>o> inspector? {:result false}
>myprint>  inspector false
>o> viewer? [SELECT EXISTS (SELECT TRUE AS exists FROM procurement_category_viewers WHERE procurement_category_viewers.user_id = CAST(NULL AS UUID)) AS result]
2023-12-16T14:15:41.042Z NX-41294 DEBUG [leihs.procurement.permissions.user:85] - query => ["SELECT EXISTS (SELECT TRUE AS exists FROM procurement_category_viewers WHERE procurement_category_viewers.user_id = CAST(NULL AS UUID)) AS result"]
>o> viewer? {:result false}
>myprint>  viewer false
>o> requester?? [SELECT EXISTS (SELECT TRUE AS exists FROM procurement_requesters_organizations WHERE procurement_requesters_organizations.user_id = CAST(NULL AS UUID))]
2023-12-16T14:15:41.042Z NX-41294 DEBUG [leihs.procurement.permissions.user:169] - query => ["SELECT EXISTS (SELECT TRUE AS exists FROM procurement_requesters_organizations WHERE procurement_requesters_organizations.user_id = CAST(NULL AS UUID))"]
>o> requester?? {:exists false}
2023-12-16T14:15:41.043Z NX-41294 DEBUG [leihs.procurement.permissions.user:173] - (:exists result) => false
>myprint>  requester false
>>> authenticate::skip= true  handler-key= :sign-in
>>> authenticate::authenticated-entity nil

>> authorize >

>> authorize::handler > #object[leihs.core.locale$wrap$fn__45448 0x2031e135 leihs.core.locale$wrap$fn__45448@2031e135]

>> authorize::request > {:cookies {leihs-anti-csrf-token {:value d3e67c2b-5859-444b-9802-e84531752c5e}}, :remote-addr 127.0.0.1, :start-time 228381883691416, :params {:password password, :user gil.lehner@skiles-hessel.biz}, :settings {:email_sending_enabled false, :sessions_max_lifetime_secs 432000, :smtp_default_from_address your.lending.desk@example.com, :public_image_caching_enabled true, :sessions_force_secure false, :deliver_received_order_notifications false, :external_base_url nil, :sessions_force_uniqueness false, :email_signature Cheers,}, :tx-next #next.jdbc.default_options.DefaultOptions{:connectable #object[com.zaxxer.hikari.pool.HikariProxyConnection 0x2e01e509 HikariProxyConnection@771876105 wrapping org.postgresql.jdbc.PgConnection@72b35f05], :options {:builder-fn #object[next.jdbc.result_set$as_unqualified_lower_maps 0x3db93dbb next.jdbc.result_set$as_unqualified_lower_maps@3db93dbb]}}, :query-params-raw {}, :route-params nil, :headers {accept */*, accept-encoding gzip;q=1.0,deflate;q=0.6,identity;q=0.3, content-length 53, content-type application/x-www-form-urlencoded, cookie leihs-anti-csrf-token=d3e67c2b-5859-444b-9802-e84531752c5e, host localhost:3230, user-agent Faraday v2.7.1, x-csrf-token d3e67c2b-5859-444b-9802-e84531752c5e}, :async-channel #object[org.httpkit.server.AsyncChannel 0x2b34fc8e /127.0.0.1:3230<->/127.0.0.1:55863], :server-port 3230, :params-raw {:password password, :user gil.lehner@skiles-hessel.biz}, :tx {:datasource #object[com.zaxxer.hikari.HikariDataSource 0x18d95122 HikariDataSource (db-pool)], :connection #object[com.zaxxer.hikari.pool.HikariProxyConnection 0x1ef62e44 HikariProxyConnection@519450180 wrapping org.postgresql.jdbc.PgConnection@68f5f480], :level 1, :rollback #object[clojure.lang.Atom 0x5c2e0873 {:status :ready, :val false}]}, :content-length 53, :form-params {:password password, :user gil.lehner@skiles-hessel.biz}, :websocket? false, :query-params {}, :content-type application/x-www-form-urlencoded, :form-params-raw {:password password, :user gil.lehner@skiles-hessel.biz}, :character-encoding utf8, :uri /sign-in, :server-name localhost, :handler-key :sign-in, :query-string nil, :body #object[org.httpkit.BytesInputStream 0x7da69752 BytesInputStream[len=53]], :graphql-schema #CompiledSchema<>, :handler #object[compojure.core$routes$fn__27950 0x17459cfd compojure.core$routes$fn__27950@17459cfd], :multipart-params {}, :scheme :http, :request-method :post, :accept {:mime :html, :charset nil, :encoding nil, :language nil}}

>> authorize::handler-key >> :sign-in
>myprint>  authEnt? nil
>myprint>  txn #next.jdbc.default_options.DefaultOptions{:connectable #object[com.zaxxer.hikari.pool.HikariProxyConnection 0x2e01e509 HikariProxyConnection@771876105 wrapping org.postgresql.jdbc.PgConnection@72b35f05], :options {:builder-fn #object[next.jdbc.result_set$as_unqualified_lower_maps 0x3db93dbb next.jdbc.result_set$as_unqualified_lower_maps@3db93dbb]}}
2023-12-16T14:15:41.052Z NX-41294 DEBUG [leihs.procurement.permissions.user:?] - (sql-format (sql/select [[:exists (-> (sql/select [true :exists]) (sql/from :procurement_admins) (sql/where [:= :procurement_admins.user_id [:cast (:user_id auth-entity) :uuid]]))]])) => ["SELECT EXISTS (SELECT TRUE AS exists FROM procurement_admins WHERE procurement_admins.user_id = CAST(NULL AS UUID))"]
>o> admin? [SELECT EXISTS (SELECT TRUE AS exists FROM procurement_admins WHERE procurement_admins.user_id = CAST(NULL AS UUID))]
2023-12-16T14:15:41.052Z NX-41294 DEBUG [leihs.procurement.permissions.user:38] - query => ["SELECT EXISTS (SELECT TRUE AS exists FROM procurement_admins WHERE procurement_admins.user_id = CAST(NULL AS UUID))"]
>o> admin? {:exists false}
2023-12-16T14:15:41.052Z NX-41294 DEBUG [leihs.procurement.permissions.user:42] - (:exists result) => false
>myprint>  admin false
>o> inspector? [SELECT EXISTS (SELECT TRUE AS exists FROM procurement_category_inspectors WHERE procurement_category_inspectors.user_id = CAST(NULL AS UUID)) AS result]
2023-12-16T14:15:41.053Z NX-41294 DEBUG [leihs.procurement.permissions.user:62] - query => ["SELECT EXISTS (SELECT TRUE AS exists FROM procurement_category_inspectors WHERE procurement_category_inspectors.user_id = CAST(NULL AS UUID)) AS result"]
>o> inspector? {:result false}
>myprint>  inspector false
>o> viewer? [SELECT EXISTS (SELECT TRUE AS exists FROM procurement_category_viewers WHERE procurement_category_viewers.user_id = CAST(NULL AS UUID)) AS result]
2023-12-16T14:15:41.053Z NX-41294 DEBUG [leihs.procurement.permissions.user:85] - query => ["SELECT EXISTS (SELECT TRUE AS exists FROM procurement_category_viewers WHERE procurement_category_viewers.user_id = CAST(NULL AS UUID)) AS result"]
>o> viewer? {:result false}
>myprint>  viewer false
>o> requester?? [SELECT EXISTS (SELECT TRUE AS exists FROM procurement_requesters_organizations WHERE procurement_requesters_organizations.user_id = CAST(NULL AS UUID))]
2023-12-16T14:15:41.053Z NX-41294 DEBUG [leihs.procurement.permissions.user:169] - query => ["SELECT EXISTS (SELECT TRUE AS exists FROM procurement_requesters_organizations WHERE procurement_requesters_organizations.user_id = CAST(NULL AS UUID))"]
>o> requester?? {:exists false}
2023-12-16T14:15:41.053Z NX-41294 DEBUG [leihs.procurement.permissions.user:173] - (:exists result) => false
>myprint>  requester false
>>> authenticate::skip= nil  handler-key= :graphql
>>> authenticate::authenticated-entity {:email gil.lehner@skiles-hessel.biz, :contracts_count 0, :lastname Dare, :org_id nil, :scope_read true, :is_admin false, :authentication-method :session, :login nil, :scope_system_admin_write false, :scope_write true, :firstname Lauran, :scope_admin_write false, :user_session_created_at #time/instant "2023-12-16T14:15:41.061427Z", :id #uuid "e2049b76-6ef1-417e-97cb-25daa3591cb9", :user_session_id #uuid "68068f97-4973-4d98-95fb-3785cd798a82", :scope_system_admin_read false, :access-rights (), :user_id #uuid "e2049b76-6ef1-417e-97cb-25daa3591cb9", :is_system_admin false, :external_sign_out_url nil, :language_locale nil, :inventory_pool_roles_count 0, :scope_admin_read false}

>> authorize >

>> authorize::handler > #object[leihs.core.locale$wrap$fn__45448 0x2031e135 leihs.core.locale$wrap$fn__45448@2031e135]

>> authorize::request > {:authenticated-entity {:email gil.lehner@skiles-hessel.biz, :contracts_count 0, :lastname Dare, :org_id nil, :scope_read true, :is_admin false, :authentication-method :session, :login nil, :scope_system_admin_write false, :scope_write true, :firstname Lauran, :scope_admin_write false, :user_session_created_at #time/instant "2023-12-16T14:15:41.061427Z", :id #uuid "e2049b76-6ef1-417e-97cb-25daa3591cb9", :user_session_id #uuid "68068f97-4973-4d98-95fb-3785cd798a82", :scope_system_admin_read false, :access-rights (), :user_id #uuid "e2049b76-6ef1-417e-97cb-25daa3591cb9", :is_system_admin false, :external_sign_out_url nil, :language_locale nil, :inventory_pool_roles_count 0, :scope_admin_read false}, :cookies {leihs-anti-csrf-token {:value d3e67c2b-5859-444b-9802-e84531752c5e}, leihs-user-session {:value f9d5ecf2-c843-4fc6-b086-dffa0ac974aa}}, :remote-addr 127.0.0.1, :start-time 228381902294791, :params {}, :settings {:email_sending_enabled false, :sessions_max_lifetime_secs 432000, :smtp_default_from_address your.lending.desk@example.com, :public_image_caching_enabled true, :sessions_force_secure false, :deliver_received_order_notifications false, :external_base_url nil, :sessions_force_uniqueness false, :email_signature Cheers,}, :tx-next #next.jdbc.default_options.DefaultOptions{:connectable #object[com.zaxxer.hikari.HikariDataSource 0x5bbb0d7f HikariDataSource (HikariPool-1)], :options {:builder-fn #object[next.jdbc.result_set$as_unqualified_lower_maps 0x3db93dbb next.jdbc.result_set$as_unqualified_lower_maps@3db93dbb]}}, :query-params-raw {}, :route-params nil, :headers {accept application/json, accept-encoding gzip;q=1.0,deflate;q=0.6,identity;q=0.3, content-length 174, content-type application/json, cookie leihs-anti-csrf-token=d3e67c2b-5859-444b-9802-e84531752c5e; leihs-user-session=f9d5ecf2-c843-4fc6-b086-dffa0ac974aa, host localhost:3230, user-agent Faraday v2.7.1, x-csrf-token d3e67c2b-5859-444b-9802-e84531752c5e}, :async-channel #object[org.httpkit.server.AsyncChannel 0x63934b0 /127.0.0.1:3230<->/127.0.0.1:55864], :server-port 3230, :params-raw {}, :tx {:datasource #object[com.zaxxer.hikari.HikariDataSource 0x18d95122 HikariDataSource (db-pool)]}, :content-length 174, :form-params {}, :websocket? false, :query-params {}, :content-type application/json, :form-params-raw {}, :character-encoding utf8, :uri /procure/graphql, :server-name localhost, :handler-key :graphql, :query-string nil, :body {:query           query {
            budget_periods {
              id
              total_price_cents_inspected_requests
            }
          }
, :variables {}}, :graphql-schema #CompiledSchema<>, :handler #object[leihs.procurement.graphql$handler 0x36e39341 leihs.procurement.graphql$handler@36e39341], :multipart-params {}, :scheme :http, :request-method :post, :accept {:mime :json, :charset nil, :encoding nil, :language nil}}

>> authorize::handler-key >> :graphql
>myprint>  authEnt? {:email gil.lehner@skiles-hessel.biz, :contracts_count 0, :lastname Dare, :org_id nil, :scope_read true, :is_admin false, :authentication-method :session, :login nil, :scope_system_admin_write false, :scope_write true, :firstname Lauran, :scope_admin_write false, :user_session_created_at #time/instant "2023-12-16T14:15:41.061427Z", :id #uuid "e2049b76-6ef1-417e-97cb-25daa3591cb9", :user_session_id #uuid "68068f97-4973-4d98-95fb-3785cd798a82", :scope_system_admin_read false, :access-rights (), :user_id #uuid "e2049b76-6ef1-417e-97cb-25daa3591cb9", :is_system_admin false, :external_sign_out_url nil, :language_locale nil, :inventory_pool_roles_count 0, :scope_admin_read false}
>myprint>  txn #next.jdbc.default_options.DefaultOptions{:connectable #object[com.zaxxer.hikari.HikariDataSource 0x5bbb0d7f HikariDataSource (HikariPool-1)], :options {:builder-fn #object[next.jdbc.result_set$as_unqualified_lower_maps 0x3db93dbb next.jdbc.result_set$as_unqualified_lower_maps@3db93dbb]}}
2023-12-16T14:15:41.073Z NX-41294 DEBUG [leihs.procurement.permissions.user:?] - (sql-format (sql/select [[:exists (-> (sql/select [true :exists]) (sql/from :procurement_admins) (sql/where [:= :procurement_admins.user_id [:cast (:user_id auth-entity) :uuid]]))]])) => ["SELECT EXISTS (SELECT TRUE AS exists FROM procurement_admins WHERE procurement_admins.user_id = CAST(? AS UUID))" #uuid "e2049b76-6ef1-417e-97cb-25daa3591cb9"]
>o> admin? [SELECT EXISTS (SELECT TRUE AS exists FROM procurement_admins WHERE procurement_admins.user_id = CAST(? AS UUID)) #uuid "e2049b76-6ef1-417e-97cb-25daa3591cb9"]
2023-12-16T14:15:41.074Z NX-41294 DEBUG [leihs.procurement.permissions.user:38] - query => ["SELECT EXISTS (SELECT TRUE AS exists FROM procurement_admins WHERE procurement_admins.user_id = CAST(? AS UUID))" #uuid "e2049b76-6ef1-417e-97cb-25daa3591cb9"]
>o> admin? {:exists false}
2023-12-16T14:15:41.074Z NX-41294 DEBUG [leihs.procurement.permissions.user:42] - (:exists result) => false
>myprint>  admin false
>o> inspector? [SELECT EXISTS (SELECT TRUE AS exists FROM procurement_category_inspectors WHERE procurement_category_inspectors.user_id = CAST(? AS UUID)) AS result #uuid "e2049b76-6ef1-417e-97cb-25daa3591cb9"]
2023-12-16T14:15:41.074Z NX-41294 DEBUG [leihs.procurement.permissions.user:62] - query => ["SELECT EXISTS (SELECT TRUE AS exists FROM procurement_category_inspectors WHERE procurement_category_inspectors.user_id = CAST(? AS UUID)) AS result" #uuid "e2049b76-6ef1-417e-97cb-25daa3591cb9"]
>o> inspector? {:result true}
>myprint>  inspector true
>o> viewer? [SELECT EXISTS (SELECT TRUE AS exists FROM procurement_category_viewers WHERE procurement_category_viewers.user_id = CAST(? AS UUID)) AS result #uuid "e2049b76-6ef1-417e-97cb-25daa3591cb9"]
2023-12-16T14:15:41.075Z NX-41294 DEBUG [leihs.procurement.permissions.user:85] - query => ["SELECT EXISTS (SELECT TRUE AS exists FROM procurement_category_viewers WHERE procurement_category_viewers.user_id = CAST(? AS UUID)) AS result" #uuid "e2049b76-6ef1-417e-97cb-25daa3591cb9"]
>o> viewer? {:result false}
>myprint>  viewer false
>o> requester?? [SELECT EXISTS (SELECT TRUE AS exists FROM procurement_requesters_organizations WHERE procurement_requesters_organizations.user_id = CAST(? AS UUID)) #uuid "e2049b76-6ef1-417e-97cb-25daa3591cb9"]
2023-12-16T14:15:41.075Z NX-41294 DEBUG [leihs.procurement.permissions.user:169] - query => ["SELECT EXISTS (SELECT TRUE AS exists FROM procurement_requesters_organizations WHERE procurement_requesters_organizations.user_id = CAST(? AS UUID))" #uuid "e2049b76-6ef1-417e-97cb-25daa3591cb9"]
>o> requester?? {:exists false}
2023-12-16T14:15:41.076Z NX-41294 DEBUG [leihs.procurement.permissions.user:173] - (:exists result) => false
>myprint>  requester false
2023-12-16T14:15:41.077Z NX-41294 DEBUG [leihs.procurement.permissions.user:?] - (sql-format (sql/select [[:exists (-> (sql/select [true :exists]) (sql/from :procurement_admins) (sql/where [:= :procurement_admins.user_id [:cast (:user_id auth-entity) :uuid]]))]])) => ["SELECT EXISTS (SELECT TRUE AS exists FROM procurement_admins WHERE procurement_admins.user_id = CAST(? AS UUID))" #uuid "e2049b76-6ef1-417e-97cb-25daa3591cb9"]
>o> admin? [SELECT EXISTS (SELECT TRUE AS exists FROM procurement_admins WHERE procurement_admins.user_id = CAST(? AS UUID)) #uuid "e2049b76-6ef1-417e-97cb-25daa3591cb9"]
2023-12-16T14:15:41.077Z NX-41294 DEBUG [leihs.procurement.permissions.user:38] - query => ["SELECT EXISTS (SELECT TRUE AS exists FROM procurement_admins WHERE procurement_admins.user_id = CAST(? AS UUID))" #uuid "e2049b76-6ef1-417e-97cb-25daa3591cb9"]
>o> admin? {:exists false}
2023-12-16T14:15:41.077Z NX-41294 DEBUG [leihs.procurement.permissions.user:42] - (:exists result) => false
>o> inspector? [SELECT EXISTS (SELECT TRUE AS exists FROM procurement_category_inspectors WHERE procurement_category_inspectors.user_id = CAST(? AS UUID)) AS result #uuid "e2049b76-6ef1-417e-97cb-25daa3591cb9"]
2023-12-16T14:15:41.077Z NX-41294 DEBUG [leihs.procurement.permissions.user:62] - query => ["SELECT EXISTS (SELECT TRUE AS exists FROM procurement_category_inspectors WHERE procurement_category_inspectors.user_id = CAST(? AS UUID)) AS result" #uuid "e2049b76-6ef1-417e-97cb-25daa3591cb9"]
>o> inspector? {:result true}
>o> viewer? [SELECT EXISTS (SELECT TRUE AS exists FROM procurement_category_viewers WHERE procurement_category_viewers.user_id = CAST(? AS UUID)) AS result #uuid "e2049b76-6ef1-417e-97cb-25daa3591cb9"]
2023-12-16T14:15:41.077Z NX-41294 DEBUG [leihs.procurement.permissions.user:85] - query => ["SELECT EXISTS (SELECT TRUE AS exists FROM procurement_category_viewers WHERE procurement_category_viewers.user_id = CAST(? AS UUID)) AS result" #uuid "e2049b76-6ef1-417e-97cb-25daa3591cb9"]
>o> viewer? {:result false}
>o> requester?? [SELECT EXISTS (SELECT TRUE AS exists FROM procurement_requesters_organizations WHERE procurement_requesters_organizations.user_id = CAST(? AS UUID)) #uuid "e2049b76-6ef1-417e-97cb-25daa3591cb9"]
2023-12-16T14:15:41.078Z NX-41294 DEBUG [leihs.procurement.permissions.user:169] - query => ["SELECT EXISTS (SELECT TRUE AS exists FROM procurement_requesters_organizations WHERE procurement_requesters_organizations.user_id = CAST(? AS UUID))" #uuid "e2049b76-6ef1-417e-97cb-25daa3591cb9"]
>o> requester?? {:exists false}
2023-12-16T14:15:41.078Z NX-41294 DEBUG [leihs.procurement.permissions.user:173] - (:exists result) => false
pure-handler >> 2
2023-12-16T14:15:41.079Z NX-41294 DEBUG [leihs.procurement.graphql:46] - graphql query           query {
            budget_periods {
              id
              total_price_cents_inspected_requests
            }
          }
 with variables {}
>oo> vars from graphQL-Requst nil nil nil {}
>oo> Causes issues2 >> nil
2023-12-16T14:15:41.080Z NX-41294 DEBUG [leihs.procurement.resources.budget-periods:63] - (= (:id args) []) => false
2023-12-16T14:15:41.080Z NX-41294 DEBUG [leihs.procurement.resources.budget-periods:67] - args => nil
2023-12-16T14:15:41.080Z NX-41294 DEBUG [leihs.procurement.resources.budget-periods:38] - (:id args) => nil
2023-12-16T14:15:41.080Z NX-41294 DEBUG [leihs.procurement.resources.budget-periods:42] - (-> args :whereRequestsCanBeMovedTo empty? not) => false
2023-12-16T14:15:41.080Z NX-41294 DEBUG [leihs.procurement.resources.budget-periods:37] - (let [ids (spy (:id args))] (cond-> budget-periods-base-query ids (sql/where [:in :procurement_budget_periods.id (cast-uuids ids)]) (spy (-> args :whereRequestsCanBeMovedTo empty? not)) (sql/where [:< :current_date :procurement_budget_periods.end_date]))) => {:select [:*], :from [:procurement_budget_periods], :order-by [[:end_date :desc]]}
2023-12-16T14:15:41.080Z NX-41294 DEBUG [leihs.procurement.resources.budget-periods:?] - (sql-format (budget-periods-query (spy args))) => ["SELECT * FROM procurement_budget_periods ORDER BY end_date DESC"]
2023-12-16T14:15:41.081Z NX-41294 DEBUG [leihs.procurement.resources.budget-periods:65] - (jdbc/execute! (-> context :request :tx-next) (-> (spy args) budget-periods-query sql-format spy)) => [{:id #uuid "c67c0c5a-c10a-47dd-a91c-e976d5ee362f", :name "HephaestusUranus", :inspection_start_date #inst "2024-01-15T14:15:40.857067000-00:00", :end_date #inst "2024-03-15T14:15:40.857111000-00:00", :created_at #inst "2023-12-16T14:15:40.857254000-00:00", :updated_at #inst "2023-12-16T14:15:40.857254000-00:00"}]
>>1x #next.jdbc.default_options.DefaultOptions{:connectable #object[com.zaxxer.hikari.HikariDataSource 0x5bbb0d7f HikariDataSource (HikariPool-1)], :options {:builder-fn #object[next.jdbc.result_set$as_unqualified_lower_maps 0x3db93dbb next.jdbc.result_set$as_unqualified_lower_maps@3db93dbb]}}
>>2x {:email gil.lehner@skiles-hessel.biz, :contracts_count 0, :lastname Dare, :org_id nil, :scope_read true, :is_admin false, :authentication-method :session, :login nil, :scope_system_admin_write false, :scope_write true, :firstname Lauran, :scope_admin_write false, :user_session_created_at #time/instant "2023-12-16T14:15:41.061427Z", :id #uuid "e2049b76-6ef1-417e-97cb-25daa3591cb9", :user_session_id #uuid "68068f97-4973-4d98-95fb-3785cd798a82", :scope_system_admin_read false, :access-rights (), :user_id #uuid "e2049b76-6ef1-417e-97cb-25daa3591cb9", :is_system_admin false, :external_sign_out_url nil, :language_locale nil, :inventory_pool_roles_count 0, :scope_admin_read false}
2023-12-16T14:15:41.081Z NX-41294 DEBUG [leihs.procurement.permissions.user:?] - (sql-format (sql/select [[:exists (-> (sql/select [true :exists]) (sql/from :procurement_admins) (sql/where [:= :procurement_admins.user_id [:cast (:user_id auth-entity) :uuid]]))]])) => ["SELECT EXISTS (SELECT TRUE AS exists FROM procurement_admins WHERE procurement_admins.user_id = CAST(? AS UUID))" #uuid "e2049b76-6ef1-417e-97cb-25daa3591cb9"]
>o> admin? [SELECT EXISTS (SELECT TRUE AS exists FROM procurement_admins WHERE procurement_admins.user_id = CAST(? AS UUID)) #uuid "e2049b76-6ef1-417e-97cb-25daa3591cb9"]
2023-12-16T14:15:41.081Z NX-41294 DEBUG [leihs.procurement.permissions.user:38] - query => ["SELECT EXISTS (SELECT TRUE AS exists FROM procurement_admins WHERE procurement_admins.user_id = CAST(? AS UUID))" #uuid "e2049b76-6ef1-417e-97cb-25daa3591cb9"]
>o> admin? {:exists false}
2023-12-16T14:15:41.082Z NX-41294 DEBUG [leihs.procurement.permissions.user:42] - (:exists result) => false
>e> #error {
 :cause UnauthorizedException - Not authorized for this query path and arguments.
 :data {:status 403}
 :via
 [{:type clojure.lang.ExceptionInfo
   :message UnauthorizedException - Not authorized for this query path and arguments.
   :data {:status 403}
   :at [leihs.procurement.authorization$throw_unauthorized invokeStatic authorization.clj 22]}]
 :trace
 [[leihs.procurement.authorization$throw_unauthorized invokeStatic authorization.clj 22]
  [leihs.procurement.authorization$throw_unauthorized invoke authorization.clj 21]
  [leihs.procurement.authorization$wrap_ensure_one_of$fn__39324 invoke authorization.clj 40]
  [leihs.procurement.graphql.resolver$wrap_resolver_with_error$fn__45634 invoke resolver.clj 16]
  [com.walmartlabs.lacinia.schema$wrap_resolver_to_ensure_resolver_result$fn__14023 invoke schema.clj 986]
  [com.walmartlabs.lacinia.executor$invoke_resolver_for_field invokeStatic executor.clj 86]
  [com.walmartlabs.lacinia.executor$invoke_resolver_for_field invoke executor.clj 68]
  [com.walmartlabs.lacinia.executor$resolve_and_select invokeStatic executor.clj 353]
  [com.walmartlabs.lacinia.executor$resolve_and_select invoke executor.clj 234]
  [com.walmartlabs.lacinia.executor$apply_field_selection invokeStatic executor.clj 140]
  [com.walmartlabs.lacinia.executor$apply_field_selection invoke executor.clj 135]
  [com.walmartlabs.lacinia.executor$apply_selection invokeStatic executor.clj 173]
  [com.walmartlabs.lacinia.executor$apply_selection invoke executor.clj 165]
  [com.walmartlabs.lacinia.executor$execute_nested_selections$fn__17481 invoke executor.clj 197]
  [com.walmartlabs.lacinia.internal_utils$keepv$fn__12187 invoke internal_utils.clj 46]
  [clojure.core.protocols$iter_reduce invokeStatic protocols.clj 49]
  [clojure.core.protocols$fn__8170 invokeStatic protocols.clj 75]
  [clojure.core.protocols$fn__8170 invoke protocols.clj 75]
  [clojure.core.protocols$fn__8110$G__8105__8123 invoke protocols.clj 13]
  [clojure.core$reduce invokeStatic core.clj 6830]
  [clojure.core$reduce invoke core.clj 6812]
  [com.walmartlabs.lacinia.internal_utils$keepv invokeStatic internal_utils.clj 45]
  [com.walmartlabs.lacinia.internal_utils$keepv invoke internal_utils.clj 41]
  [com.walmartlabs.lacinia.executor$execute_nested_selections invokeStatic executor.clj 197]
  [com.walmartlabs.lacinia.executor$execute_nested_selections invoke executor.clj 190]
  [com.walmartlabs.lacinia.executor$resolve_and_select$selector_callback__17497 invoke executor.clj 262]
  [com.walmartlabs.lacinia.schema$floor_selector invokeStatic schema.clj 994]
  [com.walmartlabs.lacinia.schema$floor_selector invoke schema.clj 992]
  [com.walmartlabs.lacinia.schema$create_root_selector$select_unwrap_tagged_type__14049 invoke schema.clj 1156]
  [com.walmartlabs.lacinia.schema$create_root_selector$select_apply_static_type__14051 invoke schema.clj 1163]
  [com.walmartlabs.lacinia.schema$create_root_selector$select_require_single_value__14053 invoke schema.clj 1171]
  [com.walmartlabs.lacinia.schema$create_root_selector$select_bypass_if_nil__14055 invoke schema.clj 1178]
  [com.walmartlabs.lacinia.schema$assemble_selector$select_list__14063$unwrapper__14064 invoke schema.clj 1223]
  [com.walmartlabs.lacinia.schema$assemble_selector$select_list__14063$fn__14066 invoke schema.clj 1231]
  [com.walmartlabs.lacinia.internal_utils$fast_map_indexed$fn__12209 invoke internal_utils.clj 122]
  [clojure.core$mapv$fn__8468 invoke core.clj 6914]
  [clojure.lang.PersistentVector reduce PersistentVector.java 343]
  [clojure.core$reduce invokeStatic core.clj 6829]
  [clojure.core$mapv invokeStatic core.clj 6905]
  [clojure.core$mapv invoke core.clj 6905]
  [com.walmartlabs.lacinia.internal_utils$fast_map_indexed invokeStatic internal_utils.clj 121]
  [com.walmartlabs.lacinia.internal_utils$fast_map_indexed invoke internal_utils.clj 118]
  [com.walmartlabs.lacinia.schema$assemble_selector$select_list__14063 invoke schema.clj 1231]
  [com.walmartlabs.lacinia.executor$resolve_and_select$process_resolved_value__17502 invoke executor.clj 297]
  [com.walmartlabs.lacinia.executor$resolve_and_select$unwrap_resolver_result__17505$receive_resolved_value_from_field__17506 invoke executor.clj 324]
  [com.walmartlabs.lacinia.resolve.ResolverResultImpl on_deliver_BANG_ resolve.clj 135]
  [com.walmartlabs.lacinia.executor$resolve_and_select$unwrap_resolver_result__17505 invoke executor.clj 322]
  [com.walmartlabs.lacinia.executor$resolve_and_select invokeStatic executor.clj 353]
  [com.walmartlabs.lacinia.executor$resolve_and_select invoke executor.clj 234]
  [com.walmartlabs.lacinia.executor$apply_field_selection invokeStatic executor.clj 140]
  [com.walmartlabs.lacinia.executor$apply_field_selection invoke executor.clj 135]
  [com.walmartlabs.lacinia.executor$apply_selection invokeStatic executor.clj 173]
  [com.walmartlabs.lacinia.executor$apply_selection invoke executor.clj 165]
  [com.walmartlabs.lacinia.executor$execute_nested_selections$fn__17481 invoke executor.clj 197]
  [com.walmartlabs.lacinia.internal_utils$keepv$fn__12187 invoke internal_utils.clj 46]
  [clojure.lang.ArrayChunk reduce ArrayChunk.java 58]
  [clojure.core.protocols$fn__8176 invokeStatic protocols.clj 136]
  [clojure.core.protocols$fn__8176 invoke protocols.clj 124]
  [clojure.core.protocols$fn__8136$G__8131__8145 invoke protocols.clj 19]
  [clojure.core.protocols$seq_reduce invokeStatic protocols.clj 31]
  [clojure.core.protocols$fn__8168 invokeStatic protocols.clj 75]
  [clojure.core.protocols$fn__8168 invoke protocols.clj 75]
  [clojure.core.protocols$fn__8110$G__8105__8123 invoke protocols.clj 13]
  [clojure.core$reduce invokeStatic core.clj 6830]
  [clojure.core$reduce invoke core.clj 6812]
  [com.walmartlabs.lacinia.internal_utils$keepv invokeStatic internal_utils.clj 45]
  [com.walmartlabs.lacinia.internal_utils$keepv invoke internal_utils.clj 41]
  [com.walmartlabs.lacinia.executor$execute_nested_selections invokeStatic executor.clj 197]
  [com.walmartlabs.lacinia.executor$execute_nested_selections invoke executor.clj 190]
  [com.walmartlabs.lacinia.executor$execute_query$fn__17519 invoke executor.clj 400]
  [clojure.lang.AFn applyToHelper AFn.java 152]
  [clojure.lang.AFn applyTo AFn.java 144]
  [clojure.core$apply invokeStatic core.clj 667]
  [clojure.core$with_bindings_STAR_ invokeStatic core.clj 1977]
  [clojure.core$with_bindings_STAR_ doInvoke core.clj 1977]
  [clojure.lang.RestFn invoke RestFn.java 425]
  [clojure.lang.AFn applyToHelper AFn.java 156]
  [clojure.lang.RestFn applyTo RestFn.java 132]
  [clojure.core$apply invokeStatic core.clj 671]
  [clojure.core$bound_fn_STAR_$fn__5767 doInvoke core.clj 2007]
  [clojure.lang.RestFn invoke RestFn.java 397]
  [com.walmartlabs.lacinia.executor$execute_query$fn__17524 invoke executor.clj 421]
  [clojure.core$binding_conveyor_fn$fn__5772 invoke core.clj 2034]
  [clojure.lang.AFn call AFn.java 18]
  [java.util.concurrent.FutureTask run FutureTask.java 264]
  [java.util.concurrent.ThreadPoolExecutor runWorker ThreadPoolExecutor.java 1128]
  [java.util.concurrent.ThreadPoolExecutor$Worker run ThreadPoolExecutor.java 628]
  [java.lang.Thread run Thread.java 829]]}
2023-12-16T14:15:41.082Z NX-41294 WARN [leihs.procurement.graphql.resolver:326] - UnauthorizedException - Not authorized for this query path and arguments.
2023-12-16T14:15:41.082Z NX-41294 DEBUG [leihs.procurement.graphql.resolver:326] - #error {
 :cause UnauthorizedException - Not authorized for this query path and arguments.
 :data {:status 403}
 :via
 [{:type clojure.lang.ExceptionInfo
   :message UnauthorizedException - Not authorized for this query path and arguments.
   :data {:status 403}
   :at [leihs.procurement.authorization$throw_unauthorized invokeStatic authorization.clj 22]}]
 :trace
 [[leihs.procurement.authorization$throw_unauthorized invokeStatic authorization.clj 22]
  [leihs.procurement.authorization$throw_unauthorized invoke authorization.clj 21]
  [leihs.procurement.authorization$wrap_ensure_one_of$fn__39324 invoke authorization.clj 40]
  [leihs.procurement.graphql.resolver$wrap_resolver_with_error$fn__45634 invoke resolver.clj 16]
  [com.walmartlabs.lacinia.schema$wrap_resolver_to_ensure_resolver_result$fn__14023 invoke schema.clj 986]
  [com.walmartlabs.lacinia.executor$invoke_resolver_for_field invokeStatic executor.clj 86]
  [com.walmartlabs.lacinia.executor$invoke_resolver_for_field invoke executor.clj 68]
  [com.walmartlabs.lacinia.executor$resolve_and_select invokeStatic executor.clj 353]
  [com.walmartlabs.lacinia.executor$resolve_and_select invoke executor.clj 234]
  [com.walmartlabs.lacinia.executor$apply_field_selection invokeStatic executor.clj 140]
  [com.walmartlabs.lacinia.executor$apply_field_selection invoke executor.clj 135]
  [com.walmartlabs.lacinia.executor$apply_selection invokeStatic executor.clj 173]
  [com.walmartlabs.lacinia.executor$apply_selection invoke executor.clj 165]
  [com.walmartlabs.lacinia.executor$execute_nested_selections$fn__17481 invoke executor.clj 197]
  [com.walmartlabs.lacinia.internal_utils$keepv$fn__12187 invoke internal_utils.clj 46]
  [clojure.core.protocols$iter_reduce invokeStatic protocols.clj 49]
  [clojure.core.protocols$fn__8170 invokeStatic protocols.clj 75]
  [clojure.core.protocols$fn__8170 invoke protocols.clj 75]
  [clojure.core.protocols$fn__8110$G__8105__8123 invoke protocols.clj 13]
  [clojure.core$reduce invokeStatic core.clj 6830]
  [clojure.core$reduce invoke core.clj 6812]
  [com.walmartlabs.lacinia.internal_utils$keepv invokeStatic internal_utils.clj 45]
  [com.walmartlabs.lacinia.internal_utils$keepv invoke internal_utils.clj 41]
  [com.walmartlabs.lacinia.executor$execute_nested_selections invokeStatic executor.clj 197]
  [com.walmartlabs.lacinia.executor$execute_nested_selections invoke executor.clj 190]
  [com.walmartlabs.lacinia.executor$resolve_and_select$selector_callback__17497 invoke executor.clj 262]
  [com.walmartlabs.lacinia.schema$floor_selector invokeStatic schema.clj 994]
  [com.walmartlabs.lacinia.schema$floor_selector invoke schema.clj 992]
  [com.walmartlabs.lacinia.schema$create_root_selector$select_unwrap_tagged_type__14049 invoke schema.clj 1156]
  [com.walmartlabs.lacinia.schema$create_root_selector$select_apply_static_type__14051 invoke schema.clj 1163]
  [com.walmartlabs.lacinia.schema$create_root_selector$select_require_single_value__14053 invoke schema.clj 1171]
  [com.walmartlabs.lacinia.schema$create_root_selector$select_bypass_if_nil__14055 invoke schema.clj 1178]
  [com.walmartlabs.lacinia.schema$assemble_selector$select_list__14063$unwrapper__14064 invoke schema.clj 1223]
  [com.walmartlabs.lacinia.schema$assemble_selector$select_list__14063$fn__14066 invoke schema.clj 1231]
  [com.walmartlabs.lacinia.internal_utils$fast_map_indexed$fn__12209 invoke internal_utils.clj 122]
  [clojure.core$mapv$fn__8468 invoke core.clj 6914]
  [clojure.lang.PersistentVector reduce PersistentVector.java 343]
  [clojure.core$reduce invokeStatic core.clj 6829]
  [clojure.core$mapv invokeStatic core.clj 6905]
  [clojure.core$mapv invoke core.clj 6905]
  [com.walmartlabs.lacinia.internal_utils$fast_map_indexed invokeStatic internal_utils.clj 121]
  [com.walmartlabs.lacinia.internal_utils$fast_map_indexed invoke internal_utils.clj 118]
  [com.walmartlabs.lacinia.schema$assemble_selector$select_list__14063 invoke schema.clj 1231]
  [com.walmartlabs.lacinia.executor$resolve_and_select$process_resolved_value__17502 invoke executor.clj 297]
  [com.walmartlabs.lacinia.executor$resolve_and_select$unwrap_resolver_result__17505$receive_resolved_value_from_field__17506 invoke executor.clj 324]
  [com.walmartlabs.lacinia.resolve.ResolverResultImpl on_deliver_BANG_ resolve.clj 135]
  [com.walmartlabs.lacinia.executor$resolve_and_select$unwrap_resolver_result__17505 invoke executor.clj 322]
  [com.walmartlabs.lacinia.executor$resolve_and_select invokeStatic executor.clj 353]
  [com.walmartlabs.lacinia.executor$resolve_and_select invoke executor.clj 234]
  [com.walmartlabs.lacinia.executor$apply_field_selection invokeStatic executor.clj 140]
  [com.walmartlabs.lacinia.executor$apply_field_selection invoke executor.clj 135]
  [com.walmartlabs.lacinia.executor$apply_selection invokeStatic executor.clj 173]
  [com.walmartlabs.lacinia.executor$apply_selection invoke executor.clj 165]
  [com.walmartlabs.lacinia.executor$execute_nested_selections$fn__17481 invoke executor.clj 197]
  [com.walmartlabs.lacinia.internal_utils$keepv$fn__12187 invoke internal_utils.clj 46]
  [clojure.lang.ArrayChunk reduce ArrayChunk.java 58]
  [clojure.core.protocols$fn__8176 invokeStatic protocols.clj 136]
  [clojure.core.protocols$fn__8176 invoke protocols.clj 124]
  [clojure.core.protocols$fn__8136$G__8131__8145 invoke protocols.clj 19]
  [clojure.core.protocols$seq_reduce invokeStatic protocols.clj 31]
  [clojure.core.protocols$fn__8168 invokeStatic protocols.clj 75]
  [clojure.core.protocols$fn__8168 invoke protocols.clj 75]
  [clojure.core.protocols$fn__8110$G__8105__8123 invoke protocols.clj 13]
  [clojure.core$reduce invokeStatic core.clj 6830]
  [clojure.core$reduce invoke core.clj 6812]
  [com.walmartlabs.lacinia.internal_utils$keepv invokeStatic internal_utils.clj 45]
  [com.walmartlabs.lacinia.internal_utils$keepv invoke internal_utils.clj 41]
  [com.walmartlabs.lacinia.executor$execute_nested_selections invokeStatic executor.clj 197]
  [com.walmartlabs.lacinia.executor$execute_nested_selections invoke executor.clj 190]
  [com.walmartlabs.lacinia.executor$execute_query$fn__17519 invoke executor.clj 400]
  [clojure.lang.AFn applyToHelper AFn.java 152]
  [clojure.lang.AFn applyTo AFn.java 144]
  [clojure.core$apply invokeStatic core.clj 667]
  [clojure.core$with_bindings_STAR_ invokeStatic core.clj 1977]
  [clojure.core$with_bindings_STAR_ doInvoke core.clj 1977]
  [clojure.lang.RestFn invoke RestFn.java 425]
  [clojure.lang.AFn applyToHelper AFn.java 156]
  [clojure.lang.RestFn applyTo RestFn.java 132]
  [clojure.core$apply invokeStatic core.clj 671]
  [clojure.core$bound_fn_STAR_$fn__5767 doInvoke core.clj 2007]
  [clojure.lang.RestFn invoke RestFn.java 397]
  [com.walmartlabs.lacinia.executor$execute_query$fn__17524 invoke executor.clj 421]
  [clojure.core$binding_conveyor_fn$fn__5772 invoke core.clj 2034]
  [clojure.lang.AFn call AFn.java 18]
  [java.util.concurrent.FutureTask run FutureTask.java 264]
  [java.util.concurrent.ThreadPoolExecutor runWorker ThreadPoolExecutor.java 1128]
  [java.util.concurrent.ThreadPoolExecutor$Worker run ThreadPoolExecutor.java 628]
  [java.lang.Thread run Thread.java 829]]}

>request-grapql _> request {:leihs-user-language {:name English (UK), :locale en-GB, :default true, :active true}, :authenticated-entity {:email gil.lehner@skiles-hessel.biz, :contracts_count 0, :lastname Dare, :org_id nil, :scope_read true, :is_admin false, :authentication-method :session, :login nil, :scope_system_admin_write false, :scope_write true, :firstname Lauran, :scope_admin_write false, :user_session_created_at #time/instant "2023-12-16T14:15:41.061427Z", :id #uuid "e2049b76-6ef1-417e-97cb-25daa3591cb9", :user_session_id #uuid "68068f97-4973-4d98-95fb-3785cd798a82", :scope_system_admin_read false, :access-rights (), :user_id #uuid "e2049b76-6ef1-417e-97cb-25daa3591cb9", :is_system_admin false, :external_sign_out_url nil, :language_locale nil, :inventory_pool_roles_count 0, :scope_admin_read false}, :cookies {leihs-anti-csrf-token {:value d3e67c2b-5859-444b-9802-e84531752c5e}, leihs-user-session {:value f9d5ecf2-c843-4fc6-b086-dffa0ac974aa}}, :remote-addr 127.0.0.1, :start-time 228381902294791, :params {}, :settings {:email_sending_enabled false, :sessions_max_lifetime_secs 432000, :smtp_default_from_address your.lending.desk@example.com, :public_image_caching_enabled true, :sessions_force_secure false, :deliver_received_order_notifications false, :external_base_url nil, :sessions_force_uniqueness false, :email_signature Cheers,}, :tx-next #next.jdbc.default_options.DefaultOptions{:connectable #object[com.zaxxer.hikari.HikariDataSource 0x5bbb0d7f HikariDataSource (HikariPool-1)], :options {:builder-fn #object[next.jdbc.result_set$as_unqualified_lower_maps 0x3db93dbb next.jdbc.result_set$as_unqualified_lower_maps@3db93dbb]}}, :query-params-raw {}, :route-params nil, :headers {accept application/json, accept-encoding gzip;q=1.0,deflate;q=0.6,identity;q=0.3, content-length 174, content-type application/json, cookie leihs-anti-csrf-token=d3e67c2b-5859-444b-9802-e84531752c5e; leihs-user-session=f9d5ecf2-c843-4fc6-b086-dffa0ac974aa, host localhost:3230, user-agent Faraday v2.7.1, x-csrf-token d3e67c2b-5859-444b-9802-e84531752c5e}, :async-channel #object[org.httpkit.server.AsyncChannel 0x63934b0 /127.0.0.1:3230<->/127.0.0.1:55864], :server-port 3230, :params-raw {}, :tx {:datasource #object[com.zaxxer.hikari.HikariDataSource 0x18d95122 HikariDataSource (db-pool)]}, :content-length 174, :form-params {}, :websocket? false, :query-params {}, :content-type application/json, :form-params-raw {}, :character-encoding utf8, :uri /procure/graphql, :server-name localhost, :handler-key :graphql, :query-string nil, :body {:query           query {
            budget_periods {
              id
              total_price_cents_inspected_requests
            }
          }
, :variables {}}, :graphql-schema #CompiledSchema<>, :handler #object[leihs.procurement.graphql$handler 0x36e39341 leihs.procurement.graphql$handler@36e39341], :multipart-params {}, :scheme :http, :request-method :post, :accept {:mime :json, :charset nil, :encoding nil, :language nil}}

>request-c-grapql _> request (json) {"leihs-user-language":{"name":"English (UK)","locale":"en-GB","default":true,"active":true},"authenticated-entity":{"email":"gil.lehner@skiles-hessel.biz","contracts_count":0,"lastname":"Dare","org_id":null,"scope_read":true,"is_admin":false,"authentication-method":"session","login":null,"scope_system_admin_write":false,"scope_write":true,"firstname":"Lauran","scope_admin_write":false,"user_session_created_at":"2023-12-16T14:15:41.061427Z","id":"e2049b76-6ef1-417e-97cb-25daa3591cb9","user_session_id":"68068f97-4973-4d98-95fb-3785cd798a82","scope_system_admin_read":false,"access-rights":[],"user_id":"e2049b76-6ef1-417e-97cb-25daa3591cb9","is_system_admin":false,"external_sign_out_url":null,"language_locale":null,"inventory_pool_roles_count":0,"scope_admin_read":false},"cookies":{"leihs-anti-csrf-token":{"value":"d3e67c2b-5859-444b-9802-e84531752c5e"},"leihs-user-session":{"value":"f9d5ecf2-c843-4fc6-b086-dffa0ac974aa"}},"remote-addr":"127.0.0.1","start-time":228381902294791,"params":{},"settings":{"email_sending_enabled":false,"sessions_max_lifetime_secs":432000,"smtp_default_from_address":"your.lending.desk@example.com","public_image_caching_enabled":true,"sessions_force_secure":false,"deliver_received_order_notifications":false,"external_base_url":null,"sessions_force_uniqueness":false,"email_signature":"Cheers,"},"query-params-raw":{},"route-params":null,"headers":{"accept":"application\/json","accept-encoding":"gzip;q=1.0,deflate;q=0.6,identity;q=0.3","content-length":"174","content-type":"application\/json","cookie":"leihs-anti-csrf-token=d3e67c2b-5859-444b-9802-e84531752c5e; leihs-user-session=f9d5ecf2-c843-4fc6-b086-dffa0ac974aa","host":"localhost:3230","user-agent":"Faraday v2.7.1","x-csrf-token":"d3e67c2b-5859-444b-9802-e84531752c5e"},"server-port":3230,"params-raw":{},"content-length":174,"form-params":{},"websocket?":false,"query-params":{},"content-type":"application\/json","form-params-raw":{},"character-encoding":"utf8","uri":"\/procure\/graphql","server-name":"localhost","handler-key":"graphql","query-string":null,"body":{"query":"          query {\n            budget_periods {\n              id\n              total_price_cents_inspected_requests\n            }\n          }\n","variables":{}},"multipart-params":{},"scheme":"http","request-method":"post","accept":{"mime":"json","charset":null,"encoding":null,"language":null}}

>request-grapql _> result => {:data #ordered/map ([:budget_periods [#ordered/map ([:id c67c0c5a-c10a-47dd-a91c-e976d5ee362f] [:total_price_cents_inspected_requests nil])]]), :errors ({:message UnauthorizedException - Not authorized for this query path and arguments., :locations [{:line 4, :column 15}], :path [:budget_periods 0 :total_price_cents_inspected_requests], :extensions {:exception ExceptionInfo}})}
2023-12-16T14:15:41.083Z NX-41294 DEBUG [leihs.procurement.graphql:86] - result => {:data #ordered/map ([:budget_periods [#ordered/map ([:id "c67c0c5a-c10a-47dd-a91c-e976d5ee362f"] [:total_price_cents_inspected_requests nil])]]), :errors ({:message "UnauthorizedException - Not authorized for this query path and arguments.", :locations [{:line 4, :column 15}], :path [:budget_periods 0 :total_price_cents_inspected_requests], :extensions {:exception "ExceptionInfo"}})}
2023-12-16T14:15:41.083Z NX-41294 DEBUG [leihs.procurement.graphql:87] - {:data #ordered/map ([:budget_periods [#ordered/map ([:id "c67c0c5a-c10a-47dd-a91c-e976d5ee362f"] [:total_price_cents_inspected_requests nil])]]), :errors ({:message "UnauthorizedException - Not authorized for this query path and arguments.", :locations [{:line 4, :column 15}], :path [:budget_periods 0 :total_price_cents_inspected_requests], :extensions {:exception "ExceptionInfo"}})}

>o> ERROR 4pure-handler, result=> {:data #ordered/map ([:budget_periods [#ordered/map ([:id c67c0c5a-c10a-47dd-a91c-e976d5ee362f] [:total_price_cents_inspected_requests nil])]]), :errors ({:message UnauthorizedException - Not authorized for this query path and arguments., :locations [{:line 4, :column 15}], :path [:budget_periods 0 :total_price_cents_inspected_requests], :extensions {:exception ExceptionInfo}})}
>>> authenticate::skip= true  handler-key= :sign-in
>>> authenticate::authenticated-entity nil

>> authorize >

>> authorize::handler > #object[leihs.core.locale$wrap$fn__45448 0x2031e135 leihs.core.locale$wrap$fn__45448@2031e135]

>> authorize::request > {:cookies {}, :remote-addr 127.0.0.1, :start-time 228383206156291, :params {}, :settings {:email_sending_enabled false, :sessions_max_lifetime_secs 432000, :smtp_default_from_address your.lending.desk@example.com, :public_image_caching_enabled true, :sessions_force_secure false, :deliver_received_order_notifications false, :external_base_url nil, :sessions_force_uniqueness false, :email_signature Cheers,}, :tx-next #next.jdbc.default_options.DefaultOptions{:connectable #object[com.zaxxer.hikari.HikariDataSource 0x5bbb0d7f HikariDataSource (HikariPool-1)], :options {:builder-fn #object[next.jdbc.result_set$as_unqualified_lower_maps 0x3db93dbb next.jdbc.result_set$as_unqualified_lower_maps@3db93dbb]}}, :query-params-raw {}, :route-params nil, :headers {accept */*, accept-encoding gzip;q=1.0,deflate;q=0.6,identity;q=0.3, host localhost:3230, user-agent Faraday v2.7.1}, :async-channel #object[org.httpkit.server.AsyncChannel 0x5c2bf57e /127.0.0.1:3230<->/127.0.0.1:55870], :server-port 3230, :params-raw {}, :tx {:datasource #object[com.zaxxer.hikari.HikariDataSource 0x18d95122 HikariDataSource (db-pool)]}, :content-length 0, :form-params {}, :websocket? false, :query-params {}, :content-type nil, :form-params-raw {}, :character-encoding utf8, :uri /sign-in, :server-name localhost, :handler-key :sign-in, :query-string nil, :body nil, :graphql-schema #CompiledSchema<>, :handler #object[compojure.core$routes$fn__27950 0x17459cfd compojure.core$routes$fn__27950@17459cfd], :multipart-params {}, :scheme :http, :request-method :get, :accept {:mime :html, :charset nil, :encoding nil, :language nil}}

>> authorize::handler-key >> :sign-in
>myprint>  authEnt? nil
>myprint>  txn #next.jdbc.default_options.DefaultOptions{:connectable #object[com.zaxxer.hikari.HikariDataSource 0x5bbb0d7f HikariDataSource (HikariPool-1)], :options {:builder-fn #object[next.jdbc.result_set$as_unqualified_lower_maps 0x3db93dbb next.jdbc.result_set$as_unqualified_lower_maps@3db93dbb]}}
2023-12-16T14:15:42.391Z NX-41294 DEBUG [leihs.procurement.permissions.user:?] - (sql-format (sql/select [[:exists (-> (sql/select [true :exists]) (sql/from :procurement_admins) (sql/where [:= :procurement_admins.user_id [:cast (:user_id auth-entity) :uuid]]))]])) => ["SELECT EXISTS (SELECT TRUE AS exists FROM procurement_admins WHERE procurement_admins.user_id = CAST(NULL AS UUID))"]
>o> admin? [SELECT EXISTS (SELECT TRUE AS exists FROM procurement_admins WHERE procurement_admins.user_id = CAST(NULL AS UUID))]
2023-12-16T14:15:42.391Z NX-41294 DEBUG [leihs.procurement.permissions.user:38] - query => ["SELECT EXISTS (SELECT TRUE AS exists FROM procurement_admins WHERE procurement_admins.user_id = CAST(NULL AS UUID))"]
>o> admin? {:exists false}
2023-12-16T14:15:42.393Z NX-41294 DEBUG [leihs.procurement.permissions.user:42] - (:exists result) => false
>myprint>  admin false
>o> inspector? [SELECT EXISTS (SELECT TRUE AS exists FROM procurement_category_inspectors WHERE procurement_category_inspectors.user_id = CAST(NULL AS UUID)) AS result]
2023-12-16T14:15:42.393Z NX-41294 DEBUG [leihs.procurement.permissions.user:62] - query => ["SELECT EXISTS (SELECT TRUE AS exists FROM procurement_category_inspectors WHERE procurement_category_inspectors.user_id = CAST(NULL AS UUID)) AS result"]
>o> inspector? {:result false}
>myprint>  inspector false
>o> viewer? [SELECT EXISTS (SELECT TRUE AS exists FROM procurement_category_viewers WHERE procurement_category_viewers.user_id = CAST(NULL AS UUID)) AS result]
2023-12-16T14:15:42.402Z NX-41294 DEBUG [leihs.procurement.permissions.user:85] - query => ["SELECT EXISTS (SELECT TRUE AS exists FROM procurement_category_viewers WHERE procurement_category_viewers.user_id = CAST(NULL AS UUID)) AS result"]
>o> viewer? {:result false}
>myprint>  viewer false
>o> requester?? [SELECT EXISTS (SELECT TRUE AS exists FROM procurement_requesters_organizations WHERE procurement_requesters_organizations.user_id = CAST(NULL AS UUID))]
2023-12-16T14:15:42.404Z NX-41294 DEBUG [leihs.procurement.permissions.user:169] - query => ["SELECT EXISTS (SELECT TRUE AS exists FROM procurement_requesters_organizations WHERE procurement_requesters_organizations.user_id = CAST(NULL AS UUID))"]
>o> requester?? {:exists false}
2023-12-16T14:15:42.405Z NX-41294 DEBUG [leihs.procurement.permissions.user:173] - (:exists result) => false
>myprint>  requester false
>>> authenticate::skip= true  handler-key= :sign-in
>>> authenticate::authenticated-entity nil

>> authorize >

>> authorize::handler > #object[leihs.core.locale$wrap$fn__45448 0x2031e135 leihs.core.locale$wrap$fn__45448@2031e135]

>> authorize::request > {:cookies {leihs-anti-csrf-token {:value 82c43046-d7fb-470c-9123-e060937e4c2c}}, :remote-addr 127.0.0.1, :start-time 228383284071541, :params {:password password, :user sachiko@hartmann.info}, :settings {:email_sending_enabled false, :sessions_max_lifetime_secs 432000, :smtp_default_from_address your.lending.desk@example.com, :public_image_caching_enabled true, :sessions_force_secure false, :deliver_received_order_notifications false, :external_base_url nil, :sessions_force_uniqueness false, :email_signature Cheers,}, :tx-next #next.jdbc.default_options.DefaultOptions{:connectable #object[com.zaxxer.hikari.pool.HikariProxyConnection 0x7e00d80d HikariProxyConnection@2113984525 wrapping org.postgresql.jdbc.PgConnection@72b35f05], :options {:builder-fn #object[next.jdbc.result_set$as_unqualified_lower_maps 0x3db93dbb next.jdbc.result_set$as_unqualified_lower_maps@3db93dbb]}}, :query-params-raw {}, :route-params nil, :headers {accept */*, accept-encoding gzip;q=1.0,deflate;q=0.6,identity;q=0.3, content-length 46, content-type application/x-www-form-urlencoded, cookie leihs-anti-csrf-token=82c43046-d7fb-470c-9123-e060937e4c2c, host localhost:3230, user-agent Faraday v2.7.1, x-csrf-token 82c43046-d7fb-470c-9123-e060937e4c2c}, :async-channel #object[org.httpkit.server.AsyncChannel 0x127fdf3c /127.0.0.1:3230<->/127.0.0.1:55871], :server-port 3230, :params-raw {:password password, :user sachiko@hartmann.info}, :tx {:datasource #object[com.zaxxer.hikari.HikariDataSource 0x18d95122 HikariDataSource (db-pool)], :connection #object[com.zaxxer.hikari.pool.HikariProxyConnection 0x79d5b37a HikariProxyConnection@2044048250 wrapping org.postgresql.jdbc.PgConnection@68f5f480], :level 1, :rollback #object[clojure.lang.Atom 0xb3b32d7 {:status :ready, :val false}]}, :content-length 46, :form-params {:password password, :user sachiko@hartmann.info}, :websocket? false, :query-params {}, :content-type application/x-www-form-urlencoded, :form-params-raw {:password password, :user sachiko@hartmann.info}, :character-encoding utf8, :uri /sign-in, :server-name localhost, :handler-key :sign-in, :query-string nil, :body #object[org.httpkit.BytesInputStream 0x7383430d BytesInputStream[len=46]], :graphql-schema #CompiledSchema<>, :handler #object[compojure.core$routes$fn__27950 0x17459cfd compojure.core$routes$fn__27950@17459cfd], :multipart-params {}, :scheme :http, :request-method :post, :accept {:mime :html, :charset nil, :encoding nil, :language nil}}

>> authorize::handler-key >> :sign-in
>myprint>  authEnt? nil
>myprint>  txn #next.jdbc.default_options.DefaultOptions{:connectable #object[com.zaxxer.hikari.pool.HikariProxyConnection 0x7e00d80d HikariProxyConnection@2113984525 wrapping org.postgresql.jdbc.PgConnection@72b35f05], :options {:builder-fn #object[next.jdbc.result_set$as_unqualified_lower_maps 0x3db93dbb next.jdbc.result_set$as_unqualified_lower_maps@3db93dbb]}}
2023-12-16T14:15:42.452Z NX-41294 DEBUG [leihs.procurement.permissions.user:?] - (sql-format (sql/select [[:exists (-> (sql/select [true :exists]) (sql/from :procurement_admins) (sql/where [:= :procurement_admins.user_id [:cast (:user_id auth-entity) :uuid]]))]])) => ["SELECT EXISTS (SELECT TRUE AS exists FROM procurement_admins WHERE procurement_admins.user_id = CAST(NULL AS UUID))"]
>o> admin? [SELECT EXISTS (SELECT TRUE AS exists FROM procurement_admins WHERE procurement_admins.user_id = CAST(NULL AS UUID))]
2023-12-16T14:15:42.452Z NX-41294 DEBUG [leihs.procurement.permissions.user:38] - query => ["SELECT EXISTS (SELECT TRUE AS exists FROM procurement_admins WHERE procurement_admins.user_id = CAST(NULL AS UUID))"]
>o> admin? {:exists false}
2023-12-16T14:15:42.453Z NX-41294 DEBUG [leihs.procurement.permissions.user:42] - (:exists result) => false
>myprint>  admin false
>o> inspector? [SELECT EXISTS (SELECT TRUE AS exists FROM procurement_category_inspectors WHERE procurement_category_inspectors.user_id = CAST(NULL AS UUID)) AS result]
2023-12-16T14:15:42.453Z NX-41294 DEBUG [leihs.procurement.permissions.user:62] - query => ["SELECT EXISTS (SELECT TRUE AS exists FROM procurement_category_inspectors WHERE procurement_category_inspectors.user_id = CAST(NULL AS UUID)) AS result"]
>o> inspector? {:result false}
>myprint>  inspector false
>o> viewer? [SELECT EXISTS (SELECT TRUE AS exists FROM procurement_category_viewers WHERE procurement_category_viewers.user_id = CAST(NULL AS UUID)) AS result]
2023-12-16T14:15:42.453Z NX-41294 DEBUG [leihs.procurement.permissions.user:85] - query => ["SELECT EXISTS (SELECT TRUE AS exists FROM procurement_category_viewers WHERE procurement_category_viewers.user_id = CAST(NULL AS UUID)) AS result"]
>o> viewer? {:result false}
>myprint>  viewer false
>o> requester?? [SELECT EXISTS (SELECT TRUE AS exists FROM procurement_requesters_organizations WHERE procurement_requesters_organizations.user_id = CAST(NULL AS UUID))]
2023-12-16T14:15:42.454Z NX-41294 DEBUG [leihs.procurement.permissions.user:169] - query => ["SELECT EXISTS (SELECT TRUE AS exists FROM procurement_requesters_organizations WHERE procurement_requesters_organizations.user_id = CAST(NULL AS UUID))"]
>o> requester?? {:exists false}
2023-12-16T14:15:42.454Z NX-41294 DEBUG [leihs.procurement.permissions.user:173] - (:exists result) => false
>myprint>  requester false
>>> authenticate::skip= nil  handler-key= :graphql
>>> authenticate::authenticated-entity {:email sachiko@hartmann.info, :contracts_count 0, :lastname Gorczany, :org_id nil, :scope_read true, :is_admin false, :authentication-method :session, :login nil, :scope_system_admin_write false, :scope_write true, :firstname Amelia, :scope_admin_write false, :user_session_created_at #time/instant "2023-12-16T14:15:42.465483Z", :id #uuid "5952b073-9726-4cd0-9b31-d8732cae2bae", :user_session_id #uuid "6a179cea-622c-4031-a799-5019e95c4d02", :scope_system_admin_read false, :access-rights (), :user_id #uuid "5952b073-9726-4cd0-9b31-d8732cae2bae", :is_system_admin false, :external_sign_out_url nil, :language_locale nil, :inventory_pool_roles_count 0, :scope_admin_read false}

>> authorize >

>> authorize::handler > #object[leihs.core.locale$wrap$fn__45448 0x2031e135 leihs.core.locale$wrap$fn__45448@2031e135]

>> authorize::request > {:authenticated-entity {:email sachiko@hartmann.info, :contracts_count 0, :lastname Gorczany, :org_id nil, :scope_read true, :is_admin false, :authentication-method :session, :login nil, :scope_system_admin_write false, :scope_write true, :firstname Amelia, :scope_admin_write false, :user_session_created_at #time/instant "2023-12-16T14:15:42.465483Z", :id #uuid "5952b073-9726-4cd0-9b31-d8732cae2bae", :user_session_id #uuid "6a179cea-622c-4031-a799-5019e95c4d02", :scope_system_admin_read false, :access-rights (), :user_id #uuid "5952b073-9726-4cd0-9b31-d8732cae2bae", :is_system_admin false, :external_sign_out_url nil, :language_locale nil, :inventory_pool_roles_count 0, :scope_admin_read false}, :cookies {leihs-anti-csrf-token {:value 82c43046-d7fb-470c-9123-e060937e4c2c}, leihs-user-session {:value 7bc6acfc-3845-4522-b953-7aeaadaace9a}}, :remote-addr 127.0.0.1, :start-time 228383319193291, :params {}, :settings {:email_sending_enabled false, :sessions_max_lifetime_secs 432000, :smtp_default_from_address your.lending.desk@example.com, :public_image_caching_enabled true, :sessions_force_secure false, :deliver_received_order_notifications false, :external_base_url nil, :sessions_force_uniqueness false, :email_signature Cheers,}, :tx-next #next.jdbc.default_options.DefaultOptions{:connectable #object[com.zaxxer.hikari.pool.HikariProxyConnection 0x74eb2e7c HikariProxyConnection@1961569916 wrapping org.postgresql.jdbc.PgConnection@72b35f05], :options {:builder-fn #object[next.jdbc.result_set$as_unqualified_lower_maps 0x3db93dbb next.jdbc.result_set$as_unqualified_lower_maps@3db93dbb]}}, :query-params-raw {}, :route-params nil, :headers {accept application/json, accept-encoding gzip;q=1.0,deflate;q=0.6,identity;q=0.3, content-length 602, content-type application/json, cookie leihs-anti-csrf-token=82c43046-d7fb-470c-9123-e060937e4c2c; leihs-user-session=7bc6acfc-3845-4522-b953-7aeaadaace9a, host localhost:3230, user-agent Faraday v2.7.1, x-csrf-token 82c43046-d7fb-470c-9123-e060937e4c2c}, :async-channel #object[org.httpkit.server.AsyncChannel 0x6a8fb4c1 /127.0.0.1:3230<->/127.0.0.1:55872], :server-port 3230, :params-raw {}, :tx {:datasource #object[com.zaxxer.hikari.HikariDataSource 0x18d95122 HikariDataSource (db-pool)], :connection #object[com.zaxxer.hikari.pool.HikariProxyConnection 0x5449aebd HikariProxyConnection@1414115005 wrapping org.postgresql.jdbc.PgConnection@68f5f480], :level 1, :rollback #object[clojure.lang.Atom 0x6fe45e8 {:status :ready, :val false}]}, :content-length 602, :form-params {}, :websocket? false, :query-params {}, :content-type application/json, :form-params-raw {}, :character-encoding utf8, :uri /procure/graphql, :server-name localhost, :handler-key :graphql, :query-string nil, :body {:query         mutation {
          budget_periods (
            input_data: [
              { id: "d1b3dae2-bfac-4e04-953c-447eb259a826",
                name: "bp_1_new_name",
                inspection_start_date: "2024-06-01T00:00:00+00:00",
                end_date: "2024-12-01T00:00:00+00:00" },
              { id: null,
                name: "new_bp",
                inspection_start_date: "2025-06-01T00:00:00+00:00",
                end_date: "2025-12-01T00:00:00+00:00" }
            ]
          ) {
            name
          }
        }
, :variables {}}, :graphql-schema #CompiledSchema<>, :handler #object[leihs.procurement.graphql$handler 0x36e39341 leihs.procurement.graphql$handler@36e39341], :multipart-params {}, :scheme :http, :request-method :post, :accept {:mime :json, :charset nil, :encoding nil, :language nil}}

>> authorize::handler-key >> :graphql
>myprint>  authEnt? {:email sachiko@hartmann.info, :contracts_count 0, :lastname Gorczany, :org_id nil, :scope_read true, :is_admin false, :authentication-method :session, :login nil, :scope_system_admin_write false, :scope_write true, :firstname Amelia, :scope_admin_write false, :user_session_created_at #time/instant "2023-12-16T14:15:42.465483Z", :id #uuid "5952b073-9726-4cd0-9b31-d8732cae2bae", :user_session_id #uuid "6a179cea-622c-4031-a799-5019e95c4d02", :scope_system_admin_read false, :access-rights (), :user_id #uuid "5952b073-9726-4cd0-9b31-d8732cae2bae", :is_system_admin false, :external_sign_out_url nil, :language_locale nil, :inventory_pool_roles_count 0, :scope_admin_read false}
>myprint>  txn #next.jdbc.default_options.DefaultOptions{:connectable #object[com.zaxxer.hikari.pool.HikariProxyConnection 0x74eb2e7c HikariProxyConnection@1961569916 wrapping org.postgresql.jdbc.PgConnection@72b35f05], :options {:builder-fn #object[next.jdbc.result_set$as_unqualified_lower_maps 0x3db93dbb next.jdbc.result_set$as_unqualified_lower_maps@3db93dbb]}}
2023-12-16T14:15:42.499Z NX-41294 DEBUG [leihs.procurement.permissions.user:?] - (sql-format (sql/select [[:exists (-> (sql/select [true :exists]) (sql/from :procurement_admins) (sql/where [:= :procurement_admins.user_id [:cast (:user_id auth-entity) :uuid]]))]])) => ["SELECT EXISTS (SELECT TRUE AS exists FROM procurement_admins WHERE procurement_admins.user_id = CAST(? AS UUID))" #uuid "5952b073-9726-4cd0-9b31-d8732cae2bae"]
>o> admin? [SELECT EXISTS (SELECT TRUE AS exists FROM procurement_admins WHERE procurement_admins.user_id = CAST(? AS UUID)) #uuid "5952b073-9726-4cd0-9b31-d8732cae2bae"]
2023-12-16T14:15:42.499Z NX-41294 DEBUG [leihs.procurement.permissions.user:38] - query => ["SELECT EXISTS (SELECT TRUE AS exists FROM procurement_admins WHERE procurement_admins.user_id = CAST(? AS UUID))" #uuid "5952b073-9726-4cd0-9b31-d8732cae2bae"]
>o> admin? {:exists false}
2023-12-16T14:15:42.499Z NX-41294 DEBUG [leihs.procurement.permissions.user:42] - (:exists result) => false
>myprint>  admin false
>o> inspector? [SELECT EXISTS (SELECT TRUE AS exists FROM procurement_category_inspectors WHERE procurement_category_inspectors.user_id = CAST(? AS UUID)) AS result #uuid "5952b073-9726-4cd0-9b31-d8732cae2bae"]
2023-12-16T14:15:42.500Z NX-41294 DEBUG [leihs.procurement.permissions.user:62] - query => ["SELECT EXISTS (SELECT TRUE AS exists FROM procurement_category_inspectors WHERE procurement_category_inspectors.user_id = CAST(? AS UUID)) AS result" #uuid "5952b073-9726-4cd0-9b31-d8732cae2bae"]
>o> inspector? {:result true}
>myprint>  inspector true
>o> viewer? [SELECT EXISTS (SELECT TRUE AS exists FROM procurement_category_viewers WHERE procurement_category_viewers.user_id = CAST(? AS UUID)) AS result #uuid "5952b073-9726-4cd0-9b31-d8732cae2bae"]
2023-12-16T14:15:42.500Z NX-41294 DEBUG [leihs.procurement.permissions.user:85] - query => ["SELECT EXISTS (SELECT TRUE AS exists FROM procurement_category_viewers WHERE procurement_category_viewers.user_id = CAST(? AS UUID)) AS result" #uuid "5952b073-9726-4cd0-9b31-d8732cae2bae"]
>o> viewer? {:result false}
>myprint>  viewer false
>o> requester?? [SELECT EXISTS (SELECT TRUE AS exists FROM procurement_requesters_organizations WHERE procurement_requesters_organizations.user_id = CAST(? AS UUID)) #uuid "5952b073-9726-4cd0-9b31-d8732cae2bae"]
2023-12-16T14:15:42.501Z NX-41294 DEBUG [leihs.procurement.permissions.user:169] - query => ["SELECT EXISTS (SELECT TRUE AS exists FROM procurement_requesters_organizations WHERE procurement_requesters_organizations.user_id = CAST(? AS UUID))" #uuid "5952b073-9726-4cd0-9b31-d8732cae2bae"]
>o> requester?? {:exists false}
2023-12-16T14:15:42.501Z NX-41294 DEBUG [leihs.procurement.permissions.user:173] - (:exists result) => false
>myprint>  requester false
2023-12-16T14:15:42.501Z NX-41294 DEBUG [leihs.procurement.permissions.user:?] - (sql-format (sql/select [[:exists (-> (sql/select [true :exists]) (sql/from :procurement_admins) (sql/where [:= :procurement_admins.user_id [:cast (:user_id auth-entity) :uuid]]))]])) => ["SELECT EXISTS (SELECT TRUE AS exists FROM procurement_admins WHERE procurement_admins.user_id = CAST(? AS UUID))" #uuid "5952b073-9726-4cd0-9b31-d8732cae2bae"]
>o> admin? [SELECT EXISTS (SELECT TRUE AS exists FROM procurement_admins WHERE procurement_admins.user_id = CAST(? AS UUID)) #uuid "5952b073-9726-4cd0-9b31-d8732cae2bae"]
2023-12-16T14:15:42.501Z NX-41294 DEBUG [leihs.procurement.permissions.user:38] - query => ["SELECT EXISTS (SELECT TRUE AS exists FROM procurement_admins WHERE procurement_admins.user_id = CAST(? AS UUID))" #uuid "5952b073-9726-4cd0-9b31-d8732cae2bae"]
>o> admin? {:exists false}
2023-12-16T14:15:42.501Z NX-41294 DEBUG [leihs.procurement.permissions.user:42] - (:exists result) => false
>o> inspector? [SELECT EXISTS (SELECT TRUE AS exists FROM procurement_category_inspectors WHERE procurement_category_inspectors.user_id = CAST(? AS UUID)) AS result #uuid "5952b073-9726-4cd0-9b31-d8732cae2bae"]
2023-12-16T14:15:42.502Z NX-41294 DEBUG [leihs.procurement.permissions.user:62] - query => ["SELECT EXISTS (SELECT TRUE AS exists FROM procurement_category_inspectors WHERE procurement_category_inspectors.user_id = CAST(? AS UUID)) AS result" #uuid "5952b073-9726-4cd0-9b31-d8732cae2bae"]
>o> inspector? {:result true}
>o> viewer? [SELECT EXISTS (SELECT TRUE AS exists FROM procurement_category_viewers WHERE procurement_category_viewers.user_id = CAST(? AS UUID)) AS result #uuid "5952b073-9726-4cd0-9b31-d8732cae2bae"]
2023-12-16T14:15:42.502Z NX-41294 DEBUG [leihs.procurement.permissions.user:85] - query => ["SELECT EXISTS (SELECT TRUE AS exists FROM procurement_category_viewers WHERE procurement_category_viewers.user_id = CAST(? AS UUID)) AS result" #uuid "5952b073-9726-4cd0-9b31-d8732cae2bae"]
>o> viewer? {:result false}
>o> requester?? [SELECT EXISTS (SELECT TRUE AS exists FROM procurement_requesters_organizations WHERE procurement_requesters_organizations.user_id = CAST(? AS UUID)) #uuid "5952b073-9726-4cd0-9b31-d8732cae2bae"]
2023-12-16T14:15:42.502Z NX-41294 DEBUG [leihs.procurement.permissions.user:169] - query => ["SELECT EXISTS (SELECT TRUE AS exists FROM procurement_requesters_organizations WHERE procurement_requesters_organizations.user_id = CAST(? AS UUID))" #uuid "5952b073-9726-4cd0-9b31-d8732cae2bae"]
>o> requester?? {:exists false}
2023-12-16T14:15:42.502Z NX-41294 DEBUG [leihs.procurement.permissions.user:173] - (:exists result) => false
pure-handler >> 1
2023-12-16T14:15:42.505Z NX-41294 DEBUG [leihs.procurement.graphql:46] - graphql query         mutation {
          budget_periods (
            input_data: [
              { id: "d1b3dae2-bfac-4e04-953c-447eb259a826",
                name: "bp_1_new_name",
                inspection_start_date: "2024-06-01T00:00:00+00:00",
                end_date: "2024-12-01T00:00:00+00:00" },
              { id: null,
                name: "new_bp",
                inspection_start_date: "2025-06-01T00:00:00+00:00",
                end_date: "2025-12-01T00:00:00+00:00" }
            ]
          ) {
            name
          }
        }
 with variables {}
>oo> vars from graphQL-Requst nil nil nil {}
>>1x #next.jdbc.default_options.DefaultOptions{:connectable #object[com.zaxxer.hikari.pool.HikariProxyConnection 0x74eb2e7c HikariProxyConnection@1961569916 wrapping org.postgresql.jdbc.PgConnection@72b35f05], :options {:builder-fn #object[next.jdbc.result_set$as_unqualified_lower_maps 0x3db93dbb next.jdbc.result_set$as_unqualified_lower_maps@3db93dbb]}}
>>2x {:email sachiko@hartmann.info, :contracts_count 0, :lastname Gorczany, :org_id nil, :scope_read true, :is_admin false, :authentication-method :session, :login nil, :scope_system_admin_write false, :scope_write true, :firstname Amelia, :scope_admin_write false, :user_session_created_at #time/instant "2023-12-16T14:15:42.465483Z", :id #uuid "5952b073-9726-4cd0-9b31-d8732cae2bae", :user_session_id #uuid "6a179cea-622c-4031-a799-5019e95c4d02", :scope_system_admin_read false, :access-rights (), :user_id #uuid "5952b073-9726-4cd0-9b31-d8732cae2bae", :is_system_admin false, :external_sign_out_url nil, :language_locale nil, :inventory_pool_roles_count 0, :scope_admin_read false}
2023-12-16T14:15:42.506Z NX-41294 DEBUG [leihs.procurement.permissions.user:?] - (sql-format (sql/select [[:exists (-> (sql/select [true :exists]) (sql/from :procurement_admins) (sql/where [:= :procurement_admins.user_id [:cast (:user_id auth-entity) :uuid]]))]])) => ["SELECT EXISTS (SELECT TRUE AS exists FROM procurement_admins WHERE procurement_admins.user_id = CAST(? AS UUID))" #uuid "5952b073-9726-4cd0-9b31-d8732cae2bae"]
>o> admin? [SELECT EXISTS (SELECT TRUE AS exists FROM procurement_admins WHERE procurement_admins.user_id = CAST(? AS UUID)) #uuid "5952b073-9726-4cd0-9b31-d8732cae2bae"]
2023-12-16T14:15:42.506Z NX-41294 DEBUG [leihs.procurement.permissions.user:38] - query => ["SELECT EXISTS (SELECT TRUE AS exists FROM procurement_admins WHERE procurement_admins.user_id = CAST(? AS UUID))" #uuid "5952b073-9726-4cd0-9b31-d8732cae2bae"]
>o> admin? {:exists false}
2023-12-16T14:15:42.507Z NX-41294 DEBUG [leihs.procurement.permissions.user:42] - (:exists result) => false
>e> #error {
 :cause UnauthorizedException - Not authorized for this query path and arguments.
 :data {:status 403}
 :via
 [{:type clojure.lang.ExceptionInfo
   :message UnauthorizedException - Not authorized for this query path and arguments.
   :data {:status 403}
   :at [leihs.procurement.authorization$throw_unauthorized invokeStatic authorization.clj 22]}]
 :trace
 [[leihs.procurement.authorization$throw_unauthorized invokeStatic authorization.clj 22]
  [leihs.procurement.authorization$throw_unauthorized invoke authorization.clj 21]
  [leihs.procurement.authorization$wrap_ensure_one_of$fn__39324 invoke authorization.clj 40]
  [leihs.procurement.graphql.resolver$wrap_resolver_with_error$fn__45634 invoke resolver.clj 16]
  [com.walmartlabs.lacinia.schema$wrap_resolver_to_ensure_resolver_result$fn__14023 invoke schema.clj 986]
  [com.walmartlabs.lacinia.executor$invoke_resolver_for_field invokeStatic executor.clj 86]
  [com.walmartlabs.lacinia.executor$invoke_resolver_for_field invoke executor.clj 68]
  [com.walmartlabs.lacinia.executor$resolve_and_select invokeStatic executor.clj 353]
  [com.walmartlabs.lacinia.executor$resolve_and_select invoke executor.clj 234]
  [com.walmartlabs.lacinia.executor$apply_field_selection invokeStatic executor.clj 140]
  [com.walmartlabs.lacinia.executor$apply_field_selection invoke executor.clj 135]
  [com.walmartlabs.lacinia.executor$apply_selection invokeStatic executor.clj 173]
  [com.walmartlabs.lacinia.executor$apply_selection invoke executor.clj 165]
  [com.walmartlabs.lacinia.executor$combine_selection_results_sync$fn__17487 invoke executor.clj 212]
  [com.walmartlabs.lacinia.resolve.ResolverResultImpl on_deliver_BANG_ resolve.clj 135]
  [com.walmartlabs.lacinia.executor$combine_selection_results_sync invokeStatic executor.clj 208]
  [com.walmartlabs.lacinia.executor$combine_selection_results_sync invoke executor.clj 203]
  [com.walmartlabs.lacinia.executor$execute_nested_selections_sync$fn__17494 invoke executor.clj 230]
  [clojure.lang.ArrayChunk reduce ArrayChunk.java 58]
  [clojure.core.protocols$fn__8176 invokeStatic protocols.clj 136]
  [clojure.core.protocols$fn__8176 invoke protocols.clj 124]
  [clojure.core.protocols$fn__8136$G__8131__8145 invoke protocols.clj 19]
  [clojure.core.protocols$seq_reduce invokeStatic protocols.clj 31]
  [clojure.core.protocols$fn__8168 invokeStatic protocols.clj 75]
  [clojure.core.protocols$fn__8168 invoke protocols.clj 75]
  [clojure.core.protocols$fn__8110$G__8105__8123 invoke protocols.clj 13]
  [clojure.core$reduce invokeStatic core.clj 6830]
  [clojure.core$reduce invoke core.clj 6812]
  [com.walmartlabs.lacinia.executor$execute_nested_selections_sync invokeStatic executor.clj 230]
  [com.walmartlabs.lacinia.executor$execute_nested_selections_sync invoke executor.clj 221]
  [com.walmartlabs.lacinia.executor$execute_query$fn__17519 invoke executor.clj 400]
  [clojure.lang.AFn applyToHelper AFn.java 152]
  [clojure.lang.AFn applyTo AFn.java 144]
  [clojure.core$apply invokeStatic core.clj 667]
  [clojure.core$with_bindings_STAR_ invokeStatic core.clj 1977]
  [clojure.core$with_bindings_STAR_ doInvoke core.clj 1977]
  [clojure.lang.RestFn invoke RestFn.java 425]
  [clojure.lang.AFn applyToHelper AFn.java 156]
  [clojure.lang.RestFn applyTo RestFn.java 132]
  [clojure.core$apply invokeStatic core.clj 671]
  [clojure.core$bound_fn_STAR_$fn__5767 doInvoke core.clj 2007]
  [clojure.lang.RestFn invoke RestFn.java 397]
  [com.walmartlabs.lacinia.executor$execute_query$fn__17524 invoke executor.clj 421]
  [clojure.core$binding_conveyor_fn$fn__5772 invoke core.clj 2034]
  [clojure.lang.AFn call AFn.java 18]
  [java.util.concurrent.FutureTask run FutureTask.java 264]
  [java.util.concurrent.ThreadPoolExecutor runWorker ThreadPoolExecutor.java 1128]
  [java.util.concurrent.ThreadPoolExecutor$Worker run ThreadPoolExecutor.java 628]
  [java.lang.Thread run Thread.java 829]]}
2023-12-16T14:15:42.507Z NX-41294 WARN [leihs.procurement.graphql.resolver:326] - UnauthorizedException - Not authorized for this query path and arguments.
2023-12-16T14:15:42.507Z NX-41294 DEBUG [leihs.procurement.graphql.resolver:326] - #error {
 :cause UnauthorizedException - Not authorized for this query path and arguments.
 :data {:status 403}
 :via
 [{:type clojure.lang.ExceptionInfo
   :message UnauthorizedException - Not authorized for this query path and arguments.
   :data {:status 403}
   :at [leihs.procurement.authorization$throw_unauthorized invokeStatic authorization.clj 22]}]
 :trace
 [[leihs.procurement.authorization$throw_unauthorized invokeStatic authorization.clj 22]
  [leihs.procurement.authorization$throw_unauthorized invoke authorization.clj 21]
  [leihs.procurement.authorization$wrap_ensure_one_of$fn__39324 invoke authorization.clj 40]
  [leihs.procurement.graphql.resolver$wrap_resolver_with_error$fn__45634 invoke resolver.clj 16]
  [com.walmartlabs.lacinia.schema$wrap_resolver_to_ensure_resolver_result$fn__14023 invoke schema.clj 986]
  [com.walmartlabs.lacinia.executor$invoke_resolver_for_field invokeStatic executor.clj 86]
  [com.walmartlabs.lacinia.executor$invoke_resolver_for_field invoke executor.clj 68]
  [com.walmartlabs.lacinia.executor$resolve_and_select invokeStatic executor.clj 353]
  [com.walmartlabs.lacinia.executor$resolve_and_select invoke executor.clj 234]
  [com.walmartlabs.lacinia.executor$apply_field_selection invokeStatic executor.clj 140]
  [com.walmartlabs.lacinia.executor$apply_field_selection invoke executor.clj 135]
  [com.walmartlabs.lacinia.executor$apply_selection invokeStatic executor.clj 173]
  [com.walmartlabs.lacinia.executor$apply_selection invoke executor.clj 165]
  [com.walmartlabs.lacinia.executor$combine_selection_results_sync$fn__17487 invoke executor.clj 212]
  [com.walmartlabs.lacinia.resolve.ResolverResultImpl on_deliver_BANG_ resolve.clj 135]
  [com.walmartlabs.lacinia.executor$combine_selection_results_sync invokeStatic executor.clj 208]
  [com.walmartlabs.lacinia.executor$combine_selection_results_sync invoke executor.clj 203]
  [com.walmartlabs.lacinia.executor$execute_nested_selections_sync$fn__17494 invoke executor.clj 230]
  [clojure.lang.ArrayChunk reduce ArrayChunk.java 58]
  [clojure.core.protocols$fn__8176 invokeStatic protocols.clj 136]
  [clojure.core.protocols$fn__8176 invoke protocols.clj 124]
  [clojure.core.protocols$fn__8136$G__8131__8145 invoke protocols.clj 19]
  [clojure.core.protocols$seq_reduce invokeStatic protocols.clj 31]
  [clojure.core.protocols$fn__8168 invokeStatic protocols.clj 75]
  [clojure.core.protocols$fn__8168 invoke protocols.clj 75]
  [clojure.core.protocols$fn__8110$G__8105__8123 invoke protocols.clj 13]
  [clojure.core$reduce invokeStatic core.clj 6830]
  [clojure.core$reduce invoke core.clj 6812]
  [com.walmartlabs.lacinia.executor$execute_nested_selections_sync invokeStatic executor.clj 230]
  [com.walmartlabs.lacinia.executor$execute_nested_selections_sync invoke executor.clj 221]
  [com.walmartlabs.lacinia.executor$execute_query$fn__17519 invoke executor.clj 400]
  [clojure.lang.AFn applyToHelper AFn.java 152]
  [clojure.lang.AFn applyTo AFn.java 144]
  [clojure.core$apply invokeStatic core.clj 667]
  [clojure.core$with_bindings_STAR_ invokeStatic core.clj 1977]
  [clojure.core$with_bindings_STAR_ doInvoke core.clj 1977]
  [clojure.lang.RestFn invoke RestFn.java 425]
  [clojure.lang.AFn applyToHelper AFn.java 156]
  [clojure.lang.RestFn applyTo RestFn.java 132]
  [clojure.core$apply invokeStatic core.clj 671]
  [clojure.core$bound_fn_STAR_$fn__5767 doInvoke core.clj 2007]
  [clojure.lang.RestFn invoke RestFn.java 397]
  [com.walmartlabs.lacinia.executor$execute_query$fn__17524 invoke executor.clj 421]
  [clojure.core$binding_conveyor_fn$fn__5772 invoke core.clj 2034]
  [clojure.lang.AFn call AFn.java 18]
  [java.util.concurrent.FutureTask run FutureTask.java 264]
  [java.util.concurrent.ThreadPoolExecutor runWorker ThreadPoolExecutor.java 1128]
  [java.util.concurrent.ThreadPoolExecutor$Worker run ThreadPoolExecutor.java 628]
  [java.lang.Thread run Thread.java 829]]}

>request-grapql _> request {:leihs-user-language {:name English (UK), :locale en-GB, :default true, :active true}, :authenticated-entity {:email sachiko@hartmann.info, :contracts_count 0, :lastname Gorczany, :org_id nil, :scope_read true, :is_admin false, :authentication-method :session, :login nil, :scope_system_admin_write false, :scope_write true, :firstname Amelia, :scope_admin_write false, :user_session_created_at #time/instant "2023-12-16T14:15:42.465483Z", :id #uuid "5952b073-9726-4cd0-9b31-d8732cae2bae", :user_session_id #uuid "6a179cea-622c-4031-a799-5019e95c4d02", :scope_system_admin_read false, :access-rights (), :user_id #uuid "5952b073-9726-4cd0-9b31-d8732cae2bae", :is_system_admin false, :external_sign_out_url nil, :language_locale nil, :inventory_pool_roles_count 0, :scope_admin_read false}, :cookies {leihs-anti-csrf-token {:value 82c43046-d7fb-470c-9123-e060937e4c2c}, leihs-user-session {:value 7bc6acfc-3845-4522-b953-7aeaadaace9a}}, :remote-addr 127.0.0.1, :start-time 228383319193291, :params {}, :settings {:email_sending_enabled false, :sessions_max_lifetime_secs 432000, :smtp_default_from_address your.lending.desk@example.com, :public_image_caching_enabled true, :sessions_force_secure false, :deliver_received_order_notifications false, :external_base_url nil, :sessions_force_uniqueness false, :email_signature Cheers,}, :tx-next #next.jdbc.default_options.DefaultOptions{:connectable #object[com.zaxxer.hikari.pool.HikariProxyConnection 0x74eb2e7c HikariProxyConnection@1961569916 wrapping org.postgresql.jdbc.PgConnection@72b35f05], :options {:builder-fn #object[next.jdbc.result_set$as_unqualified_lower_maps 0x3db93dbb next.jdbc.result_set$as_unqualified_lower_maps@3db93dbb]}}, :query-params-raw {}, :route-params nil, :headers {accept application/json, accept-encoding gzip;q=1.0,deflate;q=0.6,identity;q=0.3, content-length 602, content-type application/json, cookie leihs-anti-csrf-token=82c43046-d7fb-470c-9123-e060937e4c2c; leihs-user-session=7bc6acfc-3845-4522-b953-7aeaadaace9a, host localhost:3230, user-agent Faraday v2.7.1, x-csrf-token 82c43046-d7fb-470c-9123-e060937e4c2c}, :async-channel #object[org.httpkit.server.AsyncChannel 0x6a8fb4c1 /127.0.0.1:3230<->/127.0.0.1:55872], :server-port 3230, :params-raw {}, :tx {:datasource #object[com.zaxxer.hikari.HikariDataSource 0x18d95122 HikariDataSource (db-pool)], :connection #object[com.zaxxer.hikari.pool.HikariProxyConnection 0x5449aebd HikariProxyConnection@1414115005 wrapping org.postgresql.jdbc.PgConnection@68f5f480], :level 2, :rollback #object[clojure.lang.Atom 0x6fe45e8 {:status :ready, :val false}]}, :content-length 602, :form-params {}, :websocket? false, :query-params {}, :content-type application/json, :form-params-raw {}, :character-encoding utf8, :uri /procure/graphql, :server-name localhost, :handler-key :graphql, :query-string nil, :body {:query         mutation {
          budget_periods (
            input_data: [
              { id: "d1b3dae2-bfac-4e04-953c-447eb259a826",
                name: "bp_1_new_name",
                inspection_start_date: "2024-06-01T00:00:00+00:00",
                end_date: "2024-12-01T00:00:00+00:00" },
              { id: null,
                name: "new_bp",
                inspection_start_date: "2025-06-01T00:00:00+00:00",
                end_date: "2025-12-01T00:00:00+00:00" }
            ]
          ) {
            name
          }
        }
, :variables {}}, :graphql-schema #CompiledSchema<>, :handler #object[leihs.procurement.graphql$handler 0x36e39341 leihs.procurement.graphql$handler@36e39341], :multipart-params {}, :scheme :http, :request-method :post, :accept {:mime :json, :charset nil, :encoding nil, :language nil}}

>request-c-grapql _> request (json) {"leihs-user-language":{"name":"English (UK)","locale":"en-GB","default":true,"active":true},"authenticated-entity":{"email":"sachiko@hartmann.info","contracts_count":0,"lastname":"Gorczany","org_id":null,"scope_read":true,"is_admin":false,"authentication-method":"session","login":null,"scope_system_admin_write":false,"scope_write":true,"firstname":"Amelia","scope_admin_write":false,"user_session_created_at":"2023-12-16T14:15:42.465483Z","id":"5952b073-9726-4cd0-9b31-d8732cae2bae","user_session_id":"6a179cea-622c-4031-a799-5019e95c4d02","scope_system_admin_read":false,"access-rights":[],"user_id":"5952b073-9726-4cd0-9b31-d8732cae2bae","is_system_admin":false,"external_sign_out_url":null,"language_locale":null,"inventory_pool_roles_count":0,"scope_admin_read":false},"cookies":{"leihs-anti-csrf-token":{"value":"82c43046-d7fb-470c-9123-e060937e4c2c"},"leihs-user-session":{"value":"7bc6acfc-3845-4522-b953-7aeaadaace9a"}},"remote-addr":"127.0.0.1","start-time":228383319193291,"params":{},"settings":{"email_sending_enabled":false,"sessions_max_lifetime_secs":432000,"smtp_default_from_address":"your.lending.desk@example.com","public_image_caching_enabled":true,"sessions_force_secure":false,"deliver_received_order_notifications":false,"external_base_url":null,"sessions_force_uniqueness":false,"email_signature":"Cheers,"},"query-params-raw":{},"route-params":null,"headers":{"accept":"application\/json","accept-encoding":"gzip;q=1.0,deflate;q=0.6,identity;q=0.3","content-length":"602","content-type":"application\/json","cookie":"leihs-anti-csrf-token=82c43046-d7fb-470c-9123-e060937e4c2c; leihs-user-session=7bc6acfc-3845-4522-b953-7aeaadaace9a","host":"localhost:3230","user-agent":"Faraday v2.7.1","x-csrf-token":"82c43046-d7fb-470c-9123-e060937e4c2c"},"server-port":3230,"params-raw":{},"content-length":602,"form-params":{},"websocket?":false,"query-params":{},"content-type":"application\/json","form-params-raw":{},"character-encoding":"utf8","uri":"\/procure\/graphql","server-name":"localhost","handler-key":"graphql","query-string":null,"body":{"query":"        mutation {\n          budget_periods (\n            input_data: [\n              { id: \"d1b3dae2-bfac-4e04-953c-447eb259a826\",\n                name: \"bp_1_new_name\",\n                inspection_start_date: \"2024-06-01T00:00:00+00:00\",\n                end_date: \"2024-12-01T00:00:00+00:00\" },\n              { id: null,\n                name: \"new_bp\",\n                inspection_start_date: \"2025-06-01T00:00:00+00:00\",\n                end_date: \"2025-12-01T00:00:00+00:00\" }\n            ]\n          ) {\n            name\n          }\n        }\n","variables":{}},"multipart-params":{},"scheme":"http","request-method":"post","accept":{"mime":"json","charset":null,"encoding":null,"language":null}}

>request-grapql _> result => {:data #ordered/map ([:budget_periods nil]), :errors ({:message UnauthorizedException - Not authorized for this query path and arguments., :locations [{:line 2, :column 11}], :path [:budget_periods], :extensions {:exception ExceptionInfo, :arguments {:input_data [{:id d1b3dae2-bfac-4e04-953c-447eb259a826, :name bp_1_new_name, :inspection_start_date 2024-06-01T00:00:00+00:00, :end_date 2024-12-01T00:00:00+00:00} {:id nil, :name new_bp, :inspection_start_date 2025-06-01T00:00:00+00:00, :end_date 2025-12-01T00:00:00+00:00}]}}})}
2023-12-16T14:15:42.508Z NX-41294 DEBUG [leihs.procurement.graphql:86] - result => {:data #ordered/map ([:budget_periods nil]), :errors ({:message "UnauthorizedException - Not authorized for this query path and arguments.", :locations [{:line 2, :column 11}], :path [:budget_periods], :extensions {:exception "ExceptionInfo", :arguments {:input_data [{:id "d1b3dae2-bfac-4e04-953c-447eb259a826", :name "bp_1_new_name", :inspection_start_date "2024-06-01T00:00:00+00:00", :end_date "2024-12-01T00:00:00+00:00"} {:id nil, :name "new_bp", :inspection_start_date "2025-06-01T00:00:00+00:00", :end_date "2025-12-01T00:00:00+00:00"}]}}})}
2023-12-16T14:15:42.508Z NX-41294 DEBUG [leihs.procurement.graphql:87] - {:data #ordered/map ([:budget_periods nil]), :errors ({:message "UnauthorizedException - Not authorized for this query path and arguments.", :locations [{:line 2, :column 11}], :path [:budget_periods], :extensions {:exception "ExceptionInfo", :arguments {:input_data [{:id "d1b3dae2-bfac-4e04-953c-447eb259a826", :name "bp_1_new_name", :inspection_start_date "2024-06-01T00:00:00+00:00", :end_date "2024-12-01T00:00:00+00:00"} {:id nil, :name "new_bp", :inspection_start_date "2025-06-01T00:00:00+00:00", :end_date "2025-12-01T00:00:00+00:00"}]}}})}

>o> ERROR 4pure-handler, result=> {:data #ordered/map ([:budget_periods nil]), :errors ({:message UnauthorizedException - Not authorized for this query path and arguments., :locations [{:line 2, :column 11}], :path [:budget_periods], :extensions {:exception ExceptionInfo, :arguments {:input_data [{:id d1b3dae2-bfac-4e04-953c-447eb259a826, :name bp_1_new_name, :inspection_start_date 2024-06-01T00:00:00+00:00, :end_date 2024-12-01T00:00:00+00:00} {:id nil, :name new_bp, :inspection_start_date 2025-06-01T00:00:00+00:00, :end_date 2025-12-01T00:00:00+00:00}]}}})}
>>> authenticate::skip= true  handler-key= :sign-in
>>> authenticate::authenticated-entity nil

>> authorize >

>> authorize::handler > #object[leihs.core.locale$wrap$fn__45448 0x2031e135 leihs.core.locale$wrap$fn__45448@2031e135]

>> authorize::request > {:cookies {}, :remote-addr 127.0.0.1, :start-time 228384190016166, :params {}, :settings {:email_sending_enabled false, :sessions_max_lifetime_secs 432000, :smtp_default_from_address your.lending.desk@example.com, :public_image_caching_enabled true, :sessions_force_secure false, :deliver_received_order_notifications false, :external_base_url nil, :sessions_force_uniqueness false, :email_signature Cheers,}, :tx-next #next.jdbc.default_options.DefaultOptions{:connectable #object[com.zaxxer.hikari.HikariDataSource 0x5bbb0d7f HikariDataSource (HikariPool-1)], :options {:builder-fn #object[next.jdbc.result_set$as_unqualified_lower_maps 0x3db93dbb next.jdbc.result_set$as_unqualified_lower_maps@3db93dbb]}}, :query-params-raw {}, :route-params nil, :headers {accept */*, accept-encoding gzip;q=1.0,deflate;q=0.6,identity;q=0.3, host localhost:3230, user-agent Faraday v2.7.1}, :async-channel #object[org.httpkit.server.AsyncChannel 0x626ce812 /127.0.0.1:3230<->/127.0.0.1:55878], :server-port 3230, :params-raw {}, :tx {:datasource #object[com.zaxxer.hikari.HikariDataSource 0x18d95122 HikariDataSource (db-pool)]}, :content-length 0, :form-params {}, :websocket? false, :query-params {}, :content-type nil, :form-params-raw {}, :character-encoding utf8, :uri /sign-in, :server-name localhost, :handler-key :sign-in, :query-string nil, :body nil, :graphql-schema #CompiledSchema<>, :handler #object[compojure.core$routes$fn__27950 0x17459cfd compojure.core$routes$fn__27950@17459cfd], :multipart-params {}, :scheme :http, :request-method :get, :accept {:mime :html, :charset nil, :encoding nil, :language nil}}

>> authorize::handler-key >> :sign-in
>myprint>  authEnt? nil
>myprint>  txn #next.jdbc.default_options.DefaultOptions{:connectable #object[com.zaxxer.hikari.HikariDataSource 0x5bbb0d7f HikariDataSource (HikariPool-1)], :options {:builder-fn #object[next.jdbc.result_set$as_unqualified_lower_maps 0x3db93dbb next.jdbc.result_set$as_unqualified_lower_maps@3db93dbb]}}
2023-12-16T14:15:43.375Z NX-41294 DEBUG [leihs.procurement.permissions.user:?] - (sql-format (sql/select [[:exists (-> (sql/select [true :exists]) (sql/from :procurement_admins) (sql/where [:= :procurement_admins.user_id [:cast (:user_id auth-entity) :uuid]]))]])) => ["SELECT EXISTS (SELECT TRUE AS exists FROM procurement_admins WHERE procurement_admins.user_id = CAST(NULL AS UUID))"]
>o> admin? [SELECT EXISTS (SELECT TRUE AS exists FROM procurement_admins WHERE procurement_admins.user_id = CAST(NULL AS UUID))]
2023-12-16T14:15:43.376Z NX-41294 DEBUG [leihs.procurement.permissions.user:38] - query => ["SELECT EXISTS (SELECT TRUE AS exists FROM procurement_admins WHERE procurement_admins.user_id = CAST(NULL AS UUID))"]
>o> admin? {:exists false}
2023-12-16T14:15:43.382Z NX-41294 DEBUG [leihs.procurement.permissions.user:42] - (:exists result) => false
>myprint>  admin false
>o> inspector? [SELECT EXISTS (SELECT TRUE AS exists FROM procurement_category_inspectors WHERE procurement_category_inspectors.user_id = CAST(NULL AS UUID)) AS result]
2023-12-16T14:15:43.383Z NX-41294 DEBUG [leihs.procurement.permissions.user:62] - query => ["SELECT EXISTS (SELECT TRUE AS exists FROM procurement_category_inspectors WHERE procurement_category_inspectors.user_id = CAST(NULL AS UUID)) AS result"]
>o> inspector? {:result false}
>myprint>  inspector false
>o> viewer? [SELECT EXISTS (SELECT TRUE AS exists FROM procurement_category_viewers WHERE procurement_category_viewers.user_id = CAST(NULL AS UUID)) AS result]
2023-12-16T14:15:43.385Z NX-41294 DEBUG [leihs.procurement.permissions.user:85] - query => ["SELECT EXISTS (SELECT TRUE AS exists FROM procurement_category_viewers WHERE procurement_category_viewers.user_id = CAST(NULL AS UUID)) AS result"]
>o> viewer? {:result false}
>myprint>  viewer false
>o> requester?? [SELECT EXISTS (SELECT TRUE AS exists FROM procurement_requesters_organizations WHERE procurement_requesters_organizations.user_id = CAST(NULL AS UUID))]
2023-12-16T14:15:43.386Z NX-41294 DEBUG [leihs.procurement.permissions.user:169] - query => ["SELECT EXISTS (SELECT TRUE AS exists FROM procurement_requesters_organizations WHERE procurement_requesters_organizations.user_id = CAST(NULL AS UUID))"]
>o> requester?? {:exists false}
2023-12-16T14:15:43.387Z NX-41294 DEBUG [leihs.procurement.permissions.user:173] - (:exists result) => false
>myprint>  requester false
>>> authenticate::skip= true  handler-key= :sign-in
>>> authenticate::authenticated-entity nil

>> authorize >

>> authorize::handler > #object[leihs.core.locale$wrap$fn__45448 0x2031e135 leihs.core.locale$wrap$fn__45448@2031e135]

>> authorize::request > {:cookies {leihs-anti-csrf-token {:value 6a647f3b-6d53-454b-9ae3-0a935b796cc7}}, :remote-addr 127.0.0.1, :start-time 228384279715416, :params {:password password, :user sachiko@hartmann.info}, :settings {:email_sending_enabled false, :sessions_max_lifetime_secs 432000, :smtp_default_from_address your.lending.desk@example.com, :public_image_caching_enabled true, :sessions_force_secure false, :deliver_received_order_notifications false, :external_base_url nil, :sessions_force_uniqueness false, :email_signature Cheers,}, :tx-next #next.jdbc.default_options.DefaultOptions{:connectable #object[com.zaxxer.hikari.pool.HikariProxyConnection 0x3101f991 HikariProxyConnection@822213009 wrapping org.postgresql.jdbc.PgConnection@72b35f05], :options {:builder-fn #object[next.jdbc.result_set$as_unqualified_lower_maps 0x3db93dbb next.jdbc.result_set$as_unqualified_lower_maps@3db93dbb]}}, :query-params-raw {}, :route-params nil, :headers {accept */*, accept-encoding gzip;q=1.0,deflate;q=0.6,identity;q=0.3, content-length 46, content-type application/x-www-form-urlencoded, cookie leihs-anti-csrf-token=6a647f3b-6d53-454b-9ae3-0a935b796cc7, host localhost:3230, user-agent Faraday v2.7.1, x-csrf-token 6a647f3b-6d53-454b-9ae3-0a935b796cc7}, :async-channel #object[org.httpkit.server.AsyncChannel 0x23630d5a /127.0.0.1:3230<->/127.0.0.1:55879], :server-port 3230, :params-raw {:password password, :user sachiko@hartmann.info}, :tx {:datasource #object[com.zaxxer.hikari.HikariDataSource 0x18d95122 HikariDataSource (db-pool)], :connection #object[com.zaxxer.hikari.pool.HikariProxyConnection 0x121838ce HikariProxyConnection@303577294 wrapping org.postgresql.jdbc.PgConnection@68f5f480], :level 1, :rollback #object[clojure.lang.Atom 0x3951c05b {:status :ready, :val false}]}, :content-length 46, :form-params {:password password, :user sachiko@hartmann.info}, :websocket? false, :query-params {}, :content-type application/x-www-form-urlencoded, :form-params-raw {:password password, :user sachiko@hartmann.info}, :character-encoding utf8, :uri /sign-in, :server-name localhost, :handler-key :sign-in, :query-string nil, :body #object[org.httpkit.BytesInputStream 0x7a26b91 BytesInputStream[len=46]], :graphql-schema #CompiledSchema<>, :handler #object[compojure.core$routes$fn__27950 0x17459cfd compojure.core$routes$fn__27950@17459cfd], :multipart-params {}, :scheme :http, :request-method :post, :accept {:mime :html, :charset nil, :encoding nil, :language nil}}

>> authorize::handler-key >> :sign-in
>myprint>  authEnt? nil
>myprint>  txn #next.jdbc.default_options.DefaultOptions{:connectable #object[com.zaxxer.hikari.pool.HikariProxyConnection 0x3101f991 HikariProxyConnection@822213009 wrapping org.postgresql.jdbc.PgConnection@72b35f05], :options {:builder-fn #object[next.jdbc.result_set$as_unqualified_lower_maps 0x3db93dbb next.jdbc.result_set$as_unqualified_lower_maps@3db93dbb]}}
2023-12-16T14:15:43.450Z NX-41294 DEBUG [leihs.procurement.permissions.user:?] - (sql-format (sql/select [[:exists (-> (sql/select [true :exists]) (sql/from :procurement_admins) (sql/where [:= :procurement_admins.user_id [:cast (:user_id auth-entity) :uuid]]))]])) => ["SELECT EXISTS (SELECT TRUE AS exists FROM procurement_admins WHERE procurement_admins.user_id = CAST(NULL AS UUID))"]
>o> admin? [SELECT EXISTS (SELECT TRUE AS exists FROM procurement_admins WHERE procurement_admins.user_id = CAST(NULL AS UUID))]
2023-12-16T14:15:43.450Z NX-41294 DEBUG [leihs.procurement.permissions.user:38] - query => ["SELECT EXISTS (SELECT TRUE AS exists FROM procurement_admins WHERE procurement_admins.user_id = CAST(NULL AS UUID))"]
>o> admin? {:exists false}
2023-12-16T14:15:43.451Z NX-41294 DEBUG [leihs.procurement.permissions.user:42] - (:exists result) => false
>myprint>  admin false
>o> inspector? [SELECT EXISTS (SELECT TRUE AS exists FROM procurement_category_inspectors WHERE procurement_category_inspectors.user_id = CAST(NULL AS UUID)) AS result]
2023-12-16T14:15:43.451Z NX-41294 DEBUG [leihs.procurement.permissions.user:62] - query => ["SELECT EXISTS (SELECT TRUE AS exists FROM procurement_category_inspectors WHERE procurement_category_inspectors.user_id = CAST(NULL AS UUID)) AS result"]
>o> inspector? {:result false}
>myprint>  inspector false
>o> viewer? [SELECT EXISTS (SELECT TRUE AS exists FROM procurement_category_viewers WHERE procurement_category_viewers.user_id = CAST(NULL AS UUID)) AS result]
2023-12-16T14:15:43.452Z NX-41294 DEBUG [leihs.procurement.permissions.user:85] - query => ["SELECT EXISTS (SELECT TRUE AS exists FROM procurement_category_viewers WHERE procurement_category_viewers.user_id = CAST(NULL AS UUID)) AS result"]
>o> viewer? {:result false}
>myprint>  viewer false
>o> requester?? [SELECT EXISTS (SELECT TRUE AS exists FROM procurement_requesters_organizations WHERE procurement_requesters_organizations.user_id = CAST(NULL AS UUID))]
2023-12-16T14:15:43.453Z NX-41294 DEBUG [leihs.procurement.permissions.user:169] - query => ["SELECT EXISTS (SELECT TRUE AS exists FROM procurement_requesters_organizations WHERE procurement_requesters_organizations.user_id = CAST(NULL AS UUID))"]
>o> requester?? {:exists false}
2023-12-16T14:15:43.453Z NX-41294 DEBUG [leihs.procurement.permissions.user:173] - (:exists result) => false
>myprint>  requester false
>>> authenticate::skip= nil  handler-key= :graphql
>>> authenticate::authenticated-entity {:email sachiko@hartmann.info, :contracts_count 0, :lastname Gorczany, :org_id nil, :scope_read true, :is_admin false, :authentication-method :session, :login nil, :scope_system_admin_write false, :scope_write true, :firstname Amelia, :scope_admin_write false, :user_session_created_at #time/instant "2023-12-16T14:15:43.469777Z", :id #uuid "3e6068a5-3959-401f-9548-3f12fa3c7347", :user_session_id #uuid "0ad37bbf-cbe7-4d91-9654-7505dee672e8", :scope_system_admin_read false, :access-rights (), :user_id #uuid "3e6068a5-3959-401f-9548-3f12fa3c7347", :is_system_admin false, :external_sign_out_url nil, :language_locale nil, :inventory_pool_roles_count 0, :scope_admin_read false}

>> authorize >

>> authorize::handler > #object[leihs.core.locale$wrap$fn__45448 0x2031e135 leihs.core.locale$wrap$fn__45448@2031e135]

>> authorize::request > {:authenticated-entity {:email sachiko@hartmann.info, :contracts_count 0, :lastname Gorczany, :org_id nil, :scope_read true, :is_admin false, :authentication-method :session, :login nil, :scope_system_admin_write false, :scope_write true, :firstname Amelia, :scope_admin_write false, :user_session_created_at #time/instant "2023-12-16T14:15:43.469777Z", :id #uuid "3e6068a5-3959-401f-9548-3f12fa3c7347", :user_session_id #uuid "0ad37bbf-cbe7-4d91-9654-7505dee672e8", :scope_system_admin_read false, :access-rights (), :user_id #uuid "3e6068a5-3959-401f-9548-3f12fa3c7347", :is_system_admin false, :external_sign_out_url nil, :language_locale nil, :inventory_pool_roles_count 0, :scope_admin_read false}, :cookies {leihs-anti-csrf-token {:value 6a647f3b-6d53-454b-9ae3-0a935b796cc7}, leihs-user-session {:value 763c7494-b3bc-4096-8397-1c3eae08f1ef}}, :remote-addr 127.0.0.1, :start-time 228384326151666, :params {}, :settings {:email_sending_enabled false, :sessions_max_lifetime_secs 432000, :smtp_default_from_address your.lending.desk@example.com, :public_image_caching_enabled true, :sessions_force_secure false, :deliver_received_order_notifications false, :external_base_url nil, :sessions_force_uniqueness false, :email_signature Cheers,}, :tx-next #next.jdbc.default_options.DefaultOptions{:connectable #object[com.zaxxer.hikari.pool.HikariProxyConnection 0x26988c43 HikariProxyConnection@647531587 wrapping org.postgresql.jdbc.PgConnection@72b35f05], :options {:builder-fn #object[next.jdbc.result_set$as_unqualified_lower_maps 0x3db93dbb next.jdbc.result_set$as_unqualified_lower_maps@3db93dbb]}}, :query-params-raw {}, :route-params nil, :headers {accept application/json, accept-encoding gzip;q=1.0,deflate;q=0.6,identity;q=0.3, content-length 602, content-type application/json, cookie leihs-anti-csrf-token=6a647f3b-6d53-454b-9ae3-0a935b796cc7; leihs-user-session=763c7494-b3bc-4096-8397-1c3eae08f1ef, host localhost:3230, user-agent Faraday v2.7.1, x-csrf-token 6a647f3b-6d53-454b-9ae3-0a935b796cc7}, :async-channel #object[org.httpkit.server.AsyncChannel 0x4cf90cbb /127.0.0.1:3230<->/127.0.0.1:55880], :server-port 3230, :params-raw {}, :tx {:datasource #object[com.zaxxer.hikari.HikariDataSource 0x18d95122 HikariDataSource (db-pool)], :connection #object[com.zaxxer.hikari.pool.HikariProxyConnection 0x3cffea0a HikariProxyConnection@1023404554 wrapping org.postgresql.jdbc.PgConnection@68f5f480], :level 1, :rollback #object[clojure.lang.Atom 0x1476a1c5 {:status :ready, :val false}]}, :content-length 602, :form-params {}, :websocket? false, :query-params {}, :content-type application/json, :form-params-raw {}, :character-encoding utf8, :uri /procure/graphql, :server-name localhost, :handler-key :graphql, :query-string nil, :body {:query         mutation {
          budget_periods (
            input_data: [
              { id: "88f1db18-8dd4-4872-9c05-77af8004ce44",
                name: "bp_1_new_name",
                inspection_start_date: "2024-06-01T00:00:00+00:00",
                end_date: "2024-12-01T00:00:00+00:00" },
              { id: null,
                name: "new_bp",
                inspection_start_date: "2025-06-01T00:00:00+00:00",
                end_date: "2025-12-01T00:00:00+00:00" }
            ]
          ) {
            name
          }
        }
, :variables {}}, :graphql-schema #CompiledSchema<>, :handler #object[leihs.procurement.graphql$handler 0x36e39341 leihs.procurement.graphql$handler@36e39341], :multipart-params {}, :scheme :http, :request-method :post, :accept {:mime :json, :charset nil, :encoding nil, :language nil}}

>> authorize::handler-key >> :graphql
>myprint>  authEnt? {:email sachiko@hartmann.info, :contracts_count 0, :lastname Gorczany, :org_id nil, :scope_read true, :is_admin false, :authentication-method :session, :login nil, :scope_system_admin_write false, :scope_write true, :firstname Amelia, :scope_admin_write false, :user_session_created_at #time/instant "2023-12-16T14:15:43.469777Z", :id #uuid "3e6068a5-3959-401f-9548-3f12fa3c7347", :user_session_id #uuid "0ad37bbf-cbe7-4d91-9654-7505dee672e8", :scope_system_admin_read false, :access-rights (), :user_id #uuid "3e6068a5-3959-401f-9548-3f12fa3c7347", :is_system_admin false, :external_sign_out_url nil, :language_locale nil, :inventory_pool_roles_count 0, :scope_admin_read false}
>myprint>  txn #next.jdbc.default_options.DefaultOptions{:connectable #object[com.zaxxer.hikari.pool.HikariProxyConnection 0x26988c43 HikariProxyConnection@647531587 wrapping org.postgresql.jdbc.PgConnection@72b35f05], :options {:builder-fn #object[next.jdbc.result_set$as_unqualified_lower_maps 0x3db93dbb next.jdbc.result_set$as_unqualified_lower_maps@3db93dbb]}}
2023-12-16T14:15:43.509Z NX-41294 DEBUG [leihs.procurement.permissions.user:?] - (sql-format (sql/select [[:exists (-> (sql/select [true :exists]) (sql/from :procurement_admins) (sql/where [:= :procurement_admins.user_id [:cast (:user_id auth-entity) :uuid]]))]])) => ["SELECT EXISTS (SELECT TRUE AS exists FROM procurement_admins WHERE procurement_admins.user_id = CAST(? AS UUID))" #uuid "3e6068a5-3959-401f-9548-3f12fa3c7347"]
>o> admin? [SELECT EXISTS (SELECT TRUE AS exists FROM procurement_admins WHERE procurement_admins.user_id = CAST(? AS UUID)) #uuid "3e6068a5-3959-401f-9548-3f12fa3c7347"]
2023-12-16T14:15:43.509Z NX-41294 DEBUG [leihs.procurement.permissions.user:38] - query => ["SELECT EXISTS (SELECT TRUE AS exists FROM procurement_admins WHERE procurement_admins.user_id = CAST(? AS UUID))" #uuid "3e6068a5-3959-401f-9548-3f12fa3c7347"]
>o> admin? {:exists true}
2023-12-16T14:15:43.510Z NX-41294 DEBUG [leihs.procurement.permissions.user:42] - (:exists result) => true
>myprint>  admin true
>o> inspector? [SELECT EXISTS (SELECT TRUE AS exists FROM procurement_category_inspectors WHERE procurement_category_inspectors.user_id = CAST(? AS UUID)) AS result #uuid "3e6068a5-3959-401f-9548-3f12fa3c7347"]
2023-12-16T14:15:43.511Z NX-41294 DEBUG [leihs.procurement.permissions.user:62] - query => ["SELECT EXISTS (SELECT TRUE AS exists FROM procurement_category_inspectors WHERE procurement_category_inspectors.user_id = CAST(? AS UUID)) AS result" #uuid "3e6068a5-3959-401f-9548-3f12fa3c7347"]
>o> inspector? {:result false}
>myprint>  inspector false
>o> viewer? [SELECT EXISTS (SELECT TRUE AS exists FROM procurement_category_viewers WHERE procurement_category_viewers.user_id = CAST(? AS UUID)) AS result #uuid "3e6068a5-3959-401f-9548-3f12fa3c7347"]
2023-12-16T14:15:43.512Z NX-41294 DEBUG [leihs.procurement.permissions.user:85] - query => ["SELECT EXISTS (SELECT TRUE AS exists FROM procurement_category_viewers WHERE procurement_category_viewers.user_id = CAST(? AS UUID)) AS result" #uuid "3e6068a5-3959-401f-9548-3f12fa3c7347"]
>o> viewer? {:result false}
>myprint>  viewer false
>o> requester?? [SELECT EXISTS (SELECT TRUE AS exists FROM procurement_requesters_organizations WHERE procurement_requesters_organizations.user_id = CAST(? AS UUID)) #uuid "3e6068a5-3959-401f-9548-3f12fa3c7347"]
2023-12-16T14:15:43.513Z NX-41294 DEBUG [leihs.procurement.permissions.user:169] - query => ["SELECT EXISTS (SELECT TRUE AS exists FROM procurement_requesters_organizations WHERE procurement_requesters_organizations.user_id = CAST(? AS UUID))" #uuid "3e6068a5-3959-401f-9548-3f12fa3c7347"]
>o> requester?? {:exists false}
2023-12-16T14:15:43.514Z NX-41294 DEBUG [leihs.procurement.permissions.user:173] - (:exists result) => false
>myprint>  requester false
2023-12-16T14:15:43.514Z NX-41294 DEBUG [leihs.procurement.permissions.user:?] - (sql-format (sql/select [[:exists (-> (sql/select [true :exists]) (sql/from :procurement_admins) (sql/where [:= :procurement_admins.user_id [:cast (:user_id auth-entity) :uuid]]))]])) => ["SELECT EXISTS (SELECT TRUE AS exists FROM procurement_admins WHERE procurement_admins.user_id = CAST(? AS UUID))" #uuid "3e6068a5-3959-401f-9548-3f12fa3c7347"]
>o> admin? [SELECT EXISTS (SELECT TRUE AS exists FROM procurement_admins WHERE procurement_admins.user_id = CAST(? AS UUID)) #uuid "3e6068a5-3959-401f-9548-3f12fa3c7347"]
2023-12-16T14:15:43.514Z NX-41294 DEBUG [leihs.procurement.permissions.user:38] - query => ["SELECT EXISTS (SELECT TRUE AS exists FROM procurement_admins WHERE procurement_admins.user_id = CAST(? AS UUID))" #uuid "3e6068a5-3959-401f-9548-3f12fa3c7347"]
>o> admin? {:exists true}
2023-12-16T14:15:43.518Z NX-41294 DEBUG [leihs.procurement.permissions.user:42] - (:exists result) => true
>o> inspector? [SELECT EXISTS (SELECT TRUE AS exists FROM procurement_category_inspectors WHERE procurement_category_inspectors.user_id = CAST(? AS UUID)) AS result #uuid "3e6068a5-3959-401f-9548-3f12fa3c7347"]
2023-12-16T14:15:43.518Z NX-41294 DEBUG [leihs.procurement.permissions.user:62] - query => ["SELECT EXISTS (SELECT TRUE AS exists FROM procurement_category_inspectors WHERE procurement_category_inspectors.user_id = CAST(? AS UUID)) AS result" #uuid "3e6068a5-3959-401f-9548-3f12fa3c7347"]
>o> inspector? {:result false}
>o> viewer? [SELECT EXISTS (SELECT TRUE AS exists FROM procurement_category_viewers WHERE procurement_category_viewers.user_id = CAST(? AS UUID)) AS result #uuid "3e6068a5-3959-401f-9548-3f12fa3c7347"]
2023-12-16T14:15:43.519Z NX-41294 DEBUG [leihs.procurement.permissions.user:85] - query => ["SELECT EXISTS (SELECT TRUE AS exists FROM procurement_category_viewers WHERE procurement_category_viewers.user_id = CAST(? AS UUID)) AS result" #uuid "3e6068a5-3959-401f-9548-3f12fa3c7347"]
>o> viewer? {:result false}
>o> requester?? [SELECT EXISTS (SELECT TRUE AS exists FROM procurement_requesters_organizations WHERE procurement_requesters_organizations.user_id = CAST(? AS UUID)) #uuid "3e6068a5-3959-401f-9548-3f12fa3c7347"]
2023-12-16T14:15:43.522Z NX-41294 DEBUG [leihs.procurement.permissions.user:169] - query => ["SELECT EXISTS (SELECT TRUE AS exists FROM procurement_requesters_organizations WHERE procurement_requesters_organizations.user_id = CAST(? AS UUID))" #uuid "3e6068a5-3959-401f-9548-3f12fa3c7347"]
>o> requester?? {:exists false}
2023-12-16T14:15:43.523Z NX-41294 DEBUG [leihs.procurement.permissions.user:173] - (:exists result) => false
pure-handler >> 1
2023-12-16T14:15:43.526Z NX-41294 DEBUG [leihs.procurement.graphql:46] - graphql query         mutation {
          budget_periods (
            input_data: [
              { id: "88f1db18-8dd4-4872-9c05-77af8004ce44",
                name: "bp_1_new_name",
                inspection_start_date: "2024-06-01T00:00:00+00:00",
                end_date: "2024-12-01T00:00:00+00:00" },
              { id: null,
                name: "new_bp",
                inspection_start_date: "2025-06-01T00:00:00+00:00",
                end_date: "2025-12-01T00:00:00+00:00" }
            ]
          ) {
            name
          }
        }
 with variables {}
>oo> vars from graphQL-Requst nil nil nil {}
>>1x #next.jdbc.default_options.DefaultOptions{:connectable #object[com.zaxxer.hikari.pool.HikariProxyConnection 0x26988c43 HikariProxyConnection@647531587 wrapping org.postgresql.jdbc.PgConnection@72b35f05], :options {:builder-fn #object[next.jdbc.result_set$as_unqualified_lower_maps 0x3db93dbb next.jdbc.result_set$as_unqualified_lower_maps@3db93dbb]}}
>>2x {:email sachiko@hartmann.info, :contracts_count 0, :lastname Gorczany, :org_id nil, :scope_read true, :is_admin false, :authentication-method :session, :login nil, :scope_system_admin_write false, :scope_write true, :firstname Amelia, :scope_admin_write false, :user_session_created_at #time/instant "2023-12-16T14:15:43.469777Z", :id #uuid "3e6068a5-3959-401f-9548-3f12fa3c7347", :user_session_id #uuid "0ad37bbf-cbe7-4d91-9654-7505dee672e8", :scope_system_admin_read false, :access-rights (), :user_id #uuid "3e6068a5-3959-401f-9548-3f12fa3c7347", :is_system_admin false, :external_sign_out_url nil, :language_locale nil, :inventory_pool_roles_count 0, :scope_admin_read false}
2023-12-16T14:15:43.527Z NX-41294 DEBUG [leihs.procurement.permissions.user:?] - (sql-format (sql/select [[:exists (-> (sql/select [true :exists]) (sql/from :procurement_admins) (sql/where [:= :procurement_admins.user_id [:cast (:user_id auth-entity) :uuid]]))]])) => ["SELECT EXISTS (SELECT TRUE AS exists FROM procurement_admins WHERE procurement_admins.user_id = CAST(? AS UUID))" #uuid "3e6068a5-3959-401f-9548-3f12fa3c7347"]
>o> admin? [SELECT EXISTS (SELECT TRUE AS exists FROM procurement_admins WHERE procurement_admins.user_id = CAST(? AS UUID)) #uuid "3e6068a5-3959-401f-9548-3f12fa3c7347"]
2023-12-16T14:15:43.527Z NX-41294 DEBUG [leihs.procurement.permissions.user:38] - query => ["SELECT EXISTS (SELECT TRUE AS exists FROM procurement_admins WHERE procurement_admins.user_id = CAST(? AS UUID))" #uuid "3e6068a5-3959-401f-9548-3f12fa3c7347"]
>o> admin? {:exists true}
2023-12-16T14:15:43.528Z NX-41294 DEBUG [leihs.procurement.permissions.user:42] - (:exists result) => true
>oo> update-budget-periods!
>oo> before bp-with-dates= {:id 88f1db18-8dd4-4872-9c05-77af8004ce44, :name bp_1_new_name, :inspection_start_date 2024-06-01T00:00:00+00:00, :end_date 2024-12-01T00:00:00+00:00}
2023-12-16T14:15:43.528Z NX-41294 DEBUG [leihs.procurement.resources.budget-periods:116] - (-> bp (update :inspection_start_date set-date) (update :end_date set-date)) => {:id "88f1db18-8dd4-4872-9c05-77af8004ce44", :name "bp_1_new_name", :inspection_start_date "2024-06-01T00:00:00+00:00", :end_date "2024-12-01T00:00:00+00:00"}
>oo> after bp-with-dates= {:id 88f1db18-8dd4-4872-9c05-77af8004ce44, :name bp_1_new_name, :inspection_start_date 2024-06-01T00:00:00+00:00, :end_date 2024-12-01T00:00:00+00:00}
2023-12-16T14:15:43.529Z NX-41294 DEBUG [leihs.procurement.resources.budget-periods:124] - (:id bp-with-dates) => 88f1db18-8dd4-4872-9c05-77af8004ce44
2023-12-16T14:15:43.529Z NX-41294 DEBUG [leihs.procurement.resources.budget-periods:125] - bp-with-dates => {:id "88f1db18-8dd4-4872-9c05-77af8004ce44", :name "bp_1_new_name", :inspection_start_date "2024-06-01T00:00:00+00:00", :end_date "2024-12-01T00:00:00+00:00"}
>o> utils.helpers / my-cast  {:id 88f1db18-8dd4-4872-9c05-77af8004ce44, :name bp_1_new_name, :inspection_start_date 2024-06-01T00:00:00+00:00, :end_date 2024-12-01T00:00:00+00:00}
2023-12-16T14:15:43.529Z NX-41294 DEBUG [leihs.procurement.utils.helpers:159] - data => {:id [[:cast "88f1db18-8dd4-4872-9c05-77af8004ce44" :uuid]], :name "bp_1_new_name", :inspection_start_date [[:cast "2024-06-01T00:00:00+00:00" :timestamp]], :end_date [[:cast "2024-12-01T00:00:00+00:00" :timestamp]]}
2023-12-16T14:15:43.529Z NX-41294 DEBUG [leihs.procurement.resources.budget-period:?] - (sql-format (sql/where (sql/set (sql/update :procurement_budget_periods) bp) [:= :procurement_budget_periods.id (:id bp)])) => ["UPDATE procurement_budget_periods SET id = (CAST(? AS UUID)), name = ?, inspection_start_date = (CAST(? AS TIMESTAMP)), end_date = (CAST(? AS TIMESTAMP)) WHERE procurement_budget_periods.id = (CAST(? AS UUID))" "88f1db18-8dd4-4872-9c05-77af8004ce44" "bp_1_new_name" "2024-06-01T00:00:00+00:00" "2024-12-01T00:00:00+00:00" "88f1db18-8dd4-4872-9c05-77af8004ce44"]
2023-12-16T14:15:43.561Z NX-41294 DEBUG [leihs.procurement.resources.budget-period:284] - result => {:next.jdbc/update-count 1}
2023-12-16T14:15:43.561Z NX-41294 DEBUG [leihs.procurement.resources.budget-period:284] - (:next.jdbc/update-count (spy result)) => 1
2023-12-16T14:15:43.561Z NX-41294 DEBUG [leihs.procurement.resources.budget-periods:125] - (budget-period/update-budget-period! tx (spy bp-with-dates)) => 1
>oo> superorsch args= {:input_data [{:id 88f1db18-8dd4-4872-9c05-77af8004ce44, :name bp_1_new_name, :inspection_start_date 2024-06-01T00:00:00+00:00, :end_date 2024-12-01T00:00:00+00:00} {:id nil, :name new_bp, :inspection_start_date 2025-06-01T00:00:00+00:00, :end_date 2025-12-01T00:00:00+00:00}]}
>oo> superorsch value= nil
2023-12-16T14:15:43.561Z NX-41294 DEBUG [leihs.procurement.resources.budget-periods:131] - (:id bp-with-dates) => 88f1db18-8dd4-4872-9c05-77af8004ce44
>oo> before bp-with-dates= {:id nil, :name new_bp, :inspection_start_date 2025-06-01T00:00:00+00:00, :end_date 2025-12-01T00:00:00+00:00}
2023-12-16T14:15:43.561Z NX-41294 DEBUG [leihs.procurement.resources.budget-periods:116] - (-> bp (update :inspection_start_date set-date) (update :end_date set-date)) => {:id nil, :name "new_bp", :inspection_start_date "2025-06-01T00:00:00+00:00", :end_date "2025-12-01T00:00:00+00:00"}
>oo> after bp-with-dates= {:id nil, :name new_bp, :inspection_start_date 2025-06-01T00:00:00+00:00, :end_date 2025-12-01T00:00:00+00:00}
2023-12-16T14:15:43.561Z NX-41294 DEBUG [leihs.procurement.resources.budget-periods:124] - (:id bp-with-dates) => nil
>o> utils.helpers / my-cast  {:name new_bp, :inspection_start_date 2025-06-01T00:00:00+00:00, :end_date 2025-12-01T00:00:00+00:00}
2023-12-16T14:15:43.562Z NX-41294 DEBUG [leihs.procurement.utils.helpers:159] - data => {:name "new_bp", :inspection_start_date [[:cast "2025-06-01T00:00:00+00:00" :timestamp]], :end_date [[:cast "2025-12-01T00:00:00+00:00" :timestamp]]}
2023-12-16T14:15:43.562Z NX-41294 DEBUG [leihs.procurement.resources.budget-period:?] - (sql-format (sql/values (sql/insert-into :procurement_budget_periods) [bp])) => ["INSERT INTO procurement_budget_periods (name, inspection_start_date, end_date) VALUES (?, (CAST(? AS TIMESTAMP)), (CAST(? AS TIMESTAMP)))" "new_bp" "2025-06-01T00:00:00+00:00" "2025-12-01T00:00:00+00:00"]
2023-12-16T14:15:43.563Z NX-41294 DEBUG [leihs.procurement.resources.budget-period:306] - (:update-count result) => nil
2023-12-16T14:15:43.563Z NX-41294 DEBUG [leihs.procurement.resources.budget-periods:126] - (budget-period/insert-budget-period! tx (dissoc bp-with-dates :id)) => nil
>oo> superorsch args= {:input_data [{:id 88f1db18-8dd4-4872-9c05-77af8004ce44, :name bp_1_new_name, :inspection_start_date 2024-06-01T00:00:00+00:00, :end_date 2024-12-01T00:00:00+00:00} {:id nil, :name new_bp, :inspection_start_date 2025-06-01T00:00:00+00:00, :end_date 2025-12-01T00:00:00+00:00}]}
>oo> superorsch value= nil
2023-12-16T14:15:43.563Z NX-41294 DEBUG [leihs.procurement.resources.budget-periods:131] - (:id bp-with-dates) => nil
>o> budget-periond 1
>o> utils.helpers / my-cast  {:name new_bp, :inspection_start_date 2025-06-01T00:00:00+00:00, :end_date 2025-12-01T00:00:00+00:00}
2023-12-16T14:15:43.563Z NX-41294 DEBUG [leihs.procurement.utils.helpers:159] - data => {:name "new_bp", :inspection_start_date [[:cast "2025-06-01T00:00:00+00:00" :timestamp]], :end_date [[:cast "2025-12-01T00:00:00+00:00" :timestamp]]}
2023-12-16T14:15:43.563Z NX-41294 DEBUG [leihs.procurement.resources.budget-period:86] - (my-cast bp-map) => {:name "new_bp", :inspection_start_date [[:cast "2025-06-01T00:00:00+00:00" :timestamp]], :end_date [[:cast "2025-12-01T00:00:00+00:00" :timestamp]]}
2023-12-16T14:15:43.563Z NX-41294 DEBUG [leihs.procurement.resources.budget-period:?] - (sql-format (sql/where budget-period-base-query where-clause)) => ["SELECT procurement_budget_periods.* FROM procurement_budget_periods WHERE (procurement_budget_periods.name = ?) AND (procurement_budget_periods.inspection_start_date IN (CAST(? AS TIMESTAMP))) AND (procurement_budget_periods.end_date IN (CAST(? AS TIMESTAMP)))" "new_bp" "2025-06-01T00:00:00+00:00" "2025-12-01T00:00:00+00:00"]
2023-12-16T14:15:43.564Z NX-41294 DEBUG [leihs.procurement.resources.budget-period:87] - (jdbc/execute! tx (-> budget-period-base-query (sql/where where-clause) sql-format spy)) => [{:id #uuid "e81dd52f-473f-442c-80a4-4eeee75daee6", :name "new_bp", :inspection_start_date #inst "2025-05-31T22:00:00.000000000-00:00", :end_date #inst "2025-11-30T23:00:00.000000000-00:00", :created_at #inst "2023-12-16T14:15:43.496070000-00:00", :updated_at #inst "2023-12-16T14:15:43.496070000-00:00"}]
>o> query= [{:id #uuid "e81dd52f-473f-442c-80a4-4eeee75daee6", :name new_bp, :inspection_start_date #inst "2025-05-31T22:00:00.000000000-00:00", :end_date #inst "2025-11-30T23:00:00.000000000-00:00", :created_at #inst "2023-12-16T14:15:43.496070000-00:00", :updated_at #inst "2023-12-16T14:15:43.496070000-00:00"}]
>o> result= {:id #uuid "e81dd52f-473f-442c-80a4-4eeee75daee6", :name new_bp, :inspection_start_date #inst "2025-05-31T22:00:00.000000000-00:00", :end_date #inst "2025-11-30T23:00:00.000000000-00:00", :created_at #inst "2023-12-16T14:15:43.496070000-00:00", :updated_at #inst "2023-12-16T14:15:43.496070000-00:00"}
2023-12-16T14:15:43.564Z NX-41294 DEBUG [leihs.procurement.resources.budget-periods:132] - (-> bp-with-dates (dissoc :id) (->> (budget-period/get-budget-period tx)) :id) => #uuid "e81dd52f-473f-442c-80a4-4eeee75daee6"
>o> tocheck delete-budget-periods-not-in! ??? [88f1db18-8dd4-4872-9c05-77af8004ce44 #uuid "e81dd52f-473f-442c-80a4-4eeee75daee6"]
>o> uuids-sql clojure.lang.PersistentVector
>o> uuids-sql ([:cast 88f1db18-8dd4-4872-9c05-77af8004ce44 :uuid] [:cast #uuid "e81dd52f-473f-442c-80a4-4eeee75daee6" :uuid])
2023-12-16T14:15:43.565Z NX-41294 DEBUG [leihs.procurement.utils.helpers:78] - uuids-sql => ([:cast "88f1db18-8dd4-4872-9c05-77af8004ce44" :uuid] [:cast #uuid "e81dd52f-473f-442c-80a4-4eeee75daee6" :uuid])
2023-12-16T14:15:43.565Z NX-41294 DEBUG [leihs.procurement.resources.budget-periods:?] - (sql-format (sql/where (sql/delete-from :procurement_budget_periods :pbp) [:not-in :pbp.id (cast-uuids ids)])) => ["DELETE FROM procurement_budget_periods AS pbp WHERE pbp.id NOT IN (CAST(? AS UUID), CAST(? AS UUID))" "88f1db18-8dd4-4872-9c05-77af8004ce44" #uuid "e81dd52f-473f-442c-80a4-4eeee75daee6"]
2023-12-16T14:15:43.577Z NX-41294 DEBUG [leihs.procurement.resources.budget-periods:88] - (-> (jdbc/execute! tx (-> (sql/delete-from :procurement_budget_periods :pbp) (sql/where [:not-in :pbp.id (cast-uuids ids)]) sql-format spy)) :update-count) => nil
2023-12-16T14:15:43.578Z NX-41294 DEBUG [leihs.procurement.resources.budget-periods:141] - (delete-budget-periods-not-in! tx bp-ids) => nil
>>> ??? delete _> get-budget-periods {:input_data [{:id 88f1db18-8dd4-4872-9c05-77af8004ce44, :name bp_1_new_name, :inspection_start_date 2024-06-01T00:00:00+00:00, :end_date 2024-12-01T00:00:00+00:00} {:id nil, :name new_bp, :inspection_start_date 2025-06-01T00:00:00+00:00, :end_date 2025-12-01T00:00:00+00:00}]} nil
>oo> Causes issues2 >> {:input_data [{:id 88f1db18-8dd4-4872-9c05-77af8004ce44, :name bp_1_new_name, :inspection_start_date 2024-06-01T00:00:00+00:00, :end_date 2024-12-01T00:00:00+00:00} {:id nil, :name new_bp, :inspection_start_date 2025-06-01T00:00:00+00:00, :end_date 2025-12-01T00:00:00+00:00}]}
2023-12-16T14:15:43.578Z NX-41294 DEBUG [leihs.procurement.resources.budget-periods:63] - (= (:id args) []) => false
2023-12-16T14:15:43.578Z NX-41294 DEBUG [leihs.procurement.resources.budget-periods:67] - args => {:input_data [{:id "88f1db18-8dd4-4872-9c05-77af8004ce44", :name "bp_1_new_name", :inspection_start_date "2024-06-01T00:00:00+00:00", :end_date "2024-12-01T00:00:00+00:00"} {:id nil, :name "new_bp", :inspection_start_date "2025-06-01T00:00:00+00:00", :end_date "2025-12-01T00:00:00+00:00"}]}
2023-12-16T14:15:43.578Z NX-41294 DEBUG [leihs.procurement.resources.budget-periods:38] - (:id args) => nil
2023-12-16T14:15:43.578Z NX-41294 DEBUG [leihs.procurement.resources.budget-periods:42] - (-> args :whereRequestsCanBeMovedTo empty? not) => false
2023-12-16T14:15:43.578Z NX-41294 DEBUG [leihs.procurement.resources.budget-periods:37] - (let [ids (spy (:id args))] (cond-> budget-periods-base-query ids (sql/where [:in :procurement_budget_periods.id (cast-uuids ids)]) (spy (-> args :whereRequestsCanBeMovedTo empty? not)) (sql/where [:< :current_date :procurement_budget_periods.end_date]))) => {:select [:*], :from [:procurement_budget_periods], :order-by [[:end_date :desc]]}
2023-12-16T14:15:43.578Z NX-41294 DEBUG [leihs.procurement.resources.budget-periods:?] - (sql-format (budget-periods-query (spy args))) => ["SELECT * FROM procurement_budget_periods ORDER BY end_date DESC"]
2023-12-16T14:15:43.579Z NX-41294 DEBUG [leihs.procurement.resources.budget-periods:65] - (jdbc/execute! (-> context :request :tx-next) (-> (spy args) budget-periods-query sql-format spy)) => [{:id #uuid "e81dd52f-473f-442c-80a4-4eeee75daee6", :name "new_bp", :inspection_start_date #inst "2025-05-31T22:00:00.000000000-00:00", :end_date #inst "2025-11-30T23:00:00.000000000-00:00", :created_at #inst "2023-12-16T14:15:43.496070000-00:00", :updated_at #inst "2023-12-16T14:15:43.496070000-00:00"} {:id #uuid "88f1db18-8dd4-4872-9c05-77af8004ce44", :name "bp_1_new_name", :inspection_start_date #inst "2024-05-31T22:00:00.000000000-00:00", :end_date #inst "2024-11-30T23:00:00.000000000-00:00", :created_at #inst "2023-12-16T14:15:43.088177000-00:00", :updated_at #inst "2023-12-16T14:15:43.088177000-00:00"}]
2023-12-16T14:15:43.579Z NX-41294 DEBUG [leihs.procurement.resources.budget-periods:143] - (get-budget-periods context args value) => [{:id #uuid "e81dd52f-473f-442c-80a4-4eeee75daee6", :name "new_bp", :inspection_start_date #inst "2025-05-31T22:00:00.000000000-00:00", :end_date #inst "2025-11-30T23:00:00.000000000-00:00", :created_at #inst "2023-12-16T14:15:43.496070000-00:00", :updated_at #inst "2023-12-16T14:15:43.496070000-00:00"} {:id #uuid "88f1db18-8dd4-4872-9c05-77af8004ce44", :name "bp_1_new_name", :inspection_start_date #inst "2024-05-31T22:00:00.000000000-00:00", :end_date #inst "2024-11-30T23:00:00.000000000-00:00", :created_at #inst "2023-12-16T14:15:43.088177000-00:00", :updated_at #inst "2023-12-16T14:15:43.088177000-00:00"}]
2023-12-16T14:15:43.579Z NX-41294 DEBUG [leihs.procurement.resources.budget-periods:141] - (do (spy (delete-budget-periods-not-in! tx bp-ids)) (println ">>> ??? delete _> get-budget-periods" args value) (spy (get-budget-periods context args value))) => [{:id #uuid "e81dd52f-473f-442c-80a4-4eeee75daee6", :name "new_bp", :inspection_start_date #inst "2025-05-31T22:00:00.000000000-00:00", :end_date #inst "2025-11-30T23:00:00.000000000-00:00", :created_at #inst "2023-12-16T14:15:43.496070000-00:00", :updated_at #inst "2023-12-16T14:15:43.496070000-00:00"} {:id #uuid "88f1db18-8dd4-4872-9c05-77af8004ce44", :name "bp_1_new_name", :inspection_start_date #inst "2024-05-31T22:00:00.000000000-00:00", :end_date #inst "2024-11-30T23:00:00.000000000-00:00", :created_at #inst "2023-12-16T14:15:43.088177000-00:00", :updated_at #inst "2023-12-16T14:15:43.088177000-00:00"}]
2023-12-16T14:15:43.579Z NX-41294 DEBUG [leihs.procurement.resources.budget-periods:110] - (loop [[bp & rest-bps] bps bp-ids []] (if bp (let [p (println ">oo> before bp-with-dates=" bp) bp-with-dates (spy (-> bp (update :inspection_start_date set-date) (update :end_date set-date))) p (println ">oo> after bp-with-dates=" bp-with-dates)] (do (if (spy (:id bp-with-dates)) (spy (budget-period/update-budget-period! tx (spy bp-with-dates))) (spy (budget-period/insert-budget-period! tx (dissoc bp-with-dates :id)))) (let [p (println ">oo> superorsch args=" args) p (println ">oo> superorsch value=" value) bp-id (or (spy (:id bp-with-dates)) (spy (-> bp-with-dates (dissoc :id) (->> (budget-period/get-budget-period tx)) :id)))] (recur rest-bps (conj bp-ids bp-id))))) (spy (do (spy (delete-budget-periods-not-in! tx bp-ids)) (println ">>> ??? delete _> get-budget-periods" args value) (spy (get-budget-periods context args value)))))) => [{:id #uuid "e81dd52f-473f-442c-80a4-4eeee75daee6", :name "new_bp", :inspection_start_date #inst "2025-05-31T22:00:00.000000000-00:00", :end_date #inst "2025-11-30T23:00:00.000000000-00:00", :created_at #inst "2023-12-16T14:15:43.496070000-00:00", :updated_at #inst "2023-12-16T14:15:43.496070000-00:00"} {:id #uuid "88f1db18-8dd4-4872-9c05-77af8004ce44", :name "bp_1_new_name", :inspection_start_date #inst "2024-05-31T22:00:00.000000000-00:00", :end_date #inst "2024-11-30T23:00:00.000000000-00:00", :created_at #inst "2023-12-16T14:15:43.088177000-00:00", :updated_at #inst "2023-12-16T14:15:43.088177000-00:00"}]
2023-12-16T14:15:43.579Z NX-41294 DEBUG [leihs.procurement.resources.budget-periods:106] - (let [tx (-> context :request :tx-next) bps (:input_data args)] (spy (loop [[bp & rest-bps] bps bp-ids []] (if bp (let [p (println ">oo> before bp-with-dates=" bp) bp-with-dates (spy (-> bp (update :inspection_start_date set-date) (update :end_date set-date))) p (println ">oo> after bp-with-dates=" bp-with-dates)] (do (if (spy (:id bp-with-dates)) (spy (budget-period/update-budget-period! tx (spy bp-with-dates))) (spy (budget-period/insert-budget-period! tx (dissoc bp-with-dates :id)))) (let [p (println ">oo> superorsch args=" args) p (println ">oo> superorsch value=" value) bp-id (or (spy (:id bp-with-dates)) (spy (-> bp-with-dates (dissoc :id) (->> (budget-period/get-budget-period tx)) :id)))] (recur rest-bps (conj bp-ids bp-id))))) (spy (do (spy (delete-budget-periods-not-in! tx bp-ids)) (println ">>> ??? delete _> get-budget-periods" args value) (spy (get-budget-periods context args value)))))))) => [{:id #uuid "e81dd52f-473f-442c-80a4-4eeee75daee6", :name "new_bp", :inspection_start_date #inst "2025-05-31T22:00:00.000000000-00:00", :end_date #inst "2025-11-30T23:00:00.000000000-00:00", :created_at #inst "2023-12-16T14:15:43.496070000-00:00", :updated_at #inst "2023-12-16T14:15:43.496070000-00:00"} {:id #uuid "88f1db18-8dd4-4872-9c05-77af8004ce44", :name "bp_1_new_name", :inspection_start_date #inst "2024-05-31T22:00:00.000000000-00:00", :end_date #inst "2024-11-30T23:00:00.000000000-00:00", :created_at #inst "2023-12-16T14:15:43.088177000-00:00", :updated_at #inst "2023-12-16T14:15:43.088177000-00:00"}]

>request-grapql _> request {:leihs-user-language {:name English (UK), :locale en-GB, :default true, :active true}, :authenticated-entity {:email sachiko@hartmann.info, :contracts_count 0, :lastname Gorczany, :org_id nil, :scope_read true, :is_admin false, :authentication-method :session, :login nil, :scope_system_admin_write false, :scope_write true, :firstname Amelia, :scope_admin_write false, :user_session_created_at #time/instant "2023-12-16T14:15:43.469777Z", :id #uuid "3e6068a5-3959-401f-9548-3f12fa3c7347", :user_session_id #uuid "0ad37bbf-cbe7-4d91-9654-7505dee672e8", :scope_system_admin_read false, :access-rights (), :user_id #uuid "3e6068a5-3959-401f-9548-3f12fa3c7347", :is_system_admin false, :external_sign_out_url nil, :language_locale nil, :inventory_pool_roles_count 0, :scope_admin_read false}, :cookies {leihs-anti-csrf-token {:value 6a647f3b-6d53-454b-9ae3-0a935b796cc7}, leihs-user-session {:value 763c7494-b3bc-4096-8397-1c3eae08f1ef}}, :remote-addr 127.0.0.1, :start-time 228384326151666, :params {}, :settings {:email_sending_enabled false, :sessions_max_lifetime_secs 432000, :smtp_default_from_address your.lending.desk@example.com, :public_image_caching_enabled true, :sessions_force_secure false, :deliver_received_order_notifications false, :external_base_url nil, :sessions_force_uniqueness false, :email_signature Cheers,}, :tx-next #next.jdbc.default_options.DefaultOptions{:connectable #object[com.zaxxer.hikari.pool.HikariProxyConnection 0x26988c43 HikariProxyConnection@647531587 wrapping org.postgresql.jdbc.PgConnection@72b35f05], :options {:builder-fn #object[next.jdbc.result_set$as_unqualified_lower_maps 0x3db93dbb next.jdbc.result_set$as_unqualified_lower_maps@3db93dbb]}}, :query-params-raw {}, :route-params nil, :headers {accept application/json, accept-encoding gzip;q=1.0,deflate;q=0.6,identity;q=0.3, content-length 602, content-type application/json, cookie leihs-anti-csrf-token=6a647f3b-6d53-454b-9ae3-0a935b796cc7; leihs-user-session=763c7494-b3bc-4096-8397-1c3eae08f1ef, host localhost:3230, user-agent Faraday v2.7.1, x-csrf-token 6a647f3b-6d53-454b-9ae3-0a935b796cc7}, :async-channel #object[org.httpkit.server.AsyncChannel 0x4cf90cbb /127.0.0.1:3230<->/127.0.0.1:55880], :server-port 3230, :params-raw {}, :tx {:datasource #object[com.zaxxer.hikari.HikariDataSource 0x18d95122 HikariDataSource (db-pool)], :connection #object[com.zaxxer.hikari.pool.HikariProxyConnection 0x3cffea0a HikariProxyConnection@1023404554 wrapping org.postgresql.jdbc.PgConnection@68f5f480], :level 2, :rollback #object[clojure.lang.Atom 0x1476a1c5 {:status :ready, :val false}]}, :content-length 602, :form-params {}, :websocket? false, :query-params {}, :content-type application/json, :form-params-raw {}, :character-encoding utf8, :uri /procure/graphql, :server-name localhost, :handler-key :graphql, :query-string nil, :body {:query         mutation {
          budget_periods (
            input_data: [
              { id: "88f1db18-8dd4-4872-9c05-77af8004ce44",
                name: "bp_1_new_name",
                inspection_start_date: "2024-06-01T00:00:00+00:00",
                end_date: "2024-12-01T00:00:00+00:00" },
              { id: null,
                name: "new_bp",
                inspection_start_date: "2025-06-01T00:00:00+00:00",
                end_date: "2025-12-01T00:00:00+00:00" }
            ]
          ) {
            name
          }
        }
, :variables {}}, :graphql-schema #CompiledSchema<>, :handler #object[leihs.procurement.graphql$handler 0x36e39341 leihs.procurement.graphql$handler@36e39341], :multipart-params {}, :scheme :http, :request-method :post, :accept {:mime :json, :charset nil, :encoding nil, :language nil}}

>request-c-grapql _> request (json) {"leihs-user-language":{"name":"English (UK)","locale":"en-GB","default":true,"active":true},"authenticated-entity":{"email":"sachiko@hartmann.info","contracts_count":0,"lastname":"Gorczany","org_id":null,"scope_read":true,"is_admin":false,"authentication-method":"session","login":null,"scope_system_admin_write":false,"scope_write":true,"firstname":"Amelia","scope_admin_write":false,"user_session_created_at":"2023-12-16T14:15:43.469777Z","id":"3e6068a5-3959-401f-9548-3f12fa3c7347","user_session_id":"0ad37bbf-cbe7-4d91-9654-7505dee672e8","scope_system_admin_read":false,"access-rights":[],"user_id":"3e6068a5-3959-401f-9548-3f12fa3c7347","is_system_admin":false,"external_sign_out_url":null,"language_locale":null,"inventory_pool_roles_count":0,"scope_admin_read":false},"cookies":{"leihs-anti-csrf-token":{"value":"6a647f3b-6d53-454b-9ae3-0a935b796cc7"},"leihs-user-session":{"value":"763c7494-b3bc-4096-8397-1c3eae08f1ef"}},"remote-addr":"127.0.0.1","start-time":228384326151666,"params":{},"settings":{"email_sending_enabled":false,"sessions_max_lifetime_secs":432000,"smtp_default_from_address":"your.lending.desk@example.com","public_image_caching_enabled":true,"sessions_force_secure":false,"deliver_received_order_notifications":false,"external_base_url":null,"sessions_force_uniqueness":false,"email_signature":"Cheers,"},"query-params-raw":{},"route-params":null,"headers":{"accept":"application\/json","accept-encoding":"gzip;q=1.0,deflate;q=0.6,identity;q=0.3","content-length":"602","content-type":"application\/json","cookie":"leihs-anti-csrf-token=6a647f3b-6d53-454b-9ae3-0a935b796cc7; leihs-user-session=763c7494-b3bc-4096-8397-1c3eae08f1ef","host":"localhost:3230","user-agent":"Faraday v2.7.1","x-csrf-token":"6a647f3b-6d53-454b-9ae3-0a935b796cc7"},"server-port":3230,"params-raw":{},"content-length":602,"form-params":{},"websocket?":false,"query-params":{},"content-type":"application\/json","form-params-raw":{},"character-encoding":"utf8","uri":"\/procure\/graphql","server-name":"localhost","handler-key":"graphql","query-string":null,"body":{"query":"        mutation {\n          budget_periods (\n            input_data: [\n              { id: \"88f1db18-8dd4-4872-9c05-77af8004ce44\",\n                name: \"bp_1_new_name\",\n                inspection_start_date: \"2024-06-01T00:00:00+00:00\",\n                end_date: \"2024-12-01T00:00:00+00:00\" },\n              { id: null,\n                name: \"new_bp\",\n                inspection_start_date: \"2025-06-01T00:00:00+00:00\",\n                end_date: \"2025-12-01T00:00:00+00:00\" }\n            ]\n          ) {\n            name\n          }\n        }\n","variables":{}},"multipart-params":{},"scheme":"http","request-method":"post","accept":{"mime":"json","charset":null,"encoding":null,"language":null}}

>request-grapql _> result => {:data #ordered/map ([:budget_periods [#ordered/map ([:name new_bp]) #ordered/map ([:name bp_1_new_name])]])}
2023-12-16T14:15:43.580Z NX-41294 DEBUG [leihs.procurement.graphql:86] - result => {:data #ordered/map ([:budget_periods [#ordered/map ([:name "new_bp"]) #ordered/map ([:name "bp_1_new_name"])]])}
