#!/bin/bash
set -exu

# NOTE: this works exactly like `bin/build`, but runs inside a docker container.

ADMIN_IMAGE_NAME="${ADMIN_IMAGE_NAME:-leihs-admin}"
VERSION_NAME="${VERSION_NAME:-dev}"
IMAGE_WORKDIR="/leihs/admin"
DIST_DIR="target"
tag="${ADMIN_IMAGE_NAME}:${VERSION_NAME}"

ADMIN_DIR="$(dirname ${BASH_SOURCE})/.."
cd "${ADMIN_DIR}"
echo "PWD: $PWD"

ADMIN_TREE_ID="$(git log -n1 --format="%T" HEAD)"
ADMIN_SHORT_TREE_ID="$(git log -n1 --format="%t" HEAD)"
ADMIN_COMMIT_ID="$(git log -n1 --format="%H" HEAD)"

# build shared ui
# * if leihs-ui git tree is not clean, build a dev version
# * if leihs-ui git tree is clean, get the tree id and only build if not present
cd leihs-ui
source bin/require-clean-working-tree
if check-clean-working-tree; then
  leihs_ui_tree_id="$(git log -n1 --format="%t" HEAD)"
  test "$leihs_ui_tree_id"
  LEIHS_UI_VERSION="tree-${leihs_ui_tree_id}"
else
  LEIHS_UI_VERSION="dev"
fi
if ! docker image inspect "leihs-ui:${LEIHS_UI_VERSION}"; then
  VERSION_NAME="${LEIHS_UI_VERSION}" bin/docker-build
fi
cd -

docker buildx build \
  --build-arg "WORKDIR=${IMAGE_WORKDIR}" \
  --build-arg "LEIHS_UI_VERSION=${LEIHS_UI_VERSION}" \
  --build-arg "GIT_TREE_ID=${ADMIN_TREE_ID}" \
  --build-arg "GIT_COMMIT_ID=${ADMIN_COMMIT_ID}" \
  -t "$tag" .

# add more tags based on git state, if the working tree is clean
if check-clean-working-tree; then
  main_tag="${ADMIN_IMAGE_NAME}:tree-${ADMIN_SHORT_TREE_ID}"
  docker image tag "$tag" "$main_tag"
  docker image tag "$tag" "${ADMIN_IMAGE_NAME}:commit-${ADMIN_COMMIT_ID}"
  # print this as the "main" tag
  tag="$main_tag"
fi

docker image inspect "${tag}"

# extract uberjar from image / copy to host filesystem
rm -rf "${DIST_DIR}" && mkdir -p "${DIST_DIR}"
container_id="$(docker create "$tag")"
docker cp -La "$container_id:${IMAGE_WORKDIR}/${DIST_DIR}/." "${DIST_DIR}/"
docker rm "$container_id"
ls -la "${DIST_DIR}"

echo "${tag}"
