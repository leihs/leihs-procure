2023-12-19T10:03:40.963Z NX-41294 DEBUG [leihs.procurement.permissions.user:175] - (defn requester? [tx auth-entity] (let [query (-> (sql/select [[:exists (-> (sql/select [true :exists]) (sql/from :procurement_requesters_organizations) (sql/where [:= :procurement_requesters_organizations.user_id [:cast (:user_id auth-entity) :uuid]]))]]) sql-format) p (println ">o> requester??" query) result (jdbc/execute-one! tx (spy query)) p (println ">o> requester??" (spy result))] (spy (:exists result)))) => #'leihs.procurement.permissions.user/requester?
>o> conc concat(lower(coalesce(procurement_requests.article_name, '')), lower(coalesce(models.product, '')), lower(coalesce(models.version, '')))
>o> init-ds-next
>o> wrap-tx
>o> admin? [SELECT EXISTS (SELECT TRUE AS exists FROM procurement_admins WHERE procurement_admins.user_id = CAST(NULL AS UUID))]
>o> admin? {:exists false}
>o> inspector? [SELECT EXISTS (SELECT TRUE AS exists FROM procurement_category_inspectors WHERE procurement_category_inspectors.user_id = CAST(NULL AS UUID)) AS result]
>o> inspector? {:result false}
>o> viewer? [SELECT EXISTS (SELECT TRUE AS exists FROM procurement_category_viewers WHERE procurement_category_viewers.user_id = CAST(NULL AS UUID)) AS result]
>o> viewer? {:result false}
>o> requester?? [SELECT EXISTS (SELECT TRUE AS exists FROM procurement_requesters_organizations WHERE procurement_requesters_organizations.user_id = CAST(NULL AS UUID))]
>o> requester?? {:exists false}
>o> admin? [SELECT EXISTS (SELECT TRUE AS exists FROM procurement_admins WHERE procurement_admins.user_id = CAST(NULL AS UUID))]
>o> admin? {:exists false}
>o> inspector? [SELECT EXISTS (SELECT TRUE AS exists FROM procurement_category_inspectors WHERE procurement_category_inspectors.user_id = CAST(NULL AS UUID)) AS result]
>o> inspector? {:result false}
>o> viewer? [SELECT EXISTS (SELECT TRUE AS exists FROM procurement_category_viewers WHERE procurement_category_viewers.user_id = CAST(NULL AS UUID)) AS result]
>o> viewer? {:result false}
>o> requester?? [SELECT EXISTS (SELECT TRUE AS exists FROM procurement_requesters_organizations WHERE procurement_requesters_organizations.user_id = CAST(NULL AS UUID))]
>o> requester?? {:exists false}
>o> utils.helpers / my-cast  {:user_id #uuid "a39603b5-d536-426e-a641-bc0074e69354", :token_hash a55baada274850a2e4ee37fed93442325267885a86e0b4b933c0900d27e4de65, :authentication_system_id password, :meta_data {"user_agent":"Faraday v2.7.1","remote_addr":"127.0.0.1"}}
>o> upload::metadata
>o> session-token 3c2b22cb-1f6c-4776-8926-97ef3572157d
>o> query [SELECT users.email, users.firstname, users.id, users.is_admin, users.language_locale, users.lastname, users.login, users.org_id, users.is_system_admin, users.id AS user_id, (SELECT COUNT(*) FROM contracts WHERE contracts.user_id = users.id) AS contracts_count, (SELECT COUNT(*) FROM access_rights WHERE access_rights.user_id = users.id) AS inventory_pool_roles_count, user_sessions.id AS user_session_id, user_sessions.created_at AS user_session_created_at, authentication_systems.external_sign_out_url AS external_sign_out_url FROM users INNER JOIN user_sessions ON users.id = user_id INNER JOIN authentication_systems ON authentication_systems.id = user_sessions.authentication_system_id INNER JOIN system_and_security_settings ON system_and_security_settings.id = ? WHERE (user_sessions.token_hash = (ENCODE((DIGEST(?, ?)), ?))) AND now() < user_sessions.created_at + system_and_security_settings.sessions_max_lifetime_secs * interval '1 second' AND (account_enabled = TRUE) 0 3c2b22cb-1f6c-4776-8926-97ef3572157d sha256 hex]
>o> user {:email burton_trantow@greenfelder.info, :contracts_count 0, :lastname Becker, :org_id nil, :is_admin false, :login nil, :firstname Lashandra, :user_session_created_at #inst "2023-12-19T10:04:25.961415000-00:00", :id #uuid "a39603b5-d536-426e-a641-bc0074e69354", :user_session_id #uuid "04906e1c-48e5-4a76-89aa-9800efbb6c1c", :user_id #uuid "a39603b5-d536-426e-a641-bc0074e69354", :is_system_admin false, :external_sign_out_url nil, :language_locale nil, :inventory_pool_roles_count 0}
>o> admin? [SELECT EXISTS (SELECT TRUE AS exists FROM procurement_admins WHERE procurement_admins.user_id = CAST(? AS UUID)) #uuid "a39603b5-d536-426e-a641-bc0074e69354"]
>o> admin? {:exists false}
>o> inspector? [SELECT EXISTS (SELECT TRUE AS exists FROM procurement_category_inspectors WHERE procurement_category_inspectors.user_id = CAST(? AS UUID)) AS result #uuid "a39603b5-d536-426e-a641-bc0074e69354"]
>o> inspector? {:result true}
>o> viewer? [SELECT EXISTS (SELECT TRUE AS exists FROM procurement_category_viewers WHERE procurement_category_viewers.user_id = CAST(? AS UUID)) AS result #uuid "a39603b5-d536-426e-a641-bc0074e69354"]
>o> viewer? {:result false}
>o> requester?? [SELECT EXISTS (SELECT TRUE AS exists FROM procurement_requesters_organizations WHERE procurement_requesters_organizations.user_id = CAST(? AS UUID)) #uuid "a39603b5-d536-426e-a641-bc0074e69354"]
>o> requester?? {:exists true}
>o> admin? [SELECT EXISTS (SELECT TRUE AS exists FROM procurement_admins WHERE procurement_admins.user_id = CAST(? AS UUID)) #uuid "a39603b5-d536-426e-a641-bc0074e69354"]
>o> admin? {:exists false}
>o> inspector? [SELECT EXISTS (SELECT TRUE AS exists FROM procurement_category_inspectors WHERE procurement_category_inspectors.user_id = CAST(? AS UUID)) AS result #uuid "a39603b5-d536-426e-a641-bc0074e69354"]
>o> inspector? {:result true}
>o> viewer? [SELECT EXISTS (SELECT TRUE AS exists FROM procurement_category_viewers WHERE procurement_category_viewers.user_id = CAST(? AS UUID)) AS result #uuid "a39603b5-d536-426e-a641-bc0074e69354"]
>o> viewer? {:result false}
>o> requester?? [SELECT EXISTS (SELECT TRUE AS exists FROM procurement_requesters_organizations WHERE procurement_requesters_organizations.user_id = CAST(? AS UUID)) #uuid "a39603b5-d536-426e-a641-bc0074e69354"]
>o> requester?? {:exists true}
>o> ???? handler a
>o> ??????  pure-handler 2a             mutation createRequst($inputData: CreateRequestInput){
>o> ??????  pure-handler 2b {:leihs-user-language {:name English (UK), :locale en-GB, :default true, :active true}, :authenticated-entity {:email burton_trantow@greenfelder.info, :contracts_count 0, :lastname Becker, :org_id nil, :scope_read true, :is_admin false, :authentication-method :session, :login nil, :scope_system_admin_write false, :scope_write true, :firstname Lashandra, :scope_admin_write false, :user_session_created_at #inst "2023-12-19T10:04:25.961415000-00:00", :id #uuid "a39603b5-d536-426e-a641-bc0074e69354", :user_session_id #uuid "04906e1c-48e5-4a76-89aa-9800efbb6c1c", :scope_system_admin_read false, :access-rights nil, :user_id #uuid "a39603b5-d536-426e-a641-bc0074e69354", :is_system_admin false, :external_sign_out_url nil, :language_locale nil, :inventory_pool_roles_count 0, :scope_admin_read false}, :cookies {leihs-anti-csrf-token {:value 5c091efc-a837-4e09-80c3-c1fb4ff923f1}, leihs-user-session {:value 3c2b22cb-1f6c-4776-8926-97ef3572157d}}, :remote-addr 127.0.0.1, :start-time 35740332304416, :params {}, :settings {:email_sending_enabled false, :sessions_max_lifetime_secs 432000, :smtp_default_from_address your.lending.desk@example.com, :public_image_caching_enabled true, :sessions_force_secure false, :deliver_received_order_notifications false, :external_base_url nil, :sessions_force_uniqueness false, :email_signature Cheers,}, :tx-next #object[com.zaxxer.hikari.pool.HikariProxyConnection 0xb566d7b HikariProxyConnection@190213499 wrapping org.postgresql.jdbc.PgConnection@4dc52d3], :query-params-raw {}, :route-params nil, :headers {accept application/json, accept-encoding gzip;q=1.0,deflate;q=0.6,identity;q=0.3, content-length 505, content-type application/json, cookie leihs-anti-csrf-token=5c091efc-a837-4e09-80c3-c1fb4ff923f1; leihs-user-session=3c2b22cb-1f6c-4776-8926-97ef3572157d, host localhost:3230, user-agent Faraday v2.7.1, x-csrf-token 5c091efc-a837-4e09-80c3-c1fb4ff923f1}, :async-channel #object[org.httpkit.server.AsyncChannel 0x3cc38fa5 /127.0.0.1:3230<->/127.0.0.1:50630], :server-port 3230, :params-raw {}, :tx {:datasource #object[com.zaxxer.hikari.HikariDataSource 0x64e58ce5 HikariDataSource (db-pool)], :connection #object[com.zaxxer.hikari.pool.HikariProxyConnection 0x451cfbcf HikariProxyConnection@1159527375 wrapping org.postgresql.jdbc.PgConnection@32c9b0f8], :level 1, :rollback #object[clojure.lang.Atom 0x5a068758 {:status :ready, :val false}]}, :content-length 505, :form-params {}, :websocket? false, :query-params {}, :content-type application/json, :form-params-raw {}, :character-encoding utf8, :uri /procure/graphql, :server-name localhost, :handler-key :graphql, :query-string nil, :body {:query             mutation createRequst($inputData: CreateRequestInput){
>o> ??????  pure-handler 2c clojure.lang.PersistentHashMap
>o> exec-query 1a
>o> create-request! 1 {:request {:leihs-user-language {:name English (UK), :locale en-GB, :default true, :active true}, :authenticated-entity {:email burton_trantow@greenfelder.info, :contracts_count 0, :lastname Becker, :org_id nil, :scope_read true, :is_admin false, :authentication-method :session, :login nil, :scope_system_admin_write false, :scope_write true, :firstname Lashandra, :scope_admin_write false, :user_session_created_at #inst "2023-12-19T10:04:25.961415000-00:00", :id #uuid "a39603b5-d536-426e-a641-bc0074e69354", :user_session_id #uuid "04906e1c-48e5-4a76-89aa-9800efbb6c1c", :scope_system_admin_read false, :access-rights nil, :user_id #uuid "a39603b5-d536-426e-a641-bc0074e69354", :is_system_admin false, :external_sign_out_url nil, :language_locale nil, :inventory_pool_roles_count 0, :scope_admin_read false}, :cookies {leihs-anti-csrf-token {:value 5c091efc-a837-4e09-80c3-c1fb4ff923f1}, leihs-user-session {:value 3c2b22cb-1f6c-4776-8926-97ef3572157d}}, :remote-addr 127.0.0.1, :start-time 35740332304416, :params {}, :settings {:email_sending_enabled false, :sessions_max_lifetime_secs 432000, :smtp_default_from_address your.lending.desk@example.com, :public_image_caching_enabled true, :sessions_force_secure false, :deliver_received_order_notifications false, :external_base_url nil, :sessions_force_uniqueness false, :email_signature Cheers,}, :tx-next #object[com.zaxxer.hikari.pool.HikariProxyConnection 0xb566d7b HikariProxyConnection@190213499 wrapping org.postgresql.jdbc.PgConnection@4dc52d3], :query-params-raw {}, :route-params nil, :headers {accept application/json, accept-encoding gzip;q=1.0,deflate;q=0.6,identity;q=0.3, content-length 505, content-type application/json, cookie leihs-anti-csrf-token=5c091efc-a837-4e09-80c3-c1fb4ff923f1; leihs-user-session=3c2b22cb-1f6c-4776-8926-97ef3572157d, host localhost:3230, user-agent Faraday v2.7.1, x-csrf-token 5c091efc-a837-4e09-80c3-c1fb4ff923f1}, :async-channel #object[org.httpkit.server.AsyncChannel 0x3cc38fa5 /127.0.0.1:3230<->/127.0.0.1:50630], :server-port 3230, :params-raw {}, :tx {:datasource #object[com.zaxxer.hikari.HikariDataSource 0x64e58ce5 HikariDataSource (db-pool)], :connection #object[com.zaxxer.hikari.pool.HikariProxyConnection 0x451cfbcf HikariProxyConnection@1159527375 wrapping org.postgresql.jdbc.PgConnection@32c9b0f8], :level 1, :rollback #object[clojure.lang.Atom 0x5a068758 {:status :ready, :val false}]}, :content-length 505, :form-params {}, :websocket? false, :query-params {}, :content-type application/json, :form-params-raw {}, :character-encoding utf8, :uri /procure/graphql, :server-name localhost, :handler-key :graphql, :query-string nil, :body {:query             mutation createRequst($inputData: CreateRequestInput){


>o> create-request! 2 {:leihs-user-language {:name English (UK), :locale en-GB, :default true, :active true}, :authenticated-entity {:email burton_trantow@greenfelder.info, :contracts_count 0, :lastname Becker, :org_id nil, :scope_read true, :is_admin false, :authentication-method :session, :login nil, :scope_system_admin_write false, :scope_write true, :firstname Lashandra, :scope_admin_write false, :user_session_created_at #inst "2023-12-19T10:04:25.961415000-00:00", :id #uuid "a39603b5-d536-426e-a641-bc0074e69354", :user_session_id #uuid "04906e1c-48e5-4a76-89aa-9800efbb6c1c", :scope_system_admin_read false, :access-rights nil, :user_id #uuid "a39603b5-d536-426e-a641-bc0074e69354", :is_system_admin false, :external_sign_out_url nil, :language_locale nil, :inventory_pool_roles_count 0, :scope_admin_read false}, :cookies {leihs-anti-csrf-token {:value 5c091efc-a837-4e09-80c3-c1fb4ff923f1}, leihs-user-session {:value 3c2b22cb-1f6c-4776-8926-97ef3572157d}}, :remote-addr 127.0.0.1, :start-time 35740332304416, :params {}, :settings {:email_sending_enabled false, :sessions_max_lifetime_secs 432000, :smtp_default_from_address your.lending.desk@example.com, :public_image_caching_enabled true, :sessions_force_secure false, :deliver_received_order_notifications false, :external_base_url nil, :sessions_force_uniqueness false, :email_signature Cheers,}, :tx-next #object[com.zaxxer.hikari.pool.HikariProxyConnection 0xb566d7b HikariProxyConnection@190213499 wrapping org.postgresql.jdbc.PgConnection@4dc52d3], :query-params-raw {}, :route-params nil, :headers {accept application/json, accept-encoding gzip;q=1.0,deflate;q=0.6,identity;q=0.3, content-length 505, content-type application/json, cookie leihs-anti-csrf-token=5c091efc-a837-4e09-80c3-c1fb4ff923f1; leihs-user-session=3c2b22cb-1f6c-4776-8926-97ef3572157d, host localhost:3230, user-agent Faraday v2.7.1, x-csrf-token 5c091efc-a837-4e09-80c3-c1fb4ff923f1}, :async-channel #object[org.httpkit.server.AsyncChannel 0x3cc38fa5 /127.0.0.1:3230<->/127.0.0.1:50630], :server-port 3230, :params-raw {}, :tx {:datasource #object[com.zaxxer.hikari.HikariDataSource 0x64e58ce5 HikariDataSource (db-pool)], :connection #object[com.zaxxer.hikari.pool.HikariProxyConnection 0x451cfbcf HikariProxyConnection@1159527375 wrapping org.postgresql.jdbc.PgConnection@32c9b0f8], :level 1, :rollback #object[clojure.lang.Atom 0x5a068758 {:status :ready, :val false}]}, :content-length 505, :form-params {}, :websocket? false, :query-params {}, :content-type application/json, :form-params-raw {}, :character-encoding utf8, :uri /procure/graphql, :server-name localhost, :handler-key :graphql, :query-string nil, :body {:query             mutation createRequst($inputData: CreateRequestInput){





>o> create-request! 3 #object[com.zaxxer.hikari.pool.HikariProxyConnection 0xb566d7b HikariProxyConnection@190213499 wrapping org.postgresql.jdbc.PgConnection@4dc52d3]
>o> create-request! 4 com.zaxxer.hikari.pool.HikariProxyConnection
>o> debug> 35 1
>o> debug> 35 2
>o> debug> 35 3
>o> debug> 35 4
>o> get-organization-of-requester 1 com.zaxxer.hikari.pool.HikariProxyConnection
>o> get-organization-of-requester 1 #object[com.zaxxer.hikari.pool.HikariProxyConnection 0xb566d7b HikariProxyConnection@190213499 wrapping org.postgresql.jdbc.PgConnection@4dc52d3]
>o> get-organization-of-requester 2 com.zaxxer.hikari.pool.HikariProxyConnection