>o> create-request! 1 {:request {:leihs-user-language {:name English (UK), :locale en-GB, :default true, :active true}, :authenticated-entity {:email burton_trantow@greenfelder.info, :contracts_count 0, :lastname Becker, :org_id nil, :scope_read true, :is_admin false, :authentication-method :session, :login nil, :scope_system_admin_write false, :scope_write true, :firstname Lashandra, :scope_admin_write false, :user_session_created_at #time/instant "2023-12-19T09:56:56.216412Z", :id #uuid "9eb306ca-5e35-464e-9c81-9c522becd3a5", :user_session_id #uuid "bb07270d-8889-4b74-980d-4d5730c39552", :scope_system_admin_read false, :access-rights (), :user_id #uuid "9eb306ca-5e35-464e-9c81-9c522becd3a5", :is_system_admin false, :external_sign_out_url nil, :language_locale nil, :inventory_pool_roles_count 0, :scope_admin_read false}, :cookies {leihs-anti-csrf-token {:value f3c6d600-02d9-4acc-8881-f6b422d0f622}, leihs-user-session {:value a5b837a5-cccc-4eec-b5fc-89367a39a0af}}, :remote-addr 127.0.0.1, :start-time 35290591700166, :params {}, :settings {:email_sending_enabled false, :sessions_max_lifetime_secs 432000, :smtp_default_from_address your.lending.desk@example.com, :public_image_caching_enabled true, :sessions_force_secure false, :deliver_received_order_notifications false, :external_base_url nil, :sessions_force_uniqueness false, :email_signature Cheers,}, :tx-next #next.jdbc.default_options.DefaultOptions{:connectable #object[com.zaxxer.hikari.pool.HikariProxyConnection 0x642f2287 HikariProxyConnection@1680810631 wrapping org.postgresql.jdbc.PgConnection@62a50821], :options {:builder-fn #object[next.jdbc.result_set$as_unqualified_lower_maps 0x733425c0 next.jdbc.result_set$as_unqualified_lower_maps@733425c0]}}, :query-params-raw {}, :route-params nil, :headers {accept application/json, accept-encoding gzip;q=1.0,deflate;q=0.6,identity;q=0.3, content-length 505, content-type application/json, cookie leihs-anti-csrf-token=f3c6d600-02d9-4acc-8881-f6b422d0f622; leihs-user-session=a5b837a5-cccc-4eec-b5fc-89367a39a0af, host localhost:3230, user-agent Faraday v2.7.1, x-csrf-token f3c6d600-02d9-4acc-8881-f6b422d0f622}, :async-channel #object[org.httpkit.server.AsyncChannel 0x48aa1548 /127.0.0.1:3230<->/127.0.0.1:50553], :server-port 3230, :params-raw {}, :tx {:datasource #object[com.zaxxer.hikari.HikariDataSource 0x552cd349 HikariDataSource (db-pool)], :connection #object[com.zaxxer.hikari.pool.HikariProxyConnection 0x6ad0aaed HikariProxyConnection@1792060141 wrapping org.postgresql.jdbc.PgConnection@7d0c2f41], :level 2, :rollback #object[clojure.lang.Atom 0x7b9258ad {:status :ready, :val false}]}, :content-length 505, :form-params {}, :websocket? false, :query-params {}, :content-type application/json, :form-params-raw {}, :character-encoding utf8, :uri /procure/graphql, :server-name localhost, :handler-key :graphql, :query-string nil, :body {:query             mutation createRequst($inputData: CreateRequestInput){
>o> create-request! 2 {:leihs-user-language {:name English (UK), :locale en-GB, :default true, :active true}, :authenticated-entity {:email burton_trantow@greenfelder.info, :contracts_count 0, :lastname Becker, :org_id nil, :scope_read true, :is_admin false, :authentication-method :session, :login nil, :scope_system_admin_write false, :scope_write true, :firstname Lashandra, :scope_admin_write false, :user_session_created_at #time/instant "2023-12-19T09:56:56.216412Z", :id #uuid "9eb306ca-5e35-464e-9c81-9c522becd3a5", :user_session_id #uuid "bb07270d-8889-4b74-980d-4d5730c39552", :scope_system_admin_read false, :access-rights (), :user_id #uuid "9eb306ca-5e35-464e-9c81-9c522becd3a5", :is_system_admin false, :external_sign_out_url nil, :language_locale nil, :inventory_pool_roles_count 0, :scope_admin_read false}, :cookies {leihs-anti-csrf-token {:value f3c6d600-02d9-4acc-8881-f6b422d0f622}, leihs-user-session {:value a5b837a5-cccc-4eec-b5fc-89367a39a0af}}, :remote-addr 127.0.0.1, :start-time 35290591700166, :params {}, :settings {:email_sending_enabled false, :sessions_max_lifetime_secs 432000, :smtp_default_from_address your.lending.desk@example.com, :public_image_caching_enabled true, :sessions_force_secure false, :deliver_received_order_notifications false, :external_base_url nil, :sessions_force_uniqueness false, :email_signature Cheers,}, :tx-next #next.jdbc.default_options.DefaultOptions{:connectable #object[com.zaxxer.hikari.pool.HikariProxyConnection 0x642f2287 HikariProxyConnection@1680810631 wrapping org.postgresql.jdbc.PgConnection@62a50821], :options {:builder-fn #object[next.jdbc.result_set$as_unqualified_lower_maps 0x733425c0 next.jdbc.result_set$as_unqualified_lower_maps@733425c0]}}, :query-params-raw {}, :route-params nil, :headers {accept application/json, accept-encoding gzip;q=1.0,deflate;q=0.6,identity;q=0.3, content-length 505, content-type application/json, cookie leihs-anti-csrf-token=f3c6d600-02d9-4acc-8881-f6b422d0f622; leihs-user-session=a5b837a5-cccc-4eec-b5fc-89367a39a0af, host localhost:3230, user-agent Faraday v2.7.1, x-csrf-token f3c6d600-02d9-4acc-8881-f6b422d0f622}, :async-channel #object[org.httpkit.server.AsyncChannel 0x48aa1548 /127.0.0.1:3230<->/127.0.0.1:50553], :server-port 3230, :params-raw {}, :tx {:datasource #object[com.zaxxer.hikari.HikariDataSource 0x552cd349 HikariDataSource (db-pool)], :connection #object[com.zaxxer.hikari.pool.HikariProxyConnection 0x6ad0aaed HikariProxyConnection@1792060141 wrapping org.postgresql.jdbc.PgConnection@7d0c2f41], :level 2, :rollback #object[clojure.lang.Atom 0x7b9258ad {:status :ready, :val false}]}, :content-length 505, :form-params {}, :websocket? false, :query-params {}, :content-type application/json, :form-params-raw {}, :character-encoding utf8, :uri /procure/graphql, :server-name localhost, :handler-key :graphql, :query-string nil, :body {:query             mutation createRequst($inputData: CreateRequestInput){
>o> create-request! 3 {:datasource #object[com.zaxxer.hikari.HikariDataSource 0x552cd349 HikariDataSource (db-pool)], :connection #object[com.zaxxer.hikari.pool.HikariProxyConnection 0x6ad0aaed HikariProxyConnection@1792060141 wrapping org.postgresql.jdbc.PgConnection@7d0c2f41], :level 2, :rollback #object[clojure.lang.Atom 0x7b9258ad {:status :ready, :val false}]}
>o> create-request! 4 clojure.lang.PersistentArrayMap
>o> debug> 35 1
>o> debug> create-request! before get-organization-of-requester
>o> get-organization-of-requester 1 clojure.lang.PersistentArrayMap
>o> get-organization-of-requester 1 {:datasource #object[com.zaxxer.hikari.HikariDataSource 0x552cd349 HikariDataSource (db-pool)], :connection #object[com.zaxxer.hikari.pool.HikariProxyConnection 0x6ad0aaed HikariProxyConnection@1792060141 wrapping org.postgresql.jdbc.PgConnection@7d0c2f41], :level 2, :rollback #object[clojure.lang.Atom 0x7b9258ad {:status :ready, :val false}]}
>o> debug> create-request! after get-organization-of-requester
>o> past? query= [SELECT current_date > CAST(? AS date) AS result  2024-03-18]
>o> past? result= {:result false}
>o> sqlmap {:select (#sql/raw DISTINCT ON (procurement_requests.id, concat(lower(coalesce(procurement_requests.article_name, '')), lower(coalesce(models.product, '')), lower(coalesce(models.version, '')))) procurement_requests.* [#sql/call [:case [:= :procurement_requests.approved_quantity nil] NEW [:>= :procurement_requests.approved_quantity :procurement_requests.requested_quantity] APPROVED [:and [:< :procurement_requests.approved_quantity :procurement_requests.requested_quantity] [:> :procurement_requests.approved_quantity 0]] PARTIALLY_APPROVED [:= :procurement_requests.approved_quantity 0] DENIED] :state]), :from (:procurement_requests), :left-join (:models [:= :models.id :procurement_requests.model_id]), :order-by (#sql/raw concat(lower(coalesce(procurement_requests.article_name, '')), lower(coalesce(models.product, '')), lower(coalesce(models.version, '')))), :join (:procurement_budget_periods [:= :procurement_budget_periods.id :procurement_requests.budget_period_id]), :where [:= :procurement_requests.id #uuid "e8786990-28b0-4c0a-9d68-b09ddbc68092"]}
>o> tbl :procurement_budget_periods_2
>o> nest-key :budget_period
>o> sqlmap {:select (#sql/raw DISTINCT ON (procurement_requests.id, concat(lower(coalesce(procurement_requests.article_name, '')), lower(coalesce(models.product, '')), lower(coalesce(models.version, '')))) procurement_requests.* [#sql/call [:case [:= :procurement_requests.approved_quantity nil] NEW [:>= :procurement_requests.approved_quantity :procurement_requests.requested_quantity] APPROVED [:and [:< :procurement_requests.approved_quantity :procurement_requests.requested_quantity] [:> :procurement_requests.approved_quantity 0]] PARTIALLY_APPROVED [:= :procurement_requests.approved_quantity 0] DENIED] :state] [#sql/call [:row_to_json :procurement_budget_periods_2] :budget_period] #sql/raw row_to_json(procurement_categories)::jsonb || jsonb_build_object('main_category', row_to_json(procurement_main_categories)) AS category), :from (:procurement_requests), :left-join (:models [:= :models.id :procurement_requests.model_id]), :order-by (#sql/raw concat(lower(coalesce(procurement_requests.article_name, '')), lower(coalesce(models.product, '')), lower(coalesce(models.version, '')))), :join (:procurement_budget_periods [:= :procurement_budget_periods.id :procurement_requests.budget_period_id] [{:select (:* [#sql/call [:> :current_date :end_date] :is_past]), :from (:procurement_budget_periods)} :procurement_budget_periods_2] [:= :procurement_budget_periods_2.id :procurement_requests.budget_period_id] :procurement_categories [:= :procurement_categories.id :procurement_requests.category_id] :procurement_main_categories [:= :procurement_main_categories.id :procurement_categories.main_category_id]), :where [:= :procurement_requests.id #uuid "e8786990-28b0-4c0a-9d68-b09ddbc68092"]}
>o> tbl :models
>o> nest-key :model
>o> sqlmap {:select (#sql/raw DISTINCT ON (procurement_requests.id, concat(lower(coalesce(procurement_requests.article_name, '')), lower(coalesce(models.product, '')), lower(coalesce(models.version, '')))) procurement_requests.* [#sql/call [:case [:= :procurement_requests.approved_quantity nil] NEW [:>= :procurement_requests.approved_quantity :procurement_requests.requested_quantity] APPROVED [:and [:< :procurement_requests.approved_quantity :procurement_requests.requested_quantity] [:> :procurement_requests.approved_quantity 0]] PARTIALLY_APPROVED [:= :procurement_requests.approved_quantity 0] DENIED] :state] [#sql/call [:row_to_json :procurement_budget_periods_2] :budget_period] #sql/raw row_to_json(procurement_categories)::jsonb || jsonb_build_object('main_category', row_to_json(procurement_main_categories)) AS category [#sql/call [:row_to_json :models] :model] #sql/raw row_to_json(procurement_organizations)::jsonb || jsonb_build_object('department', row_to_json(procurement_departments)) AS organization), :from (:procurement_requests), :left-join (:models [:= :models.id :procurement_requests.model_id]), :order-by (#sql/raw concat(lower(coalesce(procurement_requests.article_name, '')), lower(coalesce(models.product, '')), lower(coalesce(models.version, '')))), :join (:procurement_budget_periods [:= :procurement_budget_periods.id :procurement_requests.budget_period_id] [{:select (:* [#sql/call [:> :current_date :end_date] :is_past]), :from (:procurement_budget_periods)} :procurement_budget_periods_2] [:= :procurement_budget_periods_2.id :procurement_requests.budget_period_id] :procurement_categories [:= :procurement_categories.id :procurement_requests.category_id] :procurement_main_categories [:= :procurement_main_categories.id :procurement_categories.main_category_id] :procurement_organizations [:= :procurement_organizations.id :procurement_requests.organization_id] [:procurement_organizations :procurement_departments] [:= :procurement_departments.id :procurement_organizations.parent_id]), :where [:= :procurement_requests.id #uuid "e8786990-28b0-4c0a-9d68-b09ddbc68092"]}
>o> tbl :procurement_templates
>o> nest-key :template
>o> sqlmap {:select (#sql/raw DISTINCT ON (procurement_requests.id, concat(lower(coalesce(procurement_requests.article_name, '')), lower(coalesce(models.product, '')), lower(coalesce(models.version, '')))) procurement_requests.* [#sql/call [:case [:= :procurement_requests.approved_quantity nil] NEW [:>= :procurement_requests.approved_quantity :procurement_requests.requested_quantity] APPROVED [:and [:< :procurement_requests.approved_quantity :procurement_requests.requested_quantity] [:> :procurement_requests.approved_quantity 0]] PARTIALLY_APPROVED [:= :procurement_requests.approved_quantity 0] DENIED] :state] [#sql/call [:row_to_json :procurement_budget_periods_2] :budget_period] #sql/raw row_to_json(procurement_categories)::jsonb || jsonb_build_object('main_category', row_to_json(procurement_main_categories)) AS category [#sql/call [:row_to_json :models] :model] #sql/raw row_to_json(procurement_organizations)::jsonb || jsonb_build_object('department', row_to_json(procurement_departments)) AS organization [#sql/call [:row_to_json :procurement_templates] :template] #sql/raw row_to_json(rooms)::jsonb || jsonb_build_object('building', row_to_json(buildings)) AS room), :from (:procurement_requests), :left-join (:models [:= :models.id :procurement_requests.model_id] :procurement_templates [:= :procurement_templates.id :procurement_requests.template_id]), :order-by (#sql/raw concat(lower(coalesce(procurement_requests.article_name, '')), lower(coalesce(models.product, '')), lower(coalesce(models.version, '')))), :join (:procurement_budget_periods [:= :procurement_budget_periods.id :procurement_requests.budget_period_id] [{:select (:* [#sql/call [:> :current_date :end_date] :is_past]), :from (:procurement_budget_periods)} :procurement_budget_periods_2] [:= :procurement_budget_periods_2.id :procurement_requests.budget_period_id] :procurement_categories [:= :procurement_categories.id :procurement_requests.category_id] :procurement_main_categories [:= :procurement_main_categories.id :procurement_categories.main_category_id] :procurement_organizations [:= :procurement_organizations.id :procurement_requests.organization_id] [:procurement_organizations :procurement_departments] [:= :procurement_departments.id :procurement_organizations.parent_id] :rooms [:= :rooms.id :procurement_requests.room_id] :buildings [:= :buildings.id :rooms.building_id]), :where [:= :procurement_requests.id #uuid "e8786990-28b0-4c0a-9d68-b09ddbc68092"]}
>o> tbl :suppliers
>o> nest-key :supplier
>o> sqlmap {:select (#sql/raw DISTINCT ON (procurement_requests.id, concat(lower(coalesce(procurement_requests.article_name, '')), lower(coalesce(models.product, '')), lower(coalesce(models.version, '')))) procurement_requests.* [#sql/call [:case [:= :procurement_requests.approved_quantity nil] NEW [:>= :procurement_requests.approved_quantity :procurement_requests.requested_quantity] APPROVED [:and [:< :procurement_requests.approved_quantity :procurement_requests.requested_quantity] [:> :procurement_requests.approved_quantity 0]] PARTIALLY_APPROVED [:= :procurement_requests.approved_quantity 0] DENIED] :state] [#sql/call [:row_to_json :procurement_budget_periods_2] :budget_period] #sql/raw row_to_json(procurement_categories)::jsonb || jsonb_build_object('main_category', row_to_json(procurement_main_categories)) AS category [#sql/call [:row_to_json :models] :model] #sql/raw row_to_json(procurement_organizations)::jsonb || jsonb_build_object('department', row_to_json(procurement_departments)) AS organization [#sql/call [:row_to_json :procurement_templates] :template] #sql/raw row_to_json(rooms)::jsonb || jsonb_build_object('building', row_to_json(buildings)) AS room [#sql/call [:row_to_json :suppliers] :supplier]), :from (:procurement_requests), :left-join (:models [:= :models.id :procurement_requests.model_id] :procurement_templates [:= :procurement_templates.id :procurement_requests.template_id] :suppliers [:= :suppliers.id :procurement_requests.supplier_id]), :order-by (#sql/raw concat(lower(coalesce(procurement_requests.article_name, '')), lower(coalesce(models.product, '')), lower(coalesce(models.version, '')))), :join (:procurement_budget_periods [:= :procurement_budget_periods.id :procurement_requests.budget_period_id] [{:select (:* [#sql/call [:> :current_date :end_date] :is_past]), :from (:procurement_budget_periods)} :procurement_budget_periods_2] [:= :procurement_budget_periods_2.id :procurement_requests.budget_period_id] :procurement_categories [:= :procurement_categories.id :procurement_requests.category_id] :procurement_main_categories [:= :procurement_main_categories.id :procurement_categories.main_category_id] :procurement_organizations [:= :procurement_organizations.id :procurement_requests.organization_id] [:procurement_organizations :procurement_departments] [:= :procurement_departments.id :procurement_organizations.parent_id] :rooms [:= :rooms.id :procurement_requests.room_id] :buildings [:= :buildings.id :rooms.building_id]), :where [:= :procurement_requests.id #uuid "e8786990-28b0-4c0a-9d68-b09ddbc68092"]}
>o> tbl :users
>o> nest-key :user
>o> past? query= [SELECT current_date > CAST(? AS date) AS result  2024-03-18]
>o> past? result= {:result false}