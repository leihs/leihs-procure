SELECT DISTINCT ON (procurement_requests.id, concat(lower(coalesce(procurement_requests.article_name, '')), lower(coalesce(models.product, '')), lower(coalesce(models.version, '')))) procurement_requests.*, ((CASE WHEN procurement_requests.approved_quantity IS NULL THEN $1 WHEN procurement_requests.approved_quantity >= procurement_requests.requested_quantity THEN $2 WHEN (procurement_requests.approved_quantity < procurement_requests.requested_quantity) AND (procurement_requests.approved_quantity > $3) THEN $4 WHEN procurement_requests.approved_quantity = $5 THEN $6 END)) AS state, (ROW_TO_JSON(procurement_budget_periods_2)) AS budget_period, row_to_json(procurement_categories)::jsonb || jsonb_build_object('main_category', row_to_json(procurement_main_categories)) AS category, (ROW_TO_JSON(models)) AS model, row_to_json(procurement_organizations)::jsonb || jsonb_build_object('department', row_to_json(procurement_departments)) AS organization, (ROW_TO_JSON(procurement_templates)) AS template, row_to_json(rooms)::jsonb || jsonb_build_object('building', row_to_json(buildings)) AS room, (ROW_TO_JSON(suppliers)) AS supplier, (ROW_TO_JSON(users)) AS user FROM procurement_requests INNER JOIN procurement_budget_periods ON procurement_budget_periods.id = procurement_requests.budget_period_id INNER JOIN (SELECT *, current_date > end_date AS is_past FROM procurement_budget_periods) AS procurement_budget_periods_2 ON procurement_budget_periods_2.id = procurement_requests.budget_period_id INNER JOIN procurement_categories ON procurement_categories.id = procurement_requests.category_id INNER JOIN procurement_main_categories ON procurement_main_categories.id = procurement_categories.main_category_id INNER JOIN procurement_organizations ON procurement_organizations.id = procurement_requests.organization_id INNER JOIN procurement_organizations AS procurement_departments ON procurement_departments.id = procurement_organizations.parent_id INNER JOIN rooms ON rooms.id = procurement_requests.room_id INNER JOIN buildings ON buildings.id = rooms.building_id LEFT JOIN models ON models.id = procurement_requests.model_id LEFT JOIN procurement_templates ON procurement_templates.id = procurement_requests.template_id LEFT JOIN suppliers ON suppliers.id = procurement_requests.supplier_id LEFT JOIN users ON users.id = procurement_requests.user_id WHERE (TRUE = FALSE) AND (procurement_requests.budget_period_id IN (CAST($7 AS UUID))) AND (procurement_requests.organization_id IN (CAST($8 AS UUID))) AND (procurement_requests.priority IN ($9, $10)) AND (procurement_requests.inspector_priority IN ($11, $12, $13)) AND ((procurement_requests.approved_quantity IS NULL) OR (procurement_requests.approved_quantity >= procurement_requests.requested_quantity) OR ((procurement_requests.approved_quantity < procurement_requests.requested_quantity) AND (procurement_requests.approved_quantity > $14)) OR (procurement_requests.approved_quantity = $15)) AND (procurement_requests.order_status IN ((CAST($16 AS ORDER_STATUS_ENUM)), (CAST($17 AS ORDER_STATUS_ENUM)), (CAST($18 AS ORDER_STATUS_ENUM)), (CAST($19 AS ORDER_STATUS_ENUM)), (CAST($20 AS ORDER_STATUS_ENUM)))) AND (($21, buildings.name, $22) OR ($23, procurement_requests.short_id, $24) OR ($25, procurement_requests.article_name, $26) OR ($27, procurement_requests.article_number, $28) OR ($29, procurement_requests.inspection_comment, $30) OR ($31, procurement_requests.order_comment, $32) OR ($33, procurement_requests.motivation, $34) OR ($35, procurement_requests.receiver, $36) OR ($37, procurement_requests.supplier_name, $38) OR ($39, rooms.name, $40) OR ($41, models.product, $42) OR ($43, models.version, $44) OR ($45, users.firstname, $46) OR ($47, users.lastname, $48)) ORDER BY concat(lower(coalesce(procurement_requests.article_name, '')), lower(coalesce(models.product, '')), lower(coalesce(models.version, ''))) ASC



SELECT DISTINCT ON (
    procurement_requests.id,
    concat(
        lower(coalesce(procurement_requests.article_name, '')),
        lower(coalesce(models.product, '')),
        lower(coalesce(models.version, ''))
    )
)
procurement_requests.*,
(
    CASE
        WHEN procurement_requests.approved_quantity IS NULL THEN 'NEW'
        WHEN procurement_requests.approved_quantity >= procurement_requests.requested_quantity THEN 'APPROVED'
        WHEN (procurement_requests.approved_quantity < procurement_requests.requested_quantity) AND (procurement_requests.approved_quantity > 0) THEN 'PARTIALLY_APPROVED'
        WHEN procurement_requests.approved_quantity = 0 THEN 'DENIED'
    END
) AS state,
ROW_TO_JSON(procurement_budget_periods_2) AS budget_period,
row_to_json(procurement_categories)::jsonb || jsonb_build_object('main_category', row_to_json(procurement_main_categories)) AS category,
ROW_TO_JSON(models) AS model,
row_to_json(procurement_organizations)::jsonb || jsonb_build_object('department', row_to_json(procurement_departments)) AS organization,
ROW_TO_JSON(procurement_templates) AS template,
row_to_json(rooms)::jsonb || jsonb_build_object('building', row_to_json(buildings)) AS room,
ROW_TO_JSON(suppliers) AS supplier,
ROW_TO_JSON(users) AS user
FROM procurement_requests
INNER JOIN procurement_budget_periods ON procurement_budget_periods.id = procurement_requests.budget_period_id
INNER JOIN (
    SELECT *, current_date > end_date AS is_past
    FROM procurement_budget_periods
) AS procurement_budget_periods_2 ON procurement_budget_periods_2.id = procurement_requests.budget_period_id
INNER JOIN procurement_categories ON procurement_categories.id = procurement_requests.category_id
INNER JOIN procurement_main_categories ON procurement_main_categories.id = procurement_categories.main_category_id
INNER JOIN procurement_organizations ON procurement_organizations.id = procurement_requests.organization_id
INNER JOIN procurement_organizations AS procurement_departments ON procurement_departments.id = procurement_organizations.parent_id
INNER JOIN rooms ON rooms.id = procurement_requests.room_id
INNER JOIN buildings ON buildings.id = rooms.building_id
LEFT JOIN models ON models.id = procurement_requests.model_id
LEFT JOIN procurement_templates ON procurement_templates.id = procurement_requests.template_id
LEFT JOIN suppliers ON suppliers.id = procurement_requests.supplier_id
LEFT JOIN users ON users.id = procurement_requests.user_id
WHERE (TRUE = FALSE)
AND (procurement_requests.budget_period_id IN (CAST('1173b482-b9e6-46b4-a5e3-0b021c860e9b' AS UUID)))
AND (procurement_requests.organization_id IN (CAST(NULL AS UUID)))
AND (procurement_requests.priority IN ('normal', 'high'))
AND (procurement_requests.inspector_priority IN ('low', 'mandatory', 'medium'))
AND ((procurement_requests.approved_quantity IS NULL)
    OR (procurement_requests.approved_quantity >= procurement_requests.requested_quantity)
    OR ((procurement_requests.approved_quantity < procurement_requests.requested_quantity) AND (procurement_requests.approved_quantity > 0))
    OR (procurement_requests.approved_quantity = 0))
AND (procurement_requests.order_status IN (
    CAST('not_processed' AS ORDER_STATUS_ENUM),
    CAST('in_progress' AS ORDER_STATUS_ENUM),
    CAST('procured' AS ORDER_STATUS_ENUM),
    CAST('alternative_procured' AS ORDER_STATUS_ENUM),
    CAST('not_procured' AS ORDER_STATUS_ENUM)
))
AND (('%dfdafdasd%' LIKE buildings.name)
    OR ('%dfdafdasd%' LIKE procurement_requests.short_id)
    OR ('%dfdafdasd%' LIKE procurement_requests.article_name)
    OR ('%dfdafdasd%' LIKE procurement_requests.article_number)
    OR ('%dfdafdasd%' LIKE procurement_requests.inspection_comment)
    OR ('%dfdafdasd%' LIKE procurement_requests.order_comment)
    OR ('%dfdafdasd%' LIKE procurement_requests.motivation)
    OR ('%dfdafdasd%' LIKE procurement_requests.receiver)
    OR ('%dfdafdasd%' LIKE procurement_requests.supplier_name)
    OR ('%dfdafdasd%' LIKE rooms.name)
    OR ('%dfdafdasd%' LIKE models.product)
    OR ('%dfdafdasd%' LIKE models.version)
    OR ('%dfdafdasd%' LIKE users.firstname)
    OR ('%dfdafdasd%' LIKE users.lastname))
ORDER BY concat(
    lower(coalesce(procurement_requests.article_name, '')),
    lower(coalesce(models.product, '')),
    lower(coalesce(models.version, ''))
) ASC
